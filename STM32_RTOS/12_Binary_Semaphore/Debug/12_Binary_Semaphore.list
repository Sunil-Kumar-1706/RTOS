
12_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d10  08006d10  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d10  08006d10  00007d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d18  08006d18  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d1c  08006d1c  00007d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006d20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  2000006c  08006d8c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  08006d8c  000081cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e8a  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5e  00000000  00000000  00018f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0001ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb3  00000000  00000000  0001c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284bb  00000000  00000000  0001d593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011783  00000000  00000000  00045a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f251c  00000000  00000000  000571d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001496ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  00149730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014dff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b3c 	.word	0x08006b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006b3c 	.word	0x08006b3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	200000dc 	.word	0x200000dc

080005e0 <UART_SendString>:
xSemaphoreHandle binarySemaphore;       // Binary semaphore handle
xQueueHandle idQueue;                   // Queue handle for storing IDs

// Send string over UART
void UART_SendString(char *str)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <UART_SendString+0x28>)
 80005fa:	f002 f9f9 	bl	80029f0 <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200002dc 	.word	0x200002dc

0800060c <ProducerTask>:

// Producer task: generates IDs and sends them to the queue
void ProducerTask(void *parameters)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    unsigned int generatedID;           // Randomly generated ID
    portBASE_TYPE queueStatus;          // Queue status return value

    xSemaphoreGive(binarySemaphore);    // Give semaphore at start
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <ProducerTask+0x64>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	f003 f8c3 	bl	80037a8 <xQueueGenericSend>

    while(1)
    {
        generatedID = (rand() & 0x1FF); // Generate random ID
 8000622:	f005 f8d7 	bl	80057d4 <rand>
 8000626:	4603      	mov	r3, r0
 8000628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800062c:	60bb      	str	r3, [r7, #8]
        queueStatus = xQueueSend(idQueue, &generatedID, portMAX_DELAY); // Send ID to queue
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <ProducerTask+0x68>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	f107 0108 	add.w	r1, r7, #8
 8000636:	2300      	movs	r3, #0
 8000638:	f04f 32ff 	mov.w	r2, #4294967295
 800063c:	f003 f8b4 	bl	80037a8 <xQueueGenericSend>
 8000640:	60f8      	str	r0, [r7, #12]

        if(queueStatus != pdPASS)       // If failed to send
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d003      	beq.n	8000650 <ProducerTask+0x44>
        {
            UART_SendString("Failed to send ID to queue\r\n");
 8000648:	480b      	ldr	r0, [pc, #44]	@ (8000678 <ProducerTask+0x6c>)
 800064a:	f7ff ffc9 	bl	80005e0 <UART_SendString>
 800064e:	e7e8      	b.n	8000622 <ProducerTask+0x16>
        }
        else                            // If sent successfully
        {
            xSemaphoreGive(binarySemaphore); // Release semaphore
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ProducerTask+0x64>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	f003 f8a5 	bl	80037a8 <xQueueGenericSend>
            taskYIELD();                    // Yield CPU to other tasks
 800065e:	4b07      	ldr	r3, [pc, #28]	@ (800067c <ProducerTask+0x70>)
 8000660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	f3bf 8f6f 	isb	sy
        generatedID = (rand() & 0x1FF); // Generate random ID
 800066e:	e7d8      	b.n	8000622 <ProducerTask+0x16>
 8000670:	20000364 	.word	0x20000364
 8000674:	20000368 	.word	0x20000368
 8000678:	08006b54 	.word	0x08006b54
 800067c:	e000ed04 	.word	0xe000ed04

08000680 <ProcessID>:
    }
}

// Process received ID
void ProcessID(unsigned char id)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	@ 0x40
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    char message[50];                   // Buffer for message
    sprintf(message, "ID received: %d\r\n", id); // Format message
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4908      	ldr	r1, [pc, #32]	@ (80006b4 <ProcessID+0x34>)
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f99e 	bl	80059d4 <siprintf>
    UART_SendString(message);           // Send message
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff9f 	bl	80005e0 <UART_SendString>
    vTaskDelay(id);                     // Delay for simulation
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fe33 	bl	8004310 <vTaskDelay>
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	@ 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	08006b74 	.word	0x08006b74

080006b8 <ConsumerTask>:

// Consumer task: receives IDs and processes them
void ConsumerTask(void *parameters)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    unsigned char receivedID;           // Received ID from queue
    portBASE_TYPE queueStatus;          // Queue status return value

    xSemaphoreGive(binarySemaphore);    // Give semaphore at start
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <ConsumerTask+0x4c>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	f003 f86d 	bl	80037a8 <xQueueGenericSend>

    while(1)
    {
        xSemaphoreTake(binarySemaphore, 0);   // Try to take semaphore (non-blocking)
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <ConsumerTask+0x4c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fa4b 	bl	8003b70 <xQueueSemaphoreTake>
        queueStatus = xQueueReceive(idQueue, &receivedID, 0); // Try to receive ID
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <ConsumerTask+0x50>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f107 010b 	add.w	r1, r7, #11
 80006e2:	2200      	movs	r2, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 f961 	bl	80039ac <xQueueReceive>
 80006ea:	60f8      	str	r0, [r7, #12]

        if(queueStatus == pdPASS)       // If ID received
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d104      	bne.n	80006fc <ConsumerTask+0x44>
        {
            ProcessID(receivedID);      // Process the ID
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffc3 	bl	8000680 <ProcessID>
 80006fa:	e7e8      	b.n	80006ce <ConsumerTask+0x16>
        }
        else                            // If queue empty
        {
            UART_SendString("Queue is empty\r\n");
 80006fc:	4803      	ldr	r0, [pc, #12]	@ (800070c <ConsumerTask+0x54>)
 80006fe:	f7ff ff6f 	bl	80005e0 <UART_SendString>
        xSemaphoreTake(binarySemaphore, 0);   // Try to take semaphore (non-blocking)
 8000702:	e7e4      	b.n	80006ce <ConsumerTask+0x16>
 8000704:	20000364 	.word	0x20000364
 8000708:	20000368 	.word	0x20000368
 800070c:	08006b88 	.word	0x08006b88

08000710 <main>:
    }
}

// Main function
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af02      	add	r7, sp, #8
    HAL_Init();                         // Initialize HAL library
 8000716:	f000 fad9 	bl	8000ccc <HAL_Init>
    SystemClock_Config();               // Configure system clock
 800071a:	f000 f851 	bl	80007c0 <SystemClock_Config>
    MX_GPIO_Init();                     // Initialize GPIO
 800071e:	f000 f8bb 	bl	8000898 <MX_GPIO_Init>
    MX_USART2_UART_Init();              // Initialize USART2
 8000722:	f000 f88f 	bl	8000844 <MX_USART2_UART_Init>

    vSemaphoreCreateBinary(binarySemaphore); // Create binary semaphore
 8000726:	2203      	movs	r2, #3
 8000728:	2100      	movs	r1, #0
 800072a:	2001      	movs	r0, #1
 800072c:	f002 ffe2 	bl	80036f4 <xQueueGenericCreate>
 8000730:	4603      	mov	r3, r0
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <main+0x94>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <main+0x94>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <main+0x3c>
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <main+0x94>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	f003 f82e 	bl	80037a8 <xQueueGenericSend>
    idQueue = xQueueCreate(1, sizeof(unsigned int)); // Create queue of length 1
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	2001      	movs	r0, #1
 8000752:	f002 ffcf 	bl	80036f4 <xQueueGenericCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <main+0x98>)
 800075a:	6013      	str	r3, [r2, #0]

    if((binarySemaphore != NULL) && (idQueue != NULL)) // Check if created
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <main+0x94>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d018      	beq.n	8000796 <main+0x86>
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <main+0x98>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d014      	beq.n	8000796 <main+0x86>
    {
        xTaskCreate(ProducerTask, "ProducerTask", configMINIMAL_STACK_SIZE, NULL, 3, NULL); // Create producer task
 800076c:	2300      	movs	r3, #0
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2303      	movs	r3, #3
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	490c      	ldr	r1, [pc, #48]	@ (80007ac <main+0x9c>)
 800077a:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <main+0xa0>)
 800077c:	f003 fc90 	bl	80040a0 <xTaskCreate>
        xTaskCreate(ConsumerTask, "ConsumerTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL); // Create consumer task
 8000780:	2300      	movs	r3, #0
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	2301      	movs	r3, #1
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2300      	movs	r3, #0
 800078a:	2280      	movs	r2, #128	@ 0x80
 800078c:	4909      	ldr	r1, [pc, #36]	@ (80007b4 <main+0xa4>)
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <main+0xa8>)
 8000790:	f003 fc86 	bl	80040a0 <xTaskCreate>
 8000794:	e002      	b.n	800079c <main+0x8c>
    }
    else
    {
        UART_SendString("Queue/Semaphore creation failed\r\n");
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <main+0xac>)
 8000798:	f7ff ff22 	bl	80005e0 <UART_SendString>
    }

    osKernelStart();                    // Start FreeRTOS scheduler
 800079c:	f002 fe85 	bl	80034aa <osKernelStart>

    while (1)                           // Should never reach here
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <main+0x90>
 80007a4:	20000364 	.word	0x20000364
 80007a8:	20000368 	.word	0x20000368
 80007ac:	08006b9c 	.word	0x08006b9c
 80007b0:	0800060d 	.word	0x0800060d
 80007b4:	08006bac 	.word	0x08006bac
 80007b8:	080006b9 	.word	0x080006b9
 80007bc:	08006bbc 	.word	0x08006bbc

080007c0 <SystemClock_Config>:
    }
}

// System clock configuration
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	@ 0x58
 80007c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2244      	movs	r2, #68	@ 0x44
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 f965 	bl	8005a9e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007e6:	f000 fda3 	bl	8001330 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 8000804:	230a      	movs	r3, #10
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000808:	2307      	movs	r3, #7
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fddf 	bl	80013dc <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 800081e:	230f      	movs	r3, #15
 8000820:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2303      	movs	r3, #3
 8000824:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000832:	463b      	mov	r3, r7
 8000834:	2104      	movs	r1, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f9ac 	bl	8001b94 <HAL_RCC_ClockConfig>
}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	@ 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <MX_USART2_UART_Init>:

// USART2 initialization
void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800084a:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <MX_USART2_UART_Init+0x50>)
 800084c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_UART_Init(&huart2);
 8000886:	4802      	ldr	r0, [pc, #8]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000888:	f002 f864 	bl	8002954 <HAL_UART_Init>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200002dc 	.word	0x200002dc
 8000894:	40004400 	.word	0x40004400

08000898 <MX_GPIO_Init>:

// GPIO initialization
void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a24      	ldr	r2, [pc, #144]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a18      	ldr	r2, [pc, #96]	@ (800095c <MX_GPIO_Init+0xc4>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_GPIO_Init+0xc4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Set LED low
 800090e:	2200      	movs	r2, #0
 8000910:	2120      	movs	r1, #32
 8000912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000916:	f000 fce5 	bl	80012e4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = B1_Pin;       // Configure button pin
 800091a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000920:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <MX_GPIO_Init+0xc8>)
 8000932:	f000 fb2d 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LD2_Pin;      // Configure LED pin
 8000936:	2320      	movs	r3, #32
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f000 fb1e 	bl	8000f90 <HAL_GPIO_Init>
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800

08000964 <Error_Handler>:
    }
}

// Error handler
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
    __disable_irq();                   // Disable interrupts
    while (1) {}                        // Stay here
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <HAL_MspInit+0x4c>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <HAL_MspInit+0x4c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	@ 0x60
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_MspInit+0x4c>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_MspInit+0x4c>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	@ 0x58
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_MspInit+0x4c>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	210f      	movs	r1, #15
 80009aa:	f06f 0001 	mvn.w	r0, #1
 80009ae:	f000 fac6 	bl	8000f3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0ac      	sub	sp, #176	@ 0xb0
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2288      	movs	r2, #136	@ 0x88
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f005 f85c 	bl	8005a9e <memset>
  if(huart->Instance==USART2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <HAL_UART_MspInit+0xb0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d13b      	bne.n	8000a68 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 faed 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f7ff ffac 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a10:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a54:	2307      	movs	r3, #7
 8000a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a64:	f000 fa94 	bl	8000f90 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a68:	bf00      	nop
 8000a6a:	37b0      	adds	r7, #176	@ 0xb0
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 f967 	bl	8000d84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ab6:	f004 f86b 	bl	8004b90 <xTaskGetSchedulerState>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d001      	beq.n	8000ac4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ac0:	f004 fc4a 	bl	8005358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_kill>:

int _kill(int pid, int sig)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ae2:	f005 f82b 	bl	8005b3c <__errno>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2216      	movs	r2, #22
 8000aea:	601a      	str	r2, [r3, #0]
  return -1;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_exit>:

void _exit (int status)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ffe7 	bl	8000ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b0a:	bf00      	nop
 8000b0c:	e7fd      	b.n	8000b0a <_exit+0x12>

08000b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e00a      	b.n	8000b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b20:	f3af 8000 	nop.w
 8000b24:	4601      	mov	r1, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	60ba      	str	r2, [r7, #8]
 8000b2c:	b2ca      	uxtb	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbf0      	blt.n	8000b20 <_read+0x12>
  }

  return len;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e009      	b.n	8000b6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbf1      	blt.n	8000b5a <_write+0x12>
  }
  return len;
 8000b76:	687b      	ldr	r3, [r7, #4]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_close>:

int _close(int file)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_isatty>:

int _isatty(int file)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f004 ff90 	bl	8005b3c <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20018000 	.word	0x20018000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	2000036c 	.word	0x2000036c
 8000c50:	200011d0 	.word	0x200011d0

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c7c:	f7ff ffea 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f004 ff4f 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000caa:	f7ff fd31 	bl	8000710 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cbc:	08006d20 	.word	0x08006d20
  ldr r2, =_sbss
 8000cc0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cc4:	200011cc 	.word	0x200011cc

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <HAL_Init+0x3c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <HAL_Init+0x3c>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f920 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f000 f80f 	bl	8000d0c <HAL_InitTick>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	e001      	b.n	8000cfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfa:	f7ff fe39 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d023      	beq.n	8000d68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_InitTick+0x70>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f91d 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d809      	bhi.n	8000d5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f8f5 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_InitTick+0x74>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e001      	b.n	8000d6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000370 	.word	0x20000370

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000370 	.word	0x20000370

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	@ (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e17f      	b.n	80012a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8171 	beq.w	800129a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x40>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b03      	cmp	r3, #3
 800103c:	d118      	bne.n	8001070 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80ac 	beq.w	800129a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b5f      	ldr	r3, [pc, #380]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	4a5e      	ldr	r2, [pc, #376]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6613      	str	r3, [r2, #96]	@ 0x60
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <HAL_GPIO_Init+0x330>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800115a:	4a5a      	ldr	r2, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x242>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	@ (80012c8 <HAL_GPIO_Init+0x338>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x23e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	@ (80012cc <HAL_GPIO_Init+0x33c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x23a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	@ (80012d0 <HAL_GPIO_Init+0x340>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x236>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <HAL_GPIO_Init+0x344>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x232>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <HAL_GPIO_Init+0x348>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x22e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4a      	ldr	r2, [pc, #296]	@ (80012dc <HAL_GPIO_Init+0x34c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x22a>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x244>
 80011d2:	2300      	movs	r3, #0
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e4:	4937      	ldr	r1, [pc, #220]	@ (80012c4 <HAL_GPIO_Init+0x334>)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001216:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800126a:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <HAL_GPIO_Init+0x350>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ae78 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00
 80012d4:	48001000 	.word	0x48001000
 80012d8:	48001400 	.word	0x48001400
 80012dc:	48001800 	.word	0x48001800
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001300:	e002      	b.n	8001308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <HAL_PWREx_GetVoltageRange+0x18>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000

08001330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800133e:	d130      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001340:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800134c:	d038      	beq.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001356:	4a1e      	ldr	r2, [pc, #120]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001358:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2232      	movs	r2, #50	@ 0x32
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001374:	e002      	b.n	800137c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001388:	d102      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x60>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f2      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139c:	d110      	bne.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e00f      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ae:	d007      	beq.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40007000 	.word	0x40007000
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e3ca      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ee:	4b97      	ldr	r3, [pc, #604]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f8:	4b94      	ldr	r3, [pc, #592]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80e4 	beq.w	80015d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_RCC_OscConfig+0x4a>
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	f040 808b 	bne.w	8001534 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b01      	cmp	r3, #1
 8001422:	f040 8087 	bne.w	8001534 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001426:	4b89      	ldr	r3, [pc, #548]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x62>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e3a2      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1a      	ldr	r2, [r3, #32]
 8001442:	4b82      	ldr	r3, [pc, #520]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <HAL_RCC_OscConfig+0x7c>
 800144e:	4b7f      	ldr	r3, [pc, #508]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001456:	e005      	b.n	8001464 <HAL_RCC_OscConfig+0x88>
 8001458:	4b7c      	ldr	r3, [pc, #496]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001464:	4293      	cmp	r3, r2
 8001466:	d223      	bcs.n	80014b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fd55 	bl	8001f1c <RCC_SetFlashLatencyFromMSIRange>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e383      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147c:	4b73      	ldr	r3, [pc, #460]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a72      	ldr	r2, [pc, #456]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b70      	ldr	r3, [pc, #448]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	496d      	ldr	r1, [pc, #436]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149a:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	4968      	ldr	r1, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
 80014ae:	e025      	b.n	80014fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a65      	ldr	r2, [pc, #404]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b63      	ldr	r3, [pc, #396]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4960      	ldr	r1, [pc, #384]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ce:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	495b      	ldr	r1, [pc, #364]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fd15 	bl	8001f1c <RCC_SetFlashLatencyFromMSIRange>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e343      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014fc:	f000 fc4a 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b52      	ldr	r3, [pc, #328]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	4950      	ldr	r1, [pc, #320]	@ (8001650 <HAL_RCC_OscConfig+0x274>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	4a4e      	ldr	r2, [pc, #312]	@ (8001654 <HAL_RCC_OscConfig+0x278>)
 800151a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800151c:	4b4e      	ldr	r3, [pc, #312]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fbf3 	bl	8000d0c <HAL_InitTick>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d052      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	e327      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d032      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a42      	ldr	r2, [pc, #264]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001548:	f7ff fc30 	bl	8000dac <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001550:	f7ff fc2c 	bl	8000dac <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e310      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a36      	ldr	r2, [pc, #216]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4931      	ldr	r1, [pc, #196]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	492c      	ldr	r1, [pc, #176]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e01a      	b.n	80015d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fbfd 	bl	8000dac <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b6:	f7ff fbf9 	bl	8000dac <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e2dd      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1da>
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d074      	beq.n	80016ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x21a>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	d10e      	bne.n	800160e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d10b      	bne.n	800160e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d064      	beq.n	80016cc <HAL_RCC_OscConfig+0x2f0>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d160      	bne.n	80016cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e2ba      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x24a>
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e026      	b.n	8001674 <HAL_RCC_OscConfig+0x298>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800162e:	d115      	bne.n	800165c <HAL_RCC_OscConfig+0x280>
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a02      	ldr	r2, [pc, #8]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e014      	b.n	8001674 <HAL_RCC_OscConfig+0x298>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	08006be8 	.word	0x08006be8
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004
 800165c:	4ba0      	ldr	r3, [pc, #640]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a9f      	ldr	r2, [pc, #636]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b9d      	ldr	r3, [pc, #628]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a9c      	ldr	r2, [pc, #624]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb96 	bl	8000dac <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb92 	bl	8000dac <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e276      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	4b92      	ldr	r3, [pc, #584]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x2a8>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb82 	bl	8000dac <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb7e 	bl	8000dac <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e262      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x2d0>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d060      	beq.n	800179c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x310>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d119      	bne.n	800171a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d116      	bne.n	800171a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	4b7c      	ldr	r3, [pc, #496]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x328>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e23f      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	4973      	ldr	r1, [pc, #460]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001718:	e040      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d023      	beq.n	800176a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001722:	4b6f      	ldr	r3, [pc, #444]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fb3d 	bl	8000dac <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fb39 	bl	8000dac <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e21d      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001748:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b62      	ldr	r3, [pc, #392]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	495f      	ldr	r1, [pc, #380]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b5d      	ldr	r3, [pc, #372]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5c      	ldr	r2, [pc, #368]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fb19 	bl	8000dac <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fb15 	bl	8000dac <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1f9      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03c      	beq.n	8001822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b0:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b6:	4a4a      	ldr	r2, [pc, #296]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff faf4 	bl	8000dac <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff faf0 	bl	8000dac <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1d4      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x3ec>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fad7 	bl	8000dac <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fad3 	bl	8000dac <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1b7      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a6 	beq.w	800197c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10d      	bne.n	800185c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	@ 0x58
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001858:	2301      	movs	r3, #1
 800185a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d118      	bne.n	800189a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001874:	f7ff fa9a 	bl	8000dac <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7ff fa96 	bl	8000dac <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e17a      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4d8>
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b2:	e029      	b.n	8001908 <HAL_RCC_OscConfig+0x52c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d115      	bne.n	80018e8 <HAL_RCC_OscConfig+0x50c>
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c2:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a03      	ldr	r2, [pc, #12]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x52c>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40007000 	.word	0x40007000
 80018e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	4a9b      	ldr	r2, [pc, #620]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f8:	4b98      	ldr	r3, [pc, #608]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	4a97      	ldr	r2, [pc, #604]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d016      	beq.n	800193e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fa4c 	bl	8000dac <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fa48 	bl	8000dac <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e12a      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ed      	beq.n	8001918 <HAL_RCC_OscConfig+0x53c>
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff fa35 	bl	8000dac <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff fa31 	bl	8000dac <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e113      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ed      	bne.n	8001946 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b7a      	ldr	r3, [pc, #488]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	4a79      	ldr	r2, [pc, #484]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80fe 	beq.w	8001b82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	2b02      	cmp	r3, #2
 800198c:	f040 80d0 	bne.w	8001b30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001990:	4b72      	ldr	r3, [pc, #456]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d130      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	3b01      	subs	r3, #1
 80019b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d127      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11f      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019d0:	2a07      	cmp	r2, #7
 80019d2:	bf14      	ite	ne
 80019d4:	2201      	movne	r2, #1
 80019d6:	2200      	moveq	r2, #0
 80019d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d06e      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d069      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a18:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0ad      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a34:	f7ff f9ba 	bl	8000dac <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f9b6 	bl	8000dac <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e09a      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4e:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5a:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	4b40      	ldr	r3, [pc, #256]	@ (8001b60 <HAL_RCC_OscConfig+0x784>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a74:	0212      	lsls	r2, r2, #8
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a7c:	0852      	lsrs	r2, r2, #1
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	0552      	lsls	r2, r2, #21
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a88:	0852      	lsrs	r2, r2, #1
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	0652      	lsls	r2, r2, #25
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a94:	0912      	lsrs	r2, r2, #4
 8001a96:	0452      	lsls	r2, r2, #17
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	4930      	ldr	r1, [pc, #192]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab8:	f7ff f978 	bl	8000dac <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f974 	bl	8000dac <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e058      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ade:	e050      	b.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e04f      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d148      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b08:	f7ff f950 	bl	8000dac <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f94c 	bl	8000dac <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e030      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x734>
 8001b2e:	e028      	b.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d023      	beq.n	8001b7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff f933 	bl	8000dac <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	e00c      	b.n	8001b64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff f92f 	bl	8000dac <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d905      	bls.n	8001b64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e013      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_OscConfig+0x7b0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ec      	bne.n	8001b4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_RCC_OscConfig+0x7b0>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <HAL_RCC_OscConfig+0x7b0>)
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_OscConfig+0x7b4>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e001      	b.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	feeefffc 	.word	0xfeeefffc

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0e7      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b72      	ldr	r3, [pc, #456]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4970      	ldr	r1, [pc, #448]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0cf      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d908      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b63      	ldr	r3, [pc, #396]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4960      	ldr	r1, [pc, #384]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d04c      	beq.n	8001cac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d121      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0a6      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	4b54      	ldr	r3, [pc, #336]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d115      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e09a      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e08e      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e086      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c6a:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4943      	ldr	r1, [pc, #268]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f896 	bl	8000dac <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff f892 	bl	8000dac <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e06e      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 020c 	and.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1eb      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d208      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	492b      	ldr	r1, [pc, #172]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cda:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d210      	bcs.n	8001d0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0207 	bic.w	r2, r3, #7
 8001cf0:	4923      	ldr	r1, [pc, #140]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e036      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4918      	ldr	r1, [pc, #96]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4910      	ldr	r1, [pc, #64]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d48:	f000 f824 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	490b      	ldr	r1, [pc, #44]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f4>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
 8001d64:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_ClockConfig+0x1fc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe ffcd 	bl	8000d0c <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d76:	7afb      	ldrb	r3, [r7, #11]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08006be8 	.word	0x08006be8
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d121      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d11e      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dc8:	4b34      	ldr	r3, [pc, #208]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e005      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001de4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001df0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	e004      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e18:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d134      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d003      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0xac>
 8001e38:	e005      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e3c:	617b      	str	r3, [r7, #20]
      break;
 8001e3e:	e005      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e42:	617b      	str	r3, [r7, #20]
      break;
 8001e44:	e002      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	617b      	str	r3, [r7, #20]
      break;
 8001e4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	3301      	adds	r3, #1
 8001e58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	fb03 f202 	mul.w	r2, r3, r2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0e5b      	lsrs	r3, r3, #25
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08006c00 	.word	0x08006c00
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	007a1200 	.word	0x007a1200

08001eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4904      	ldr	r1, [pc, #16]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08006bf8 	.word	0x08006bf8

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ef4:	f7ff ffda 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4904      	ldr	r1, [pc, #16]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08006bf8 	.word	0x08006bf8

08001f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f28:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f34:	f7ff f9ee 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8001f38:	6178      	str	r0, [r7, #20]
 8001f3a:	e014      	b.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f54:	f7ff f9de 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8001f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f6c:	d10b      	bne.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	@ 0x80
 8001f72:	d919      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f78:	d902      	bls.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e013      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f80:	2301      	movs	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e010      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	@ 0x80
 8001f8a:	d902      	bls.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e00a      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b80      	cmp	r3, #128	@ 0x80
 8001f96:	d102      	bne.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e004      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b70      	cmp	r3, #112	@ 0x70
 8001fa2:	d101      	bne.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 0207 	bic.w	r2, r3, #7
 8001fb0:	4909      	ldr	r1, [pc, #36]	@ (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d041      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ffc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002000:	d02a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002002:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002006:	d824      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002008:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800200c:	d008      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800200e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002012:	d81e      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800201c:	d010      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800201e:	e018      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002020:	4b86      	ldr	r3, [pc, #536]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a85      	ldr	r2, [pc, #532]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202c:	e015      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fabb 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 800203a:	4603      	mov	r3, r0
 800203c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203e:	e00c      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3320      	adds	r3, #32
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fba6 	bl	8002798 <RCCEx_PLLSAI2_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002050:	e003      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	74fb      	strb	r3, [r7, #19]
      break;
 8002056:	e000      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002060:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800206e:	4973      	ldr	r1, [pc, #460]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002076:	e001      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d041      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800208c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002090:	d02a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002092:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002096:	d824      	bhi.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800209c:	d008      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800209e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020a2:	d81e      	bhi.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ac:	d010      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ae:	e018      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b0:	4b62      	ldr	r3, [pc, #392]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a61      	ldr	r2, [pc, #388]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020bc:	e015      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fa73 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 80020ca:	4603      	mov	r3, r0
 80020cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ce:	e00c      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3320      	adds	r3, #32
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fb5e 	bl	8002798 <RCCEx_PLLSAI2_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e0:	e003      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	74fb      	strb	r3, [r7, #19]
      break;
 80020e6:	e000      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020f0:	4b52      	ldr	r3, [pc, #328]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020fe:	494f      	ldr	r1, [pc, #316]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002106:	e001      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a0 	beq.w	800225a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	4a40      	ldr	r2, [pc, #256]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002140:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214c:	2301      	movs	r3, #1
 800214e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002150:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800215c:	f7fe fe26 	bl	8000dac <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002162:	e009      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe fe22 	bl	8000dac <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d902      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	74fb      	strb	r3, [r7, #19]
        break;
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002178:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ef      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d15c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800218a:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01f      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d019      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fde1 	bl	8000dac <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ec:	e00b      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fddd 	bl	8000dac <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d902      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	74fb      	strb	r3, [r7, #19]
            break;
 8002204:	e006      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ec      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800222a:	4904      	ldr	r1, [pc, #16]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002232:	e009      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
 8002238:	e006      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002248:	7c7b      	ldrb	r3, [r7, #17]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b9e      	ldr	r3, [pc, #632]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	4a9d      	ldr	r2, [pc, #628]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002266:	4b98      	ldr	r3, [pc, #608]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f023 0203 	bic.w	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	4994      	ldr	r1, [pc, #592]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002288:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f023 020c 	bic.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002296:	498c      	ldr	r1, [pc, #560]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022aa:	4b87      	ldr	r3, [pc, #540]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	4983      	ldr	r1, [pc, #524]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022cc:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	497b      	ldr	r1, [pc, #492]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ee:	4b76      	ldr	r3, [pc, #472]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fc:	4972      	ldr	r1, [pc, #456]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002310:	4b6d      	ldr	r3, [pc, #436]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	496a      	ldr	r1, [pc, #424]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002332:	4b65      	ldr	r3, [pc, #404]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	4961      	ldr	r1, [pc, #388]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002354:	4b5c      	ldr	r3, [pc, #368]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4959      	ldr	r1, [pc, #356]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002376:	4b54      	ldr	r3, [pc, #336]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002384:	4950      	ldr	r1, [pc, #320]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002398:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	4948      	ldr	r1, [pc, #288]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	493f      	ldr	r1, [pc, #252]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d028      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023dc:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ea:	4937      	ldr	r1, [pc, #220]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023fa:	d106      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fc:	4b32      	ldr	r3, [pc, #200]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002406:	60d3      	str	r3, [r2, #12]
 8002408:	e011      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800240e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002412:	d10c      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	2101      	movs	r1, #1
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f8c8 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d028      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800243a:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002440:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002448:	491f      	ldr	r1, [pc, #124]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002458:	d106      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a1a      	ldr	r2, [pc, #104]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002464:	60d3      	str	r3, [r2, #12]
 8002466:	e011      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002470:	d10c      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f899 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02b      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a6:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024b6:	d109      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a02      	ldr	r2, [pc, #8]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
 80024c4:	e014      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f867 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024fc:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800250a:	4928      	ldr	r1, [pc, #160]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800251a:	d10d      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f844 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	74bb      	strb	r3, [r7, #18]
 8002536:	e011      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002540:	d10c      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3320      	adds	r3, #32
 8002546:	2102      	movs	r1, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f925 	bl	8002798 <RCCEx_PLLSAI2_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002576:	490d      	ldr	r1, [pc, #52]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002590:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800259a:	4904      	ldr	r1, [pc, #16]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000

080025b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025be:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ca:	4b72      	ldr	r3, [pc, #456]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10d      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
       ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
       ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d047      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e044      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d018      	beq.n	8002636 <RCCEx_PLLSAI1_Config+0x86>
 8002604:	2b03      	cmp	r3, #3
 8002606:	d825      	bhi.n	8002654 <RCCEx_PLLSAI1_Config+0xa4>
 8002608:	2b01      	cmp	r3, #1
 800260a:	d002      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0x62>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d009      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x74>
 8002610:	e020      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e01a      	b.n	800265a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002624:	4b5b      	ldr	r3, [pc, #364]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e013      	b.n	800265e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002636:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002642:	4b54      	ldr	r3, [pc, #336]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002652:	e006      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e004      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002662:	bf00      	nop
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800266a:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	430b      	orrs	r3, r1
 8002680:	4944      	ldr	r1, [pc, #272]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d17d      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800268c:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a40      	ldr	r2, [pc, #256]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fb88 	bl	8000dac <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a0:	f7fe fb84 	bl	8000dac <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
        break;
 80026b2:	e005      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ef      	bne.n	80026a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d160      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026cc:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	0211      	lsls	r1, r2, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	0912      	lsrs	r2, r2, #4
 80026e4:	0452      	lsls	r2, r2, #17
 80026e6:	430a      	orrs	r2, r1
 80026e8:	492a      	ldr	r1, [pc, #168]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	610b      	str	r3, [r1, #16]
 80026ee:	e027      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d112      	bne.n	800271c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	0211      	lsls	r1, r2, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6912      	ldr	r2, [r2, #16]
 800270c:	0852      	lsrs	r2, r2, #1
 800270e:	3a01      	subs	r2, #1
 8002710:	0552      	lsls	r2, r2, #21
 8002712:	430a      	orrs	r2, r1
 8002714:	491f      	ldr	r1, [pc, #124]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]
 800271a:	e011      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002724:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6892      	ldr	r2, [r2, #8]
 800272c:	0211      	lsls	r1, r2, #8
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6952      	ldr	r2, [r2, #20]
 8002732:	0852      	lsrs	r2, r2, #1
 8002734:	3a01      	subs	r2, #1
 8002736:	0652      	lsls	r2, r2, #25
 8002738:	430a      	orrs	r2, r1
 800273a:	4916      	ldr	r1, [pc, #88]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800274a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fb2e 	bl	8000dac <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002752:	e009      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002754:	f7fe fb2a 	bl	8000dac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
          break;
 8002766:	e005      	b.n	8002774 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002768:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4904      	ldr	r1, [pc, #16]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027b2:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d10d      	bne.n	80027de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
       ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ca:	4b61      	ldr	r3, [pc, #388]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
       ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d047      	beq.n	800286e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e044      	b.n	800286e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d018      	beq.n	800281e <RCCEx_PLLSAI2_Config+0x86>
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d825      	bhi.n	800283c <RCCEx_PLLSAI2_Config+0xa4>
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0x62>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d009      	beq.n	800280c <RCCEx_PLLSAI2_Config+0x74>
 80027f8:	e020      	b.n	800283c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027fa:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11d      	bne.n	8002842 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e01a      	b.n	8002842 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800280c:	4b50      	ldr	r3, [pc, #320]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e013      	b.n	8002846 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800281e:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282a:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800283a:	e006      	b.n	800284a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e004      	b.n	800284c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284a:	bf00      	nop
    }

    if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	430b      	orrs	r3, r1
 8002868:	4939      	ldr	r1, [pc, #228]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d167      	bne.n	8002944 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a35      	ldr	r2, [pc, #212]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fa94 	bl	8000dac <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002886:	e009      	b.n	800289c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002888:	f7fe fa90 	bl	8000dac <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	73fb      	strb	r3, [r7, #15]
        break;
 800289a:	e005      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800289c:	4b2c      	ldr	r3, [pc, #176]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ef      	bne.n	8002888 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14a      	bne.n	8002944 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b4:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	0912      	lsrs	r2, r2, #4
 80028cc:	0452      	lsls	r2, r2, #17
 80028ce:	430a      	orrs	r2, r1
 80028d0:	491f      	ldr	r1, [pc, #124]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	614b      	str	r3, [r1, #20]
 80028d6:	e011      	b.n	80028fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	0211      	lsls	r1, r2, #8
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6912      	ldr	r2, [r2, #16]
 80028ee:	0852      	lsrs	r2, r2, #1
 80028f0:	3a01      	subs	r2, #1
 80028f2:	0652      	lsls	r2, r2, #25
 80028f4:	430a      	orrs	r2, r1
 80028f6:	4916      	ldr	r1, [pc, #88]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fa50 	bl	8000dac <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002910:	f7fe fa4c 	bl	8000dac <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
          break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4904      	ldr	r1, [pc, #16]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002940:	4313      	orrs	r3, r2
 8002942:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e040      	b.n	80029e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f822 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	@ 0x24
 8002980:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fb6a 	bl	8003074 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8af 	bl	8002b04 <UART_SetConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01b      	b.n	80029e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fbe9 	bl	80031b8 <UART_CheckIdleState>
 80029e6:	4603      	mov	r3, r0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	@ 0x28
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d177      	bne.n	8002af8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_UART_Transmit+0x24>
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e070      	b.n	8002afa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2221      	movs	r2, #33	@ 0x21
 8002a24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a26:	f7fe f9c1 	bl	8000dac <HAL_GetTick>
 8002a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a44:	d108      	bne.n	8002a58 <HAL_UART_Transmit+0x68>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a60:	e02f      	b.n	8002ac2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fc4b 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e03b      	b.n	8002afa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a94:	b292      	uxth	r2, r2
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e007      	b.n	8002ab0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1c9      	bne.n	8002a62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2140      	movs	r1, #64	@ 0x40
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fc15 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e005      	b.n	8002afa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b08a      	sub	sp, #40	@ 0x28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4ba4      	ldr	r3, [pc, #656]	@ (8002dc4 <UART_SetConfig+0x2c0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a99      	ldr	r2, [pc, #612]	@ (8002dc8 <UART_SetConfig+0x2c4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a90      	ldr	r2, [pc, #576]	@ (8002dcc <UART_SetConfig+0x2c8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d126      	bne.n	8002bdc <UART_SetConfig+0xd8>
 8002b8e:	4b90      	ldr	r3, [pc, #576]	@ (8002dd0 <UART_SetConfig+0x2cc>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d81b      	bhi.n	8002bd4 <UART_SetConfig+0xd0>
 8002b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <UART_SetConfig+0xa0>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc5 	.word	0x08002bc5
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bcd 	.word	0x08002bcd
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bba:	e116      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bc2:	e112      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bca:	e10e      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002bcc:	2308      	movs	r3, #8
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd2:	e10a      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bda:	e106      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd4 <UART_SetConfig+0x2d0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d138      	bne.n	8002c58 <UART_SetConfig+0x154>
 8002be6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <UART_SetConfig+0x2cc>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d82d      	bhi.n	8002c50 <UART_SetConfig+0x14c>
 8002bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bfc <UART_SetConfig+0xf8>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c31 	.word	0x08002c31
 8002c00:	08002c51 	.word	0x08002c51
 8002c04:	08002c51 	.word	0x08002c51
 8002c08:	08002c51 	.word	0x08002c51
 8002c0c:	08002c41 	.word	0x08002c41
 8002c10:	08002c51 	.word	0x08002c51
 8002c14:	08002c51 	.word	0x08002c51
 8002c18:	08002c51 	.word	0x08002c51
 8002c1c:	08002c39 	.word	0x08002c39
 8002c20:	08002c51 	.word	0x08002c51
 8002c24:	08002c51 	.word	0x08002c51
 8002c28:	08002c51 	.word	0x08002c51
 8002c2c:	08002c49 	.word	0x08002c49
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c36:	e0d8      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c3e:	e0d4      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c40:	2304      	movs	r3, #4
 8002c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c46:	e0d0      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c48:	2308      	movs	r3, #8
 8002c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c4e:	e0cc      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c50:	2310      	movs	r3, #16
 8002c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c56:	e0c8      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd8 <UART_SetConfig+0x2d4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d125      	bne.n	8002cae <UART_SetConfig+0x1aa>
 8002c62:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd0 <UART_SetConfig+0x2cc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c6c:	2b30      	cmp	r3, #48	@ 0x30
 8002c6e:	d016      	beq.n	8002c9e <UART_SetConfig+0x19a>
 8002c70:	2b30      	cmp	r3, #48	@ 0x30
 8002c72:	d818      	bhi.n	8002ca6 <UART_SetConfig+0x1a2>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d00a      	beq.n	8002c8e <UART_SetConfig+0x18a>
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d814      	bhi.n	8002ca6 <UART_SetConfig+0x1a2>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <UART_SetConfig+0x182>
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d008      	beq.n	8002c96 <UART_SetConfig+0x192>
 8002c84:	e00f      	b.n	8002ca6 <UART_SetConfig+0x1a2>
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c8c:	e0ad      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c94:	e0a9      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c96:	2304      	movs	r3, #4
 8002c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c9c:	e0a5      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ca4:	e0a1      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cac:	e09d      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ddc <UART_SetConfig+0x2d8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d125      	bne.n	8002d04 <UART_SetConfig+0x200>
 8002cb8:	4b45      	ldr	r3, [pc, #276]	@ (8002dd0 <UART_SetConfig+0x2cc>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cc4:	d016      	beq.n	8002cf4 <UART_SetConfig+0x1f0>
 8002cc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cc8:	d818      	bhi.n	8002cfc <UART_SetConfig+0x1f8>
 8002cca:	2b80      	cmp	r3, #128	@ 0x80
 8002ccc:	d00a      	beq.n	8002ce4 <UART_SetConfig+0x1e0>
 8002cce:	2b80      	cmp	r3, #128	@ 0x80
 8002cd0:	d814      	bhi.n	8002cfc <UART_SetConfig+0x1f8>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <UART_SetConfig+0x1d8>
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	d008      	beq.n	8002cec <UART_SetConfig+0x1e8>
 8002cda:	e00f      	b.n	8002cfc <UART_SetConfig+0x1f8>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce2:	e082      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cea:	e07e      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002cec:	2304      	movs	r3, #4
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf2:	e07a      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cfa:	e076      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d02:	e072      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a35      	ldr	r2, [pc, #212]	@ (8002de0 <UART_SetConfig+0x2dc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d12a      	bne.n	8002d64 <UART_SetConfig+0x260>
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <UART_SetConfig+0x2cc>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d1c:	d01a      	beq.n	8002d54 <UART_SetConfig+0x250>
 8002d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d22:	d81b      	bhi.n	8002d5c <UART_SetConfig+0x258>
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d28:	d00c      	beq.n	8002d44 <UART_SetConfig+0x240>
 8002d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d2e:	d815      	bhi.n	8002d5c <UART_SetConfig+0x258>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <UART_SetConfig+0x238>
 8002d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d38:	d008      	beq.n	8002d4c <UART_SetConfig+0x248>
 8002d3a:	e00f      	b.n	8002d5c <UART_SetConfig+0x258>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d42:	e052      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4a:	e04e      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d52:	e04a      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002d54:	2308      	movs	r3, #8
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d5a:	e046      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d62:	e042      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <UART_SetConfig+0x2c4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d13a      	bne.n	8002de4 <UART_SetConfig+0x2e0>
 8002d6e:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <UART_SetConfig+0x2cc>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d7c:	d01a      	beq.n	8002db4 <UART_SetConfig+0x2b0>
 8002d7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d82:	d81b      	bhi.n	8002dbc <UART_SetConfig+0x2b8>
 8002d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d88:	d00c      	beq.n	8002da4 <UART_SetConfig+0x2a0>
 8002d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d8e:	d815      	bhi.n	8002dbc <UART_SetConfig+0x2b8>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <UART_SetConfig+0x298>
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d98:	d008      	beq.n	8002dac <UART_SetConfig+0x2a8>
 8002d9a:	e00f      	b.n	8002dbc <UART_SetConfig+0x2b8>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da2:	e022      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002da4:	2302      	movs	r3, #2
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002daa:	e01e      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002dac:	2304      	movs	r3, #4
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db2:	e01a      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002db4:	2308      	movs	r3, #8
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dba:	e016      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dc2:	e012      	b.n	8002dea <UART_SetConfig+0x2e6>
 8002dc4:	efff69f3 	.word	0xefff69f3
 8002dc8:	40008000 	.word	0x40008000
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	40004c00 	.word	0x40004c00
 8002de0:	40005000 	.word	0x40005000
 8002de4:	2310      	movs	r3, #16
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a9f      	ldr	r2, [pc, #636]	@ (800306c <UART_SetConfig+0x568>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d17a      	bne.n	8002eea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002df4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d824      	bhi.n	8002e46 <UART_SetConfig+0x342>
 8002dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <UART_SetConfig+0x300>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e29 	.word	0x08002e29
 8002e08:	08002e47 	.word	0x08002e47
 8002e0c:	08002e31 	.word	0x08002e31
 8002e10:	08002e47 	.word	0x08002e47
 8002e14:	08002e37 	.word	0x08002e37
 8002e18:	08002e47 	.word	0x08002e47
 8002e1c:	08002e47 	.word	0x08002e47
 8002e20:	08002e47 	.word	0x08002e47
 8002e24:	08002e3f 	.word	0x08002e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e28:	f7ff f84c 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	61f8      	str	r0, [r7, #28]
        break;
 8002e2e:	e010      	b.n	8002e52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e30:	4b8f      	ldr	r3, [pc, #572]	@ (8003070 <UART_SetConfig+0x56c>)
 8002e32:	61fb      	str	r3, [r7, #28]
        break;
 8002e34:	e00d      	b.n	8002e52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e36:	f7fe ffad 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8002e3a:	61f8      	str	r0, [r7, #28]
        break;
 8002e3c:	e009      	b.n	8002e52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e42:	61fb      	str	r3, [r7, #28]
        break;
 8002e44:	e005      	b.n	8002e52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80fb 	beq.w	8003050 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d305      	bcc.n	8002e76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d903      	bls.n	8002e7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e7c:	e0e8      	b.n	8003050 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2200      	movs	r2, #0
 8002e82:	461c      	mov	r4, r3
 8002e84:	4615      	mov	r5, r2
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	022b      	lsls	r3, r5, #8
 8002e90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e94:	0222      	lsls	r2, r4, #8
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	6849      	ldr	r1, [r1, #4]
 8002e9a:	0849      	lsrs	r1, r1, #1
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	4688      	mov	r8, r1
 8002ea0:	4681      	mov	r9, r0
 8002ea2:	eb12 0a08 	adds.w	sl, r2, r8
 8002ea6:	eb43 0b09 	adc.w	fp, r3, r9
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eb8:	4650      	mov	r0, sl
 8002eba:	4659      	mov	r1, fp
 8002ebc:	f7fd f9e0 	bl	8000280 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ece:	d308      	bcc.n	8002ee2 <UART_SetConfig+0x3de>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed6:	d204      	bcs.n	8002ee2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	60da      	str	r2, [r3, #12]
 8002ee0:	e0b6      	b.n	8003050 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ee8:	e0b2      	b.n	8003050 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef2:	d15e      	bne.n	8002fb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d828      	bhi.n	8002f4e <UART_SetConfig+0x44a>
 8002efc:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <UART_SetConfig+0x400>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f29 	.word	0x08002f29
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f4f 	.word	0x08002f4f
 8002f14:	08002f3f 	.word	0x08002f3f
 8002f18:	08002f4f 	.word	0x08002f4f
 8002f1c:	08002f4f 	.word	0x08002f4f
 8002f20:	08002f4f 	.word	0x08002f4f
 8002f24:	08002f47 	.word	0x08002f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f28:	f7fe ffcc 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	61f8      	str	r0, [r7, #28]
        break;
 8002f2e:	e014      	b.n	8002f5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f30:	f7fe ffde 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8002f34:	61f8      	str	r0, [r7, #28]
        break;
 8002f36:	e010      	b.n	8002f5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f38:	4b4d      	ldr	r3, [pc, #308]	@ (8003070 <UART_SetConfig+0x56c>)
 8002f3a:	61fb      	str	r3, [r7, #28]
        break;
 8002f3c:	e00d      	b.n	8002f5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3e:	f7fe ff29 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8002f42:	61f8      	str	r0, [r7, #28]
        break;
 8002f44:	e009      	b.n	8002f5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f4a:	61fb      	str	r3, [r7, #28]
        break;
 8002f4c:	e005      	b.n	8002f5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d077      	beq.n	8003050 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005a      	lsls	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	441a      	add	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d916      	bls.n	8002faa <UART_SetConfig+0x4a6>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f82:	d212      	bcs.n	8002faa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f023 030f 	bic.w	r3, r3, #15
 8002f8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	8afb      	ldrh	r3, [r7, #22]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	8afa      	ldrh	r2, [r7, #22]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	e052      	b.n	8003050 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fb0:	e04e      	b.n	8003050 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d827      	bhi.n	800300a <UART_SetConfig+0x506>
 8002fba:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <UART_SetConfig+0x4bc>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fe5 	.word	0x08002fe5
 8002fc4:	08002fed 	.word	0x08002fed
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	0800300b 	.word	0x0800300b
 8002fd0:	08002ffb 	.word	0x08002ffb
 8002fd4:	0800300b 	.word	0x0800300b
 8002fd8:	0800300b 	.word	0x0800300b
 8002fdc:	0800300b 	.word	0x0800300b
 8002fe0:	08003003 	.word	0x08003003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7fe ff6e 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8002fe8:	61f8      	str	r0, [r7, #28]
        break;
 8002fea:	e014      	b.n	8003016 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fec:	f7fe ff80 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8002ff0:	61f8      	str	r0, [r7, #28]
        break;
 8002ff2:	e010      	b.n	8003016 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <UART_SetConfig+0x56c>)
 8002ff6:	61fb      	str	r3, [r7, #28]
        break;
 8002ff8:	e00d      	b.n	8003016 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffa:	f7fe fecb 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8002ffe:	61f8      	str	r0, [r7, #28]
        break;
 8003000:	e009      	b.n	8003016 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003006:	61fb      	str	r3, [r7, #28]
        break;
 8003008:	e005      	b.n	8003016 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003014:	bf00      	nop
    }

    if (pclk != 0U)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d019      	beq.n	8003050 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	085a      	lsrs	r2, r3, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	441a      	add	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b0f      	cmp	r3, #15
 8003034:	d909      	bls.n	800304a <UART_SetConfig+0x546>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303c:	d205      	bcs.n	800304a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60da      	str	r2, [r3, #12]
 8003048:	e002      	b.n	8003050 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800305c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003060:	4618      	mov	r0, r3
 8003062:	3728      	adds	r7, #40	@ 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306a:	bf00      	nop
 800306c:	40008000 	.word	0x40008000
 8003070:	00f42400 	.word	0x00f42400

08003074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01a      	beq.n	800318a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003172:	d10a      	bne.n	800318a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b098      	sub	sp, #96	@ 0x60
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031c8:	f7fd fdf0 	bl	8000dac <HAL_GetTick>
 80031cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d12e      	bne.n	800323a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e4:	2200      	movs	r2, #0
 80031e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f88c 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d021      	beq.n	800323a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800320a:	653b      	str	r3, [r7, #80]	@ 0x50
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
 8003216:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800321a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e6      	bne.n	80031f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e062      	b.n	8003300 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d149      	bne.n	80032dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f856 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03c      	beq.n	80032dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	623b      	str	r3, [r7, #32]
   return(result);
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e6      	bne.n	8003262 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3308      	adds	r3, #8
 800329a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032b4:	61fa      	str	r2, [r7, #28]
 80032b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	69b9      	ldr	r1, [r7, #24]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	617b      	str	r3, [r7, #20]
   return(result);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e5      	bne.n	8003294 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e011      	b.n	8003300 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3758      	adds	r7, #88	@ 0x58
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003318:	e04f      	b.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d04b      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fd fd43 	bl	8000dac <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <UART_WaitOnFlagUntilTimeout+0x30>
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e04e      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d037      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b80      	cmp	r3, #128	@ 0x80
 800334e:	d034      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d031      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d110      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f838 	bl	80033e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2208      	movs	r2, #8
 8003376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e029      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003394:	d111      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800339e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f81e 	bl	80033e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4013      	ands	r3, r2
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d0a0      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b095      	sub	sp, #84	@ 0x54
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003408:	643b      	str	r3, [r7, #64]	@ 0x40
 800340a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800340e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e6      	bne.n	80033ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3308      	adds	r3, #8
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	61fb      	str	r3, [r7, #28]
   return(result);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3308      	adds	r3, #8
 800343a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800343c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003454:	2b01      	cmp	r3, #1
 8003456:	d118      	bne.n	800348a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	60bb      	str	r3, [r7, #8]
   return(result);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	647b      	str	r3, [r7, #68]	@ 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	613b      	str	r3, [r7, #16]
   return(result);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e6      	bne.n	8003458 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800349e:	bf00      	nop
 80034a0:	3754      	adds	r7, #84	@ 0x54
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034ae:	f000 ff65 	bl	800437c <vTaskStartScheduler>
  
  return osOK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f103 0208 	add.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 0208 	add.w	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0208 	add.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d103      	bne.n	800357a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e00c      	b.n	8003594 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3308      	adds	r3, #8
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e002      	b.n	8003588 <vListInsert+0x2e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	d2f6      	bcs.n	8003582 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6852      	ldr	r2, [r2, #4]
 80035ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d103      	bne.n	8003600 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800364c:	f001 fdf4 	bl	8005238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	441a      	add	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	22ff      	movs	r2, #255	@ 0xff
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	22ff      	movs	r2, #255	@ 0xff
 8003698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d114      	bne.n	80036cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01a      	beq.n	80036e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3310      	adds	r3, #16
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f8ae 	bl	8004810 <xTaskRemoveFromEventList>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <xQueueGenericReset+0xd0>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	e009      	b.n	80036e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3310      	adds	r3, #16
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fef1 	bl	80034b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3324      	adds	r3, #36	@ 0x24
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff feec 	bl	80034b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036e0:	f001 fddc 	bl	800529c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036e4:	2301      	movs	r3, #1
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	613b      	str	r3, [r7, #16]
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3348      	adds	r3, #72	@ 0x48
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fe62 	bl	80053f8 <pvPortMalloc>
 8003734:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3348      	adds	r3, #72	@ 0x48
 8003744:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800374e:	79fa      	ldrb	r2, [r7, #7]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f805 	bl	800376a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003760:	69bb      	ldr	r3, [r7, #24]
	}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e002      	b.n	800378c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003798:	2101      	movs	r1, #1
 800379a:	69b8      	ldr	r0, [r7, #24]
 800379c:	f7ff ff40 	bl	8003620 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	@ 0x38
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <xQueueGenericSend+0x34>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <xQueueGenericSend+0x42>
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <xQueueGenericSend+0x46>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <xQueueGenericSend+0x48>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <xQueueGenericSend+0x64>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d103      	bne.n	800381a <xQueueGenericSend+0x72>
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <xQueueGenericSend+0x76>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueGenericSend+0x78>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10b      	bne.n	800383c <xQueueGenericSend+0x94>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	623b      	str	r3, [r7, #32]
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800383c:	f001 f9a8 	bl	8004b90 <xTaskGetSchedulerState>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <xQueueGenericSend+0xa4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <xQueueGenericSend+0xa8>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <xQueueGenericSend+0xaa>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <xQueueGenericSend+0xc6>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	61fb      	str	r3, [r7, #28]
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	e7fd      	b.n	800386a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800386e:	f001 fce3 	bl	8005238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <xQueueGenericSend+0xdc>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d129      	bne.n	80038d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800388a:	f000 fa99 	bl	8003dc0 <prvCopyDataToQueue>
 800388e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	3324      	adds	r3, #36	@ 0x24
 800389c:	4618      	mov	r0, r3
 800389e:	f000 ffb7 	bl	8004810 <xTaskRemoveFromEventList>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038a8:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <xQueueGenericSend+0x200>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	e00a      	b.n	80038d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038c0:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <xQueueGenericSend+0x200>)
 80038c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038d0:	f001 fce4 	bl	800529c <vPortExitCritical>
				return pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e063      	b.n	80039a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038de:	f001 fcdd 	bl	800529c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e05c      	b.n	80039a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fff1 	bl	80048d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038fa:	f001 fccf 	bl	800529c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038fe:	f000 fd9f 	bl	8004440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003902:	f001 fc99 	bl	8005238 <vPortEnterCritical>
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800390c:	b25b      	sxtb	r3, r3
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d103      	bne.n	800391c <xQueueGenericSend+0x174>
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003922:	b25b      	sxtb	r3, r3
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d103      	bne.n	8003932 <xQueueGenericSend+0x18a>
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003932:	f001 fcb3 	bl	800529c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003936:	1d3a      	adds	r2, r7, #4
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 ffe0 	bl	8004904 <xTaskCheckForTimeOut>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d124      	bne.n	8003994 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800394a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800394c:	f000 fb30 	bl	8003fb0 <prvIsQueueFull>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d018      	beq.n	8003988 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	3310      	adds	r3, #16
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f000 ff30 	bl	80047c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003966:	f000 fabb 	bl	8003ee0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800396a:	f000 fd77 	bl	800445c <xTaskResumeAll>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f af7c 	bne.w	800386e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <xQueueGenericSend+0x200>)
 8003978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	e772      	b.n	800386e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800398a:	f000 faa9 	bl	8003ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800398e:	f000 fd65 	bl	800445c <xTaskResumeAll>
 8003992:	e76c      	b.n	800386e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003996:	f000 faa3 	bl	8003ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800399a:	f000 fd5f 	bl	800445c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800399e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3738      	adds	r7, #56	@ 0x38
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	@ 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <xQueueReceive+0x32>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	623b      	str	r3, [r7, #32]
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	e7fd      	b.n	80039da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <xQueueReceive+0x40>
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <xQueueReceive+0x44>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <xQueueReceive+0x46>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <xQueueReceive+0x62>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	61fb      	str	r3, [r7, #28]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a0e:	f001 f8bf 	bl	8004b90 <xTaskGetSchedulerState>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <xQueueReceive+0x72>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <xQueueReceive+0x76>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueReceive+0x78>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <xQueueReceive+0x94>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	61bb      	str	r3, [r7, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a40:	f001 fbfa 	bl	8005238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01f      	beq.n	8003a90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a54:	f000 fa1e 	bl	8003e94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00f      	beq.n	8003a88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fecf 	bl	8004810 <xTaskRemoveFromEventList>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a78:	4b3c      	ldr	r3, [pc, #240]	@ (8003b6c <xQueueReceive+0x1c0>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a88:	f001 fc08 	bl	800529c <vPortExitCritical>
				return pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e069      	b.n	8003b64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a96:	f001 fc01 	bl	800529c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e062      	b.n	8003b64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ff15 	bl	80048d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ab2:	f001 fbf3 	bl	800529c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab6:	f000 fcc3 	bl	8004440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aba:	f001 fbbd 	bl	8005238 <vPortEnterCritical>
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d103      	bne.n	8003ad4 <xQueueReceive+0x128>
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ada:	b25b      	sxtb	r3, r3
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d103      	bne.n	8003aea <xQueueReceive+0x13e>
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aea:	f001 fbd7 	bl	800529c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aee:	1d3a      	adds	r2, r7, #4
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ff04 	bl	8004904 <xTaskCheckForTimeOut>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d123      	bne.n	8003b4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b04:	f000 fa3e 	bl	8003f84 <prvIsQueueEmpty>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	3324      	adds	r3, #36	@ 0x24
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fe54 	bl	80047c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b1e:	f000 f9df 	bl	8003ee0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b22:	f000 fc9b 	bl	800445c <xTaskResumeAll>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d189      	bne.n	8003a40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b6c <xQueueReceive+0x1c0>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	e780      	b.n	8003a40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b40:	f000 f9ce 	bl	8003ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b44:	f000 fc8a 	bl	800445c <xTaskResumeAll>
 8003b48:	e77a      	b.n	8003a40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b4c:	f000 f9c8 	bl	8003ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b50:	f000 fc84 	bl	800445c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b56:	f000 fa15 	bl	8003f84 <prvIsQueueEmpty>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f43f af6f 	beq.w	8003a40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3730      	adds	r7, #48	@ 0x30
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08e      	sub	sp, #56	@ 0x38
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	623b      	str	r3, [r7, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	61fb      	str	r3, [r7, #28]
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc4:	f000 ffe4 	bl	8004b90 <xTaskGetSchedulerState>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xQueueSemaphoreTake+0x64>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueSemaphoreTake+0x68>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueSemaphoreTake+0x6a>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61bb      	str	r3, [r7, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf6:	f001 fb1f 	bl	8005238 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d024      	beq.n	8003c50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	1e5a      	subs	r2, r3, #1
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c16:	f001 f967 	bl	8004ee8 <pvTaskIncrementMutexHeldCount>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00f      	beq.n	8003c48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2a:	3310      	adds	r3, #16
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fdef 	bl	8004810 <xTaskRemoveFromEventList>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c38:	4b54      	ldr	r3, [pc, #336]	@ (8003d8c <xQueueSemaphoreTake+0x21c>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c48:	f001 fb28 	bl	800529c <vPortExitCritical>
				return pdPASS;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e098      	b.n	8003d82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d112      	bne.n	8003c7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	617b      	str	r3, [r7, #20]
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c74:	f001 fb12 	bl	800529c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e082      	b.n	8003d82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fe26 	bl	80048d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c90:	f001 fb04 	bl	800529c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c94:	f000 fbd4 	bl	8004440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c98:	f001 face 	bl	8005238 <vPortEnterCritical>
 8003c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d103      	bne.n	8003cb2 <xQueueSemaphoreTake+0x142>
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cb8:	b25b      	sxtb	r3, r3
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d103      	bne.n	8003cc8 <xQueueSemaphoreTake+0x158>
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cc8:	f001 fae8 	bl	800529c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ccc:	463a      	mov	r2, r7
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fe15 	bl	8004904 <xTaskCheckForTimeOut>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d132      	bne.n	8003d46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ce0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ce2:	f000 f94f 	bl	8003f84 <prvIsQueueEmpty>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d026      	beq.n	8003d3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003cf4:	f001 faa0 	bl	8005238 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ff65 	bl	8004bcc <xTaskPriorityInherit>
 8003d02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003d04:	f001 faca 	bl	800529c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	3324      	adds	r3, #36	@ 0x24
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fd57 	bl	80047c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d18:	f000 f8e2 	bl	8003ee0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d1c:	f000 fb9e 	bl	800445c <xTaskResumeAll>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f47f af67 	bne.w	8003bf6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003d28:	4b18      	ldr	r3, [pc, #96]	@ (8003d8c <xQueueSemaphoreTake+0x21c>)
 8003d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	e75d      	b.n	8003bf6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d3c:	f000 f8d0 	bl	8003ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d40:	f000 fb8c 	bl	800445c <xTaskResumeAll>
 8003d44:	e757      	b.n	8003bf6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d48:	f000 f8ca 	bl	8003ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4c:	f000 fb86 	bl	800445c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d52:	f000 f917 	bl	8003f84 <prvIsQueueEmpty>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f43f af4c 	beq.w	8003bf6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003d64:	f001 fa68 	bl	8005238 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d6a:	f000 f811 	bl	8003d90 <prvGetDisinheritPriorityAfterTimeout>
 8003d6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 f826 	bl	8004dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d7c:	f001 fa8e 	bl	800529c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3738      	adds	r7, #56	@ 0x38
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d006      	beq.n	8003dae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1c3 0307 	rsb	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e001      	b.n	8003db2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003db2:	68fb      	ldr	r3, [r7, #12]
	}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d14d      	bne.n	8003e82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 ff64 	bl	8004cb8 <xTaskPriorityDisinherit>
 8003df0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	e043      	b.n	8003e82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d119      	bne.n	8003e34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6858      	ldr	r0, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	f001 fec3 	bl	8005b96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d32b      	bcc.n	8003e82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e026      	b.n	8003e82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68d8      	ldr	r0, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	f001 fea9 	bl	8005b96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	441a      	add	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d207      	bcs.n	8003e70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	425b      	negs	r3, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d105      	bne.n	8003e82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e8a:	697b      	ldr	r3, [r7, #20]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d303      	bcc.n	8003ec8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68d9      	ldr	r1, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6838      	ldr	r0, [r7, #0]
 8003ed4:	f001 fe5f 	bl	8005b96 <memcpy>
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ee8:	f001 f9a6 	bl	8005238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ef2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ef4:	e011      	b.n	8003f1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d012      	beq.n	8003f24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3324      	adds	r3, #36	@ 0x24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fc84 	bl	8004810 <xTaskRemoveFromEventList>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f0e:	f000 fd5d 	bl	80049cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	dce9      	bgt.n	8003ef6 <prvUnlockQueue+0x16>
 8003f22:	e000      	b.n	8003f26 <prvUnlockQueue+0x46>
					break;
 8003f24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	22ff      	movs	r2, #255	@ 0xff
 8003f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f2e:	f001 f9b5 	bl	800529c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f32:	f001 f981 	bl	8005238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f3e:	e011      	b.n	8003f64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3310      	adds	r3, #16
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fc5f 	bl	8004810 <xTaskRemoveFromEventList>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f58:	f000 fd38 	bl	80049cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f5c:	7bbb      	ldrb	r3, [r7, #14]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	dce9      	bgt.n	8003f40 <prvUnlockQueue+0x60>
 8003f6c:	e000      	b.n	8003f70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	22ff      	movs	r2, #255	@ 0xff
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f78:	f001 f990 	bl	800529c <vPortExitCritical>
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f8c:	f001 f954 	bl	8005238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e001      	b.n	8003fa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fa2:	f001 f97b 	bl	800529c <vPortExitCritical>

	return xReturn;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fb8:	f001 f93e 	bl	8005238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d102      	bne.n	8003fce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e001      	b.n	8003fd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fd2:	f001 f963 	bl	800529c <vPortExitCritical>

	return xReturn;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08e      	sub	sp, #56	@ 0x38
 8003fe4:	af04      	add	r7, sp, #16
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	623b      	str	r3, [r7, #32]
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	61fb      	str	r3, [r7, #28]
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800402a:	2354      	movs	r3, #84	@ 0x54
 800402c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b54      	cmp	r3, #84	@ 0x54
 8004032:	d00b      	beq.n	800404c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	61bb      	str	r3, [r7, #24]
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800404c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01e      	beq.n	8004092 <xTaskCreateStatic+0xb2>
 8004054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01b      	beq.n	8004092 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800406c:	2300      	movs	r3, #0
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	9302      	str	r3, [sp, #8]
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f850 	bl	800412a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800408a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800408c:	f000 f8d6 	bl	800423c <prvAddNewTaskToReadyList>
 8004090:	e001      	b.n	8004096 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004096:	697b      	ldr	r3, [r7, #20]
	}
 8004098:	4618      	mov	r0, r3
 800409a:	3728      	adds	r7, #40	@ 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08c      	sub	sp, #48	@ 0x30
 80040a4:	af04      	add	r7, sp, #16
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 f99f 	bl	80053f8 <pvPortMalloc>
 80040ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00e      	beq.n	80040e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040c2:	2054      	movs	r0, #84	@ 0x54
 80040c4:	f001 f998 	bl	80053f8 <pvPortMalloc>
 80040c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80040d6:	e005      	b.n	80040e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f001 fa5b 	bl	8005594 <vPortFree>
 80040de:	e001      	b.n	80040e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d017      	beq.n	800411a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	9302      	str	r3, [sp, #8]
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f80e 	bl	800412a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800410e:	69f8      	ldr	r0, [r7, #28]
 8004110:	f000 f894 	bl	800423c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004114:	2301      	movs	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e002      	b.n	8004120 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004120:	69bb      	ldr	r3, [r7, #24]
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004142:	3b01      	subs	r3, #1
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f023 0307 	bic.w	r3, r3, #7
 8004150:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	617b      	str	r3, [r7, #20]
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01f      	beq.n	80041ba <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e012      	b.n	80041a6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	7819      	ldrb	r1, [r3, #0]
 8004188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	3334      	adds	r3, #52	@ 0x34
 8004190:	460a      	mov	r2, r1
 8004192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3301      	adds	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	d9e9      	bls.n	8004180 <prvInitialiseNewTask+0x56>
 80041ac:	e000      	b.n	80041b0 <prvInitialiseNewTask+0x86>
			{
				break;
 80041ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	e003      	b.n	80041c2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d901      	bls.n	80041cc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041c8:	2306      	movs	r3, #6
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	2200      	movs	r2, #0
 80041dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	3304      	adds	r3, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f988 	bl	80034f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	3318      	adds	r3, #24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff f983 	bl	80034f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	f1c3 0207 	rsb	r2, r3, #7
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	2200      	movs	r2, #0
 800420c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68f9      	ldr	r1, [r7, #12]
 800421a:	69b8      	ldr	r0, [r7, #24]
 800421c:	f000 fede 	bl	8004fdc <pxPortInitialiseStack>
 8004220:	4602      	mov	r2, r0
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004232:	bf00      	nop
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004244:	f000 fff8 	bl	8005238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004248:	4b2a      	ldr	r3, [pc, #168]	@ (80042f4 <prvAddNewTaskToReadyList+0xb8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <prvAddNewTaskToReadyList+0xb8>)
 8004250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800425a:	4a27      	ldr	r2, [pc, #156]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004260:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <prvAddNewTaskToReadyList+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d110      	bne.n	800428a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004268:	f000 fbd4 	bl	8004a14 <prvInitialiseTaskLists>
 800426c:	e00d      	b.n	800428a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800426e:	4b23      	ldr	r3, [pc, #140]	@ (80042fc <prvAddNewTaskToReadyList+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004276:	4b20      	ldr	r3, [pc, #128]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d802      	bhi.n	800428a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004284:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <prvAddNewTaskToReadyList+0xc4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <prvAddNewTaskToReadyList+0xc4>)
 8004292:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	4b19      	ldr	r3, [pc, #100]	@ (8004304 <prvAddNewTaskToReadyList+0xc8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <prvAddNewTaskToReadyList+0xc8>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4a15      	ldr	r2, [pc, #84]	@ (8004308 <prvAddNewTaskToReadyList+0xcc>)
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7ff f928 	bl	8003512 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042c2:	f000 ffeb 	bl	800529c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <prvAddNewTaskToReadyList+0xc0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042ce:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvAddNewTaskToReadyList+0xbc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d207      	bcs.n	80042ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <prvAddNewTaskToReadyList+0xd0>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000474 	.word	0x20000474
 80042f8:	20000374 	.word	0x20000374
 80042fc:	20000480 	.word	0x20000480
 8004300:	20000490 	.word	0x20000490
 8004304:	2000047c 	.word	0x2000047c
 8004308:	20000378 	.word	0x20000378
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004322:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <vTaskDelay+0x64>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <vTaskDelay+0x32>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004342:	f000 f87d 	bl	8004440 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004346:	2100      	movs	r1, #0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fde1 	bl	8004f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800434e:	f000 f885 	bl	800445c <xTaskResumeAll>
 8004352:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d107      	bne.n	800436a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <vTaskDelay+0x68>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000049c 	.word	0x2000049c
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	@ 0x28
 8004380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800438a:	463a      	mov	r2, r7
 800438c:	1d39      	adds	r1, r7, #4
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc f90a 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	9202      	str	r2, [sp, #8]
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	460a      	mov	r2, r1
 80043aa:	491f      	ldr	r1, [pc, #124]	@ (8004428 <vTaskStartScheduler+0xac>)
 80043ac:	481f      	ldr	r0, [pc, #124]	@ (800442c <vTaskStartScheduler+0xb0>)
 80043ae:	f7ff fe17 	bl	8003fe0 <xTaskCreateStatic>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <vTaskStartScheduler+0xb4>)
 80043b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <vTaskStartScheduler+0xb4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e001      	b.n	80043ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d116      	bne.n	80043fe <vTaskStartScheduler+0x82>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	613b      	str	r3, [r7, #16]
}
 80043e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043e4:	4b13      	ldr	r3, [pc, #76]	@ (8004434 <vTaskStartScheduler+0xb8>)
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <vTaskStartScheduler+0xbc>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <vTaskStartScheduler+0xc0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043f8:	f000 fe7a 	bl	80050f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043fc:	e00f      	b.n	800441e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d10b      	bne.n	800441e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60fb      	str	r3, [r7, #12]
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	e7fd      	b.n	800441a <vTaskStartScheduler+0x9e>
}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	08006be0 	.word	0x08006be0
 800442c:	080049e5 	.word	0x080049e5
 8004430:	20000498 	.word	0x20000498
 8004434:	20000494 	.word	0x20000494
 8004438:	20000480 	.word	0x20000480
 800443c:	20000478 	.word	0x20000478

08004440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004444:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <vTaskSuspendAll+0x18>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4a03      	ldr	r2, [pc, #12]	@ (8004458 <vTaskSuspendAll+0x18>)
 800444c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	2000049c 	.word	0x2000049c

0800445c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800446a:	4b42      	ldr	r3, [pc, #264]	@ (8004574 <xTaskResumeAll+0x118>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <xTaskResumeAll+0x2e>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	603b      	str	r3, [r7, #0]
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	e7fd      	b.n	8004486 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800448a:	f000 fed5 	bl	8005238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800448e:	4b39      	ldr	r3, [pc, #228]	@ (8004574 <xTaskResumeAll+0x118>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a37      	ldr	r2, [pc, #220]	@ (8004574 <xTaskResumeAll+0x118>)
 8004496:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004498:	4b36      	ldr	r3, [pc, #216]	@ (8004574 <xTaskResumeAll+0x118>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d161      	bne.n	8004564 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044a0:	4b35      	ldr	r3, [pc, #212]	@ (8004578 <xTaskResumeAll+0x11c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d05d      	beq.n	8004564 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044a8:	e02e      	b.n	8004508 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b34      	ldr	r3, [pc, #208]	@ (800457c <xTaskResumeAll+0x120>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3318      	adds	r3, #24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f888 	bl	80035cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff f883 	bl	80035cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004580 <xTaskResumeAll+0x124>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004580 <xTaskResumeAll+0x124>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a27      	ldr	r2, [pc, #156]	@ (8004584 <xTaskResumeAll+0x128>)
 80044e6:	441a      	add	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7ff f80f 	bl	8003512 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f8:	4b23      	ldr	r3, [pc, #140]	@ (8004588 <xTaskResumeAll+0x12c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004502:	4b22      	ldr	r3, [pc, #136]	@ (800458c <xTaskResumeAll+0x130>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004508:	4b1c      	ldr	r3, [pc, #112]	@ (800457c <xTaskResumeAll+0x120>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1cc      	bne.n	80044aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004516:	f000 fb1b 	bl	8004b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800451a:	4b1d      	ldr	r3, [pc, #116]	@ (8004590 <xTaskResumeAll+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d010      	beq.n	8004548 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004526:	f000 f837 	bl	8004598 <xTaskIncrementTick>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004530:	4b16      	ldr	r3, [pc, #88]	@ (800458c <xTaskResumeAll+0x130>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3b01      	subs	r3, #1
 800453a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f1      	bne.n	8004526 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004542:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <xTaskResumeAll+0x134>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004548:	4b10      	ldr	r3, [pc, #64]	@ (800458c <xTaskResumeAll+0x130>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <xTaskResumeAll+0x138>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004564:	f000 fe9a 	bl	800529c <vPortExitCritical>

	return xAlreadyYielded;
 8004568:	68bb      	ldr	r3, [r7, #8]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000049c 	.word	0x2000049c
 8004578:	20000474 	.word	0x20000474
 800457c:	20000434 	.word	0x20000434
 8004580:	2000047c 	.word	0x2000047c
 8004584:	20000378 	.word	0x20000378
 8004588:	20000374 	.word	0x20000374
 800458c:	20000488 	.word	0x20000488
 8004590:	20000484 	.word	0x20000484
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a2:	4b4f      	ldr	r3, [pc, #316]	@ (80046e0 <xTaskIncrementTick+0x148>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 808f 	bne.w	80046ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045ac:	4b4d      	ldr	r3, [pc, #308]	@ (80046e4 <xTaskIncrementTick+0x14c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045b4:	4a4b      	ldr	r2, [pc, #300]	@ (80046e4 <xTaskIncrementTick+0x14c>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d121      	bne.n	8004604 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80045c0:	4b49      	ldr	r3, [pc, #292]	@ (80046e8 <xTaskIncrementTick+0x150>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	603b      	str	r3, [r7, #0]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <xTaskIncrementTick+0x46>
 80045e2:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <xTaskIncrementTick+0x150>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	4b40      	ldr	r3, [pc, #256]	@ (80046ec <xTaskIncrementTick+0x154>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3e      	ldr	r2, [pc, #248]	@ (80046e8 <xTaskIncrementTick+0x150>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4a3e      	ldr	r2, [pc, #248]	@ (80046ec <xTaskIncrementTick+0x154>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4b3e      	ldr	r3, [pc, #248]	@ (80046f0 <xTaskIncrementTick+0x158>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a3c      	ldr	r2, [pc, #240]	@ (80046f0 <xTaskIncrementTick+0x158>)
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	f000 faa6 	bl	8004b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004604:	4b3b      	ldr	r3, [pc, #236]	@ (80046f4 <xTaskIncrementTick+0x15c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d348      	bcc.n	80046a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <xTaskIncrementTick+0x150>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004618:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <xTaskIncrementTick+0x15c>)
 800461a:	f04f 32ff 	mov.w	r2, #4294967295
 800461e:	601a      	str	r2, [r3, #0]
					break;
 8004620:	e03e      	b.n	80046a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004622:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <xTaskIncrementTick+0x150>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d203      	bcs.n	8004642 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800463a:	4a2e      	ldr	r2, [pc, #184]	@ (80046f4 <xTaskIncrementTick+0x15c>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004640:	e02e      	b.n	80046a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3304      	adds	r3, #4
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe ffc0 	bl	80035cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3318      	adds	r3, #24
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe ffb7 	bl	80035cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <xTaskIncrementTick+0x160>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	4a22      	ldr	r2, [pc, #136]	@ (80046f8 <xTaskIncrementTick+0x160>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <xTaskIncrementTick+0x164>)
 800467e:	441a      	add	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe ff43 	bl	8003512 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <xTaskIncrementTick+0x168>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	429a      	cmp	r2, r3
 8004698:	d3b9      	bcc.n	800460e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800469a:	2301      	movs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800469e:	e7b6      	b.n	800460e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046a0:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <xTaskIncrementTick+0x168>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a6:	4915      	ldr	r1, [pc, #84]	@ (80046fc <xTaskIncrementTick+0x164>)
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d901      	bls.n	80046bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046bc:	4b11      	ldr	r3, [pc, #68]	@ (8004704 <xTaskIncrementTick+0x16c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e004      	b.n	80046d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004708 <xTaskIncrementTick+0x170>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <xTaskIncrementTick+0x170>)
 80046d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046d4:	697b      	ldr	r3, [r7, #20]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000049c 	.word	0x2000049c
 80046e4:	20000478 	.word	0x20000478
 80046e8:	2000042c 	.word	0x2000042c
 80046ec:	20000430 	.word	0x20000430
 80046f0:	2000048c 	.word	0x2000048c
 80046f4:	20000494 	.word	0x20000494
 80046f8:	2000047c 	.word	0x2000047c
 80046fc:	20000378 	.word	0x20000378
 8004700:	20000374 	.word	0x20000374
 8004704:	20000488 	.word	0x20000488
 8004708:	20000484 	.word	0x20000484

0800470c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004712:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <vTaskSwitchContext+0xa4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800471a:	4b26      	ldr	r3, [pc, #152]	@ (80047b4 <vTaskSwitchContext+0xa8>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004720:	e040      	b.n	80047a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <vTaskSwitchContext+0xa8>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <vTaskSwitchContext+0xac>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	f1c3 031f 	rsb	r3, r3, #31
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	491f      	ldr	r1, [pc, #124]	@ (80047bc <vTaskSwitchContext+0xb0>)
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10b      	bne.n	800476a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	e7fd      	b.n	8004766 <vTaskSwitchContext+0x5a>
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <vTaskSwitchContext+0xb0>)
 8004776:	4413      	add	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	3308      	adds	r3, #8
 800478c:	429a      	cmp	r2, r3
 800478e:	d104      	bne.n	800479a <vTaskSwitchContext+0x8e>
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a07      	ldr	r2, [pc, #28]	@ (80047c0 <vTaskSwitchContext+0xb4>)
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	2000049c 	.word	0x2000049c
 80047b4:	20000488 	.word	0x20000488
 80047b8:	2000047c 	.word	0x2000047c
 80047bc:	20000378 	.word	0x20000378
 80047c0:	20000374 	.word	0x20000374

080047c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <vTaskPlaceOnEventList+0x48>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3318      	adds	r3, #24
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fe feb0 	bl	800355a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047fa:	2101      	movs	r1, #1
 80047fc:	6838      	ldr	r0, [r7, #0]
 80047fe:	f000 fb87 	bl	8004f10 <prvAddCurrentTaskToDelayedList>
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000374 	.word	0x20000374

08004810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	3318      	adds	r3, #24
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fec2 	bl	80035cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004848:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <xTaskRemoveFromEventList+0xb0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11c      	bne.n	800488a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe feb9 	bl	80035cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	2201      	movs	r2, #1
 8004860:	409a      	lsls	r2, r3
 8004862:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <xTaskRemoveFromEventList+0xb4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	4a16      	ldr	r2, [pc, #88]	@ (80048c4 <xTaskRemoveFromEventList+0xb4>)
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <xTaskRemoveFromEventList+0xb8>)
 800487a:	441a      	add	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7fe fe45 	bl	8003512 <vListInsertEnd>
 8004888:	e005      	b.n	8004896 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3318      	adds	r3, #24
 800488e:	4619      	mov	r1, r3
 8004890:	480e      	ldr	r0, [pc, #56]	@ (80048cc <xTaskRemoveFromEventList+0xbc>)
 8004892:	f7fe fe3e 	bl	8003512 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489a:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <xTaskRemoveFromEventList+0xc0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d905      	bls.n	80048b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048a8:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <xTaskRemoveFromEventList+0xc4>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e001      	b.n	80048b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048b4:	697b      	ldr	r3, [r7, #20]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	2000049c 	.word	0x2000049c
 80048c4:	2000047c 	.word	0x2000047c
 80048c8:	20000378 	.word	0x20000378
 80048cc:	20000434 	.word	0x20000434
 80048d0:	20000374 	.word	0x20000374
 80048d4:	20000488 	.word	0x20000488

080048d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <vTaskInternalSetTimeOutState+0x24>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <vTaskInternalSetTimeOutState+0x28>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	2000048c 	.word	0x2000048c
 8004900:	20000478 	.word	0x20000478

08004904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	613b      	str	r3, [r7, #16]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60fb      	str	r3, [r7, #12]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800494a:	f000 fc75 	bl	8005238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800494e:	4b1d      	ldr	r3, [pc, #116]	@ (80049c4 <xTaskCheckForTimeOut+0xc0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d102      	bne.n	800496e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e023      	b.n	80049b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b15      	ldr	r3, [pc, #84]	@ (80049c8 <xTaskCheckForTimeOut+0xc4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d007      	beq.n	800498a <xTaskCheckForTimeOut+0x86>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e015      	b.n	80049b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	d20b      	bcs.n	80049ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff99 	bl	80048d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e004      	b.n	80049b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049b6:	f000 fc71 	bl	800529c <vPortExitCritical>

	return xReturn;
 80049ba:	69fb      	ldr	r3, [r7, #28]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000478 	.word	0x20000478
 80049c8:	2000048c 	.word	0x2000048c

080049cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <vTaskMissedYield+0x14>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000488 	.word	0x20000488

080049e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049ec:	f000 f852 	bl	8004a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <prvIdleTask+0x28>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d9f9      	bls.n	80049ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <prvIdleTask+0x2c>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a08:	e7f0      	b.n	80049ec <prvIdleTask+0x8>
 8004a0a:	bf00      	nop
 8004a0c:	20000378 	.word	0x20000378
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	e00c      	b.n	8004a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4a12      	ldr	r2, [pc, #72]	@ (8004a74 <prvInitialiseTaskLists+0x60>)
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fd42 	bl	80034b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3301      	adds	r3, #1
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d9ef      	bls.n	8004a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a40:	480d      	ldr	r0, [pc, #52]	@ (8004a78 <prvInitialiseTaskLists+0x64>)
 8004a42:	f7fe fd39 	bl	80034b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a46:	480d      	ldr	r0, [pc, #52]	@ (8004a7c <prvInitialiseTaskLists+0x68>)
 8004a48:	f7fe fd36 	bl	80034b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a4c:	480c      	ldr	r0, [pc, #48]	@ (8004a80 <prvInitialiseTaskLists+0x6c>)
 8004a4e:	f7fe fd33 	bl	80034b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a52:	480c      	ldr	r0, [pc, #48]	@ (8004a84 <prvInitialiseTaskLists+0x70>)
 8004a54:	f7fe fd30 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a58:	480b      	ldr	r0, [pc, #44]	@ (8004a88 <prvInitialiseTaskLists+0x74>)
 8004a5a:	f7fe fd2d 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <prvInitialiseTaskLists+0x78>)
 8004a60:	4a05      	ldr	r2, [pc, #20]	@ (8004a78 <prvInitialiseTaskLists+0x64>)
 8004a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a64:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <prvInitialiseTaskLists+0x7c>)
 8004a66:	4a05      	ldr	r2, [pc, #20]	@ (8004a7c <prvInitialiseTaskLists+0x68>)
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000378 	.word	0x20000378
 8004a78:	20000404 	.word	0x20000404
 8004a7c:	20000418 	.word	0x20000418
 8004a80:	20000434 	.word	0x20000434
 8004a84:	20000448 	.word	0x20000448
 8004a88:	20000460 	.word	0x20000460
 8004a8c:	2000042c 	.word	0x2000042c
 8004a90:	20000430 	.word	0x20000430

08004a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a9a:	e019      	b.n	8004ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a9c:	f000 fbcc 	bl	8005238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa0:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <prvCheckTasksWaitingTermination+0x50>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fd8d 	bl	80035cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <prvCheckTasksWaitingTermination+0x54>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae8 <prvCheckTasksWaitingTermination+0x54>)
 8004aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004abc:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <prvCheckTasksWaitingTermination+0x58>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8004aec <prvCheckTasksWaitingTermination+0x58>)
 8004ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ac6:	f000 fbe9 	bl	800529c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f810 	bl	8004af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad0:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <prvCheckTasksWaitingTermination+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e1      	bne.n	8004a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000448 	.word	0x20000448
 8004ae8:	20000474 	.word	0x20000474
 8004aec:	2000045c 	.word	0x2000045c

08004af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d108      	bne.n	8004b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd44 	bl	8005594 <vPortFree>
				vPortFree( pxTCB );
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fd41 	bl	8005594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b12:	e019      	b.n	8004b48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d103      	bne.n	8004b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fd38 	bl	8005594 <vPortFree>
	}
 8004b24:	e010      	b.n	8004b48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d00b      	beq.n	8004b48 <prvDeleteTCB+0x58>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <prvDeleteTCB+0x54>
	}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <prvResetNextTaskUnblockTime+0x38>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <prvResetNextTaskUnblockTime+0x3c>)
 8004b62:	f04f 32ff 	mov.w	r2, #4294967295
 8004b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b68:	e008      	b.n	8004b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6a:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <prvResetNextTaskUnblockTime+0x38>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a04      	ldr	r2, [pc, #16]	@ (8004b8c <prvResetNextTaskUnblockTime+0x3c>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	2000042c 	.word	0x2000042c
 8004b8c:	20000494 	.word	0x20000494

08004b90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <xTaskGetSchedulerState+0x34>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	e008      	b.n	8004bb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba4:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <xTaskGetSchedulerState+0x38>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bac:	2302      	movs	r3, #2
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	e001      	b.n	8004bb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bb6:	687b      	ldr	r3, [r7, #4]
	}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	20000480 	.word	0x20000480
 8004bc8:	2000049c 	.word	0x2000049c

08004bcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d05e      	beq.n	8004ca0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be6:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <xTaskPriorityInherit+0xe0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d24e      	bcs.n	8004c8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	db06      	blt.n	8004c06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8004cac <xTaskPriorityInherit+0xe0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	f1c3 0207 	rsb	r2, r3, #7
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6959      	ldr	r1, [r3, #20]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4a26      	ldr	r2, [pc, #152]	@ (8004cb0 <xTaskPriorityInherit+0xe4>)
 8004c18:	4413      	add	r3, r2
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	d12f      	bne.n	8004c7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fcd2 	bl	80035cc <uxListRemove>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	2201      	movs	r2, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb4 <xTaskPriorityInherit+0xe8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <xTaskPriorityInherit+0xe8>)
 8004c42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <xTaskPriorityInherit+0xe0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	2201      	movs	r2, #1
 8004c54:	409a      	lsls	r2, r3
 8004c56:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <xTaskPriorityInherit+0xe8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	4a15      	ldr	r2, [pc, #84]	@ (8004cb4 <xTaskPriorityInherit+0xe8>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4a10      	ldr	r2, [pc, #64]	@ (8004cb0 <xTaskPriorityInherit+0xe4>)
 8004c6e:	441a      	add	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fe fc4b 	bl	8003512 <vListInsertEnd>
 8004c7c:	e004      	b.n	8004c88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <xTaskPriorityInherit+0xe0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e008      	b.n	8004ca0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <xTaskPriorityInherit+0xe0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d201      	bcs.n	8004ca0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
	}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000374 	.word	0x20000374
 8004cb0:	20000378 	.word	0x20000378
 8004cb4:	2000047c 	.word	0x2000047c

08004cb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d070      	beq.n	8004db0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cce:	4b3b      	ldr	r3, [pc, #236]	@ (8004dbc <xTaskPriorityDisinherit+0x104>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d00b      	beq.n	8004cf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60fb      	str	r3, [r7, #12]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60bb      	str	r3, [r7, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d044      	beq.n	8004db0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d140      	bne.n	8004db0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fc4a 	bl	80035cc <uxListRemove>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d115      	bne.n	8004d6a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d42:	491f      	ldr	r1, [pc, #124]	@ (8004dc0 <xTaskPriorityDisinherit+0x108>)
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xTaskPriorityDisinherit+0xb2>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	2201      	movs	r2, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	4b18      	ldr	r3, [pc, #96]	@ (8004dc4 <xTaskPriorityDisinherit+0x10c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4013      	ands	r3, r2
 8004d66:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <xTaskPriorityDisinherit+0x10c>)
 8004d68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	f1c3 0207 	rsb	r2, r3, #7
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	409a      	lsls	r2, r3
 8004d86:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <xTaskPriorityDisinherit+0x10c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <xTaskPriorityDisinherit+0x10c>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a08      	ldr	r2, [pc, #32]	@ (8004dc0 <xTaskPriorityDisinherit+0x108>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe fbb3 	bl	8003512 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
	}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000374 	.word	0x20000374
 8004dc0:	20000378 	.word	0x20000378
 8004dc4:	2000047c 	.word	0x2000047c

08004dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d079      	beq.n	8004ed4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d902      	bls.n	8004e10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e002      	b.n	8004e16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d059      	beq.n	8004ed4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d154      	bne.n	8004ed4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10b      	bne.n	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60bb      	str	r3, [r7, #8]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db04      	blt.n	8004e6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f1c3 0207 	rsb	r2, r3, #7
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	6959      	ldr	r1, [r3, #20]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e7a:	4413      	add	r3, r2
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	d129      	bne.n	8004ed4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fba1 	bl	80035cc <uxListRemove>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	2201      	movs	r2, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	4a10      	ldr	r2, [pc, #64]	@ (8004ee4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004ea4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	2201      	movs	r2, #1
 8004eac:	409a      	lsls	r2, r3
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a06      	ldr	r2, [pc, #24]	@ (8004ee0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ec6:	441a      	add	r2, r3
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fe fb1f 	bl	8003512 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ed4:	bf00      	nop
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000374 	.word	0x20000374
 8004ee0:	20000378 	.word	0x20000378
 8004ee4:	2000047c 	.word	0x2000047c

08004ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004efa:	3201      	adds	r2, #1
 8004efc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004efe:	4b03      	ldr	r3, [pc, #12]	@ (8004f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f00:	681b      	ldr	r3, [r3, #0]
	}
 8004f02:	4618      	mov	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000374 	.word	0x20000374

08004f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f1a:	4b29      	ldr	r3, [pc, #164]	@ (8004fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f20:	4b28      	ldr	r3, [pc, #160]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fb50 	bl	80035cc <uxListRemove>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f32:	4b24      	ldr	r3, [pc, #144]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	2201      	movs	r2, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	4b21      	ldr	r3, [pc, #132]	@ (8004fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4013      	ands	r3, r2
 8004f46:	4a20      	ldr	r2, [pc, #128]	@ (8004fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d10a      	bne.n	8004f68 <prvAddCurrentTaskToDelayedList+0x58>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f58:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	481a      	ldr	r0, [pc, #104]	@ (8004fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f62:	f7fe fad6 	bl	8003512 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f66:	e026      	b.n	8004fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f70:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d209      	bcs.n	8004f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f80:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7fe fae4 	bl	800355a <vListInsert>
}
 8004f92:	e010      	b.n	8004fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f94:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f7fe fada 	bl	800355a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d202      	bcs.n	8004fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fb0:	4a09      	ldr	r2, [pc, #36]	@ (8004fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6013      	str	r3, [r2, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000478 	.word	0x20000478
 8004fc4:	20000374 	.word	0x20000374
 8004fc8:	2000047c 	.word	0x2000047c
 8004fcc:	20000460 	.word	0x20000460
 8004fd0:	20000430 	.word	0x20000430
 8004fd4:	2000042c 	.word	0x2000042c
 8004fd8:	20000494 	.word	0x20000494

08004fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3b04      	subs	r3, #4
 8004fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3b04      	subs	r3, #4
 8004ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b04      	subs	r3, #4
 800500a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800500c:	4a0c      	ldr	r2, [pc, #48]	@ (8005040 <pxPortInitialiseStack+0x64>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b14      	subs	r3, #20
 8005016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3b04      	subs	r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f06f 0202 	mvn.w	r2, #2
 800502a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3b20      	subs	r3, #32
 8005030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	08005045 	.word	0x08005045

08005044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800504e:	4b13      	ldr	r3, [pc, #76]	@ (800509c <prvTaskExitError+0x58>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d00b      	beq.n	8005070 <prvTaskExitError+0x2c>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60fb      	str	r3, [r7, #12]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <prvTaskExitError+0x28>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60bb      	str	r3, [r7, #8]
}
 8005082:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005084:	bf00      	nop
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0fc      	beq.n	8005086 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	2000000c 	.word	0x2000000c

080050a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050a0:	4b07      	ldr	r3, [pc, #28]	@ (80050c0 <pxCurrentTCBConst2>)
 80050a2:	6819      	ldr	r1, [r3, #0]
 80050a4:	6808      	ldr	r0, [r1, #0]
 80050a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	f380 8809 	msr	PSP, r0
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8811 	msr	BASEPRI, r0
 80050ba:	4770      	bx	lr
 80050bc:	f3af 8000 	nop.w

080050c0 <pxCurrentTCBConst2>:
 80050c0:	20000374 	.word	0x20000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop

080050c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050c8:	4808      	ldr	r0, [pc, #32]	@ (80050ec <prvPortStartFirstTask+0x24>)
 80050ca:	6800      	ldr	r0, [r0, #0]
 80050cc:	6800      	ldr	r0, [r0, #0]
 80050ce:	f380 8808 	msr	MSP, r0
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8814 	msr	CONTROL, r0
 80050da:	b662      	cpsie	i
 80050dc:	b661      	cpsie	f
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	df00      	svc	0
 80050e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ea:	bf00      	nop
 80050ec:	e000ed08 	.word	0xe000ed08

080050f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050f6:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <xPortStartScheduler+0x124>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a47      	ldr	r2, [pc, #284]	@ (8005218 <xPortStartScheduler+0x128>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10b      	bne.n	8005118 <xPortStartScheduler+0x28>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60fb      	str	r3, [r7, #12]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005118:	4b3e      	ldr	r3, [pc, #248]	@ (8005214 <xPortStartScheduler+0x124>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a3f      	ldr	r2, [pc, #252]	@ (800521c <xPortStartScheduler+0x12c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10b      	bne.n	800513a <xPortStartScheduler+0x4a>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	613b      	str	r3, [r7, #16]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800513a:	4b39      	ldr	r3, [pc, #228]	@ (8005220 <xPortStartScheduler+0x130>)
 800513c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	22ff      	movs	r2, #255	@ 0xff
 800514a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <xPortStartScheduler+0x134>)
 8005160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005162:	4b31      	ldr	r3, [pc, #196]	@ (8005228 <xPortStartScheduler+0x138>)
 8005164:	2207      	movs	r2, #7
 8005166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005168:	e009      	b.n	800517e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800516a:	4b2f      	ldr	r3, [pc, #188]	@ (8005228 <xPortStartScheduler+0x138>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3b01      	subs	r3, #1
 8005170:	4a2d      	ldr	r2, [pc, #180]	@ (8005228 <xPortStartScheduler+0x138>)
 8005172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005186:	2b80      	cmp	r3, #128	@ 0x80
 8005188:	d0ef      	beq.n	800516a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800518a:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <xPortStartScheduler+0x138>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1c3 0307 	rsb	r3, r3, #7
 8005192:	2b04      	cmp	r3, #4
 8005194:	d00b      	beq.n	80051ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60bb      	str	r3, [r7, #8]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005228 <xPortStartScheduler+0x138>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005228 <xPortStartScheduler+0x138>)
 80051b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <xPortStartScheduler+0x138>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051c0:	4a19      	ldr	r2, [pc, #100]	@ (8005228 <xPortStartScheduler+0x138>)
 80051c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051cc:	4b17      	ldr	r3, [pc, #92]	@ (800522c <xPortStartScheduler+0x13c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a16      	ldr	r2, [pc, #88]	@ (800522c <xPortStartScheduler+0x13c>)
 80051d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051d8:	4b14      	ldr	r3, [pc, #80]	@ (800522c <xPortStartScheduler+0x13c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a13      	ldr	r2, [pc, #76]	@ (800522c <xPortStartScheduler+0x13c>)
 80051de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051e4:	f000 f8da 	bl	800539c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051e8:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <xPortStartScheduler+0x140>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051ee:	f000 f8f9 	bl	80053e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051f2:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <xPortStartScheduler+0x144>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005234 <xPortStartScheduler+0x144>)
 80051f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051fe:	f7ff ff63 	bl	80050c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005202:	f7ff fa83 	bl	800470c <vTaskSwitchContext>
	prvTaskExitError();
 8005206:	f7ff ff1d 	bl	8005044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	e000ed00 	.word	0xe000ed00
 8005218:	410fc271 	.word	0x410fc271
 800521c:	410fc270 	.word	0x410fc270
 8005220:	e000e400 	.word	0xe000e400
 8005224:	200004a0 	.word	0x200004a0
 8005228:	200004a4 	.word	0x200004a4
 800522c:	e000ed20 	.word	0xe000ed20
 8005230:	2000000c 	.word	0x2000000c
 8005234:	e000ef34 	.word	0xe000ef34

08005238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
}
 8005250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005252:	4b10      	ldr	r3, [pc, #64]	@ (8005294 <vPortEnterCritical+0x5c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	4a0e      	ldr	r2, [pc, #56]	@ (8005294 <vPortEnterCritical+0x5c>)
 800525a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800525c:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <vPortEnterCritical+0x5c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d110      	bne.n	8005286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <vPortEnterCritical+0x60>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <vPortEnterCritical+0x4e>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	603b      	str	r3, [r7, #0]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <vPortEnterCritical+0x4a>
	}
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	2000000c 	.word	0x2000000c
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052a2:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <vPortExitCritical+0x50>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <vPortExitCritical+0x26>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	607b      	str	r3, [r7, #4]
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052c2:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <vPortExitCritical+0x50>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <vPortExitCritical+0x50>)
 80052ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052cc:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <vPortExitCritical+0x50>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <vPortExitCritical+0x44>
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	2000000c 	.word	0x2000000c

080052f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052f0:	f3ef 8009 	mrs	r0, PSP
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	4b15      	ldr	r3, [pc, #84]	@ (8005350 <pxCurrentTCBConst>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	f01e 0f10 	tst.w	lr, #16
 8005300:	bf08      	it	eq
 8005302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005314:	f380 8811 	msr	BASEPRI, r0
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f7ff f9f4 	bl	800470c <vTaskSwitchContext>
 8005324:	f04f 0000 	mov.w	r0, #0
 8005328:	f380 8811 	msr	BASEPRI, r0
 800532c:	bc09      	pop	{r0, r3}
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	6808      	ldr	r0, [r1, #0]
 8005332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005336:	f01e 0f10 	tst.w	lr, #16
 800533a:	bf08      	it	eq
 800533c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005340:	f380 8809 	msr	PSP, r0
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	f3af 8000 	nop.w

08005350 <pxCurrentTCBConst>:
 8005350:	20000374 	.word	0x20000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop

08005358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	607b      	str	r3, [r7, #4]
}
 8005370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005372:	f7ff f911 	bl	8004598 <xTaskIncrementTick>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800537c:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <xPortSysTickHandler+0x40>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f383 8811 	msr	BASEPRI, r3
}
 800538e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053a0:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <vPortSetupTimerInterrupt+0x34>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053a6:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <vPortSetupTimerInterrupt+0x38>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <vPortSetupTimerInterrupt+0x3c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <vPortSetupTimerInterrupt+0x40>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	4a09      	ldr	r2, [pc, #36]	@ (80053e0 <vPortSetupTimerInterrupt+0x44>)
 80053ba:	3b01      	subs	r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053be:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <vPortSetupTimerInterrupt+0x34>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000e010 	.word	0xe000e010
 80053d4:	e000e018 	.word	0xe000e018
 80053d8:	20000000 	.word	0x20000000
 80053dc:	10624dd3 	.word	0x10624dd3
 80053e0:	e000e014 	.word	0xe000e014

080053e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053f4 <vPortEnableVFP+0x10>
 80053e8:	6801      	ldr	r1, [r0, #0]
 80053ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ee:	6001      	str	r1, [r0, #0]
 80053f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053f2:	bf00      	nop
 80053f4:	e000ed88 	.word	0xe000ed88

080053f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	@ 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005404:	f7ff f81c 	bl	8004440 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005408:	4b5c      	ldr	r3, [pc, #368]	@ (800557c <pvPortMalloc+0x184>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005410:	f000 f924 	bl	800565c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005414:	4b5a      	ldr	r3, [pc, #360]	@ (8005580 <pvPortMalloc+0x188>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8095 	bne.w	800554c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01e      	beq.n	8005466 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005428:	2208      	movs	r2, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b00      	cmp	r3, #0
 8005438:	d015      	beq.n	8005466 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <pvPortMalloc+0x6e>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d06f      	beq.n	800554c <pvPortMalloc+0x154>
 800546c:	4b45      	ldr	r3, [pc, #276]	@ (8005584 <pvPortMalloc+0x18c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d86a      	bhi.n	800554c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005476:	4b44      	ldr	r3, [pc, #272]	@ (8005588 <pvPortMalloc+0x190>)
 8005478:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800547a:	4b43      	ldr	r3, [pc, #268]	@ (8005588 <pvPortMalloc+0x190>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005480:	e004      	b.n	800548c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d903      	bls.n	800549e <pvPortMalloc+0xa6>
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f1      	bne.n	8005482 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800549e:	4b37      	ldr	r3, [pc, #220]	@ (800557c <pvPortMalloc+0x184>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d051      	beq.n	800554c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2208      	movs	r2, #8
 80054ae:	4413      	add	r3, r2
 80054b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad2      	subs	r2, r2, r3
 80054c2:	2308      	movs	r3, #8
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d920      	bls.n	800550c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <pvPortMalloc+0xfc>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	613b      	str	r3, [r7, #16]
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005506:	69b8      	ldr	r0, [r7, #24]
 8005508:	f000 f90a 	bl	8005720 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800550c:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <pvPortMalloc+0x18c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <pvPortMalloc+0x18c>)
 8005518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800551a:	4b1a      	ldr	r3, [pc, #104]	@ (8005584 <pvPortMalloc+0x18c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b1b      	ldr	r3, [pc, #108]	@ (800558c <pvPortMalloc+0x194>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d203      	bcs.n	800552e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005526:	4b17      	ldr	r3, [pc, #92]	@ (8005584 <pvPortMalloc+0x18c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a18      	ldr	r2, [pc, #96]	@ (800558c <pvPortMalloc+0x194>)
 800552c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4b13      	ldr	r3, [pc, #76]	@ (8005580 <pvPortMalloc+0x188>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	431a      	orrs	r2, r3
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <pvPortMalloc+0x198>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <pvPortMalloc+0x198>)
 800554a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800554c:	f7fe ff86 	bl	800445c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <pvPortMalloc+0x17a>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	60fb      	str	r3, [r7, #12]
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	e7fd      	b.n	800556e <pvPortMalloc+0x176>
	return pvReturn;
 8005572:	69fb      	ldr	r3, [r7, #28]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	@ 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20001068 	.word	0x20001068
 8005580:	2000107c 	.word	0x2000107c
 8005584:	2000106c 	.word	0x2000106c
 8005588:	20001060 	.word	0x20001060
 800558c:	20001070 	.word	0x20001070
 8005590:	20001074 	.word	0x20001074

08005594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d04f      	beq.n	8005646 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055a6:	2308      	movs	r3, #8
 80055a8:	425b      	negs	r3, r3
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <vPortFree+0xbc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <vPortFree+0x46>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <vPortFree+0x66>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60bb      	str	r3, [r7, #8]
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <vPortFree+0xbc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01e      	beq.n	8005646 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11a      	bne.n	8005646 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	4b0e      	ldr	r3, [pc, #56]	@ (8005650 <vPortFree+0xbc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	43db      	mvns	r3, r3
 800561a:	401a      	ands	r2, r3
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005620:	f7fe ff0e 	bl	8004440 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <vPortFree+0xc0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4413      	add	r3, r2
 800562e:	4a09      	ldr	r2, [pc, #36]	@ (8005654 <vPortFree+0xc0>)
 8005630:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005632:	6938      	ldr	r0, [r7, #16]
 8005634:	f000 f874 	bl	8005720 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005638:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <vPortFree+0xc4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	4a06      	ldr	r2, [pc, #24]	@ (8005658 <vPortFree+0xc4>)
 8005640:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005642:	f7fe ff0b 	bl	800445c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005646:	bf00      	nop
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	2000107c 	.word	0x2000107c
 8005654:	2000106c 	.word	0x2000106c
 8005658:	20001078 	.word	0x20001078

0800565c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005662:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005666:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005668:	4b27      	ldr	r3, [pc, #156]	@ (8005708 <prvHeapInit+0xac>)
 800566a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3307      	adds	r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0307 	bic.w	r3, r3, #7
 8005682:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	4a1f      	ldr	r2, [pc, #124]	@ (8005708 <prvHeapInit+0xac>)
 800568c:	4413      	add	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005694:	4a1d      	ldr	r2, [pc, #116]	@ (800570c <prvHeapInit+0xb0>)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800569a:	4b1c      	ldr	r3, [pc, #112]	@ (800570c <prvHeapInit+0xb0>)
 800569c:	2200      	movs	r2, #0
 800569e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4413      	add	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056a8:	2208      	movs	r2, #8
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <prvHeapInit+0xb4>)
 80056bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056be:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <prvHeapInit+0xb4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056c6:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <prvHeapInit+0xb4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <prvHeapInit+0xb4>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <prvHeapInit+0xb8>)
 80056ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a09      	ldr	r2, [pc, #36]	@ (8005718 <prvHeapInit+0xbc>)
 80056f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056f4:	4b09      	ldr	r3, [pc, #36]	@ (800571c <prvHeapInit+0xc0>)
 80056f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056fa:	601a      	str	r2, [r3, #0]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	200004a8 	.word	0x200004a8
 800570c:	20001060 	.word	0x20001060
 8005710:	20001068 	.word	0x20001068
 8005714:	20001070 	.word	0x20001070
 8005718:	2000106c 	.word	0x2000106c
 800571c:	2000107c 	.word	0x2000107c

08005720 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005728:	4b28      	ldr	r3, [pc, #160]	@ (80057cc <prvInsertBlockIntoFreeList+0xac>)
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e002      	b.n	8005734 <prvInsertBlockIntoFreeList+0x14>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d8f7      	bhi.n	800572e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	4413      	add	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d108      	bne.n	8005762 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	441a      	add	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	441a      	add	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d118      	bne.n	80057a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b15      	ldr	r3, [pc, #84]	@ (80057d0 <prvInsertBlockIntoFreeList+0xb0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d00d      	beq.n	800579e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	441a      	add	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e008      	b.n	80057b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800579e:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <prvInsertBlockIntoFreeList+0xb0>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e003      	b.n	80057b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d002      	beq.n	80057be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	20001060 	.word	0x20001060
 80057d0:	20001068 	.word	0x20001068

080057d4 <rand>:
 80057d4:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <rand+0x5c>)
 80057d6:	b510      	push	{r4, lr}
 80057d8:	681c      	ldr	r4, [r3, #0]
 80057da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80057dc:	b9b3      	cbnz	r3, 800580c <rand+0x38>
 80057de:	2018      	movs	r0, #24
 80057e0:	f000 fa50 	bl	8005c84 <malloc>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80057e8:	b920      	cbnz	r0, 80057f4 <rand+0x20>
 80057ea:	4b12      	ldr	r3, [pc, #72]	@ (8005834 <rand+0x60>)
 80057ec:	4812      	ldr	r0, [pc, #72]	@ (8005838 <rand+0x64>)
 80057ee:	2152      	movs	r1, #82	@ 0x52
 80057f0:	f000 f9e0 	bl	8005bb4 <__assert_func>
 80057f4:	4911      	ldr	r1, [pc, #68]	@ (800583c <rand+0x68>)
 80057f6:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <rand+0x6c>)
 80057f8:	e9c0 1300 	strd	r1, r3, [r0]
 80057fc:	4b11      	ldr	r3, [pc, #68]	@ (8005844 <rand+0x70>)
 80057fe:	6083      	str	r3, [r0, #8]
 8005800:	230b      	movs	r3, #11
 8005802:	8183      	strh	r3, [r0, #12]
 8005804:	2100      	movs	r1, #0
 8005806:	2001      	movs	r0, #1
 8005808:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800580c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800580e:	480e      	ldr	r0, [pc, #56]	@ (8005848 <rand+0x74>)
 8005810:	690b      	ldr	r3, [r1, #16]
 8005812:	694c      	ldr	r4, [r1, #20]
 8005814:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <rand+0x78>)
 8005816:	4358      	muls	r0, r3
 8005818:	fb02 0004 	mla	r0, r2, r4, r0
 800581c:	fba3 3202 	umull	r3, r2, r3, r2
 8005820:	3301      	adds	r3, #1
 8005822:	eb40 0002 	adc.w	r0, r0, r2
 8005826:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800582a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800582e:	bd10      	pop	{r4, pc}
 8005830:	2000001c 	.word	0x2000001c
 8005834:	08006c30 	.word	0x08006c30
 8005838:	08006c47 	.word	0x08006c47
 800583c:	abcd330e 	.word	0xabcd330e
 8005840:	e66d1234 	.word	0xe66d1234
 8005844:	0005deec 	.word	0x0005deec
 8005848:	5851f42d 	.word	0x5851f42d
 800584c:	4c957f2d 	.word	0x4c957f2d

08005850 <std>:
 8005850:	2300      	movs	r3, #0
 8005852:	b510      	push	{r4, lr}
 8005854:	4604      	mov	r4, r0
 8005856:	e9c0 3300 	strd	r3, r3, [r0]
 800585a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800585e:	6083      	str	r3, [r0, #8]
 8005860:	8181      	strh	r1, [r0, #12]
 8005862:	6643      	str	r3, [r0, #100]	@ 0x64
 8005864:	81c2      	strh	r2, [r0, #14]
 8005866:	6183      	str	r3, [r0, #24]
 8005868:	4619      	mov	r1, r3
 800586a:	2208      	movs	r2, #8
 800586c:	305c      	adds	r0, #92	@ 0x5c
 800586e:	f000 f916 	bl	8005a9e <memset>
 8005872:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <std+0x58>)
 8005874:	6263      	str	r3, [r4, #36]	@ 0x24
 8005876:	4b0d      	ldr	r3, [pc, #52]	@ (80058ac <std+0x5c>)
 8005878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <std+0x60>)
 800587c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800587e:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <std+0x64>)
 8005880:	6323      	str	r3, [r4, #48]	@ 0x30
 8005882:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <std+0x68>)
 8005884:	6224      	str	r4, [r4, #32]
 8005886:	429c      	cmp	r4, r3
 8005888:	d006      	beq.n	8005898 <std+0x48>
 800588a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800588e:	4294      	cmp	r4, r2
 8005890:	d002      	beq.n	8005898 <std+0x48>
 8005892:	33d0      	adds	r3, #208	@ 0xd0
 8005894:	429c      	cmp	r4, r3
 8005896:	d105      	bne.n	80058a4 <std+0x54>
 8005898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a0:	f000 b976 	b.w	8005b90 <__retarget_lock_init_recursive>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	bf00      	nop
 80058a8:	08005a19 	.word	0x08005a19
 80058ac:	08005a3b 	.word	0x08005a3b
 80058b0:	08005a73 	.word	0x08005a73
 80058b4:	08005a97 	.word	0x08005a97
 80058b8:	20001080 	.word	0x20001080

080058bc <stdio_exit_handler>:
 80058bc:	4a02      	ldr	r2, [pc, #8]	@ (80058c8 <stdio_exit_handler+0xc>)
 80058be:	4903      	ldr	r1, [pc, #12]	@ (80058cc <stdio_exit_handler+0x10>)
 80058c0:	4803      	ldr	r0, [pc, #12]	@ (80058d0 <stdio_exit_handler+0x14>)
 80058c2:	f000 b869 	b.w	8005998 <_fwalk_sglue>
 80058c6:	bf00      	nop
 80058c8:	20000010 	.word	0x20000010
 80058cc:	080064c1 	.word	0x080064c1
 80058d0:	20000020 	.word	0x20000020

080058d4 <cleanup_stdio>:
 80058d4:	6841      	ldr	r1, [r0, #4]
 80058d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <cleanup_stdio+0x34>)
 80058d8:	4299      	cmp	r1, r3
 80058da:	b510      	push	{r4, lr}
 80058dc:	4604      	mov	r4, r0
 80058de:	d001      	beq.n	80058e4 <cleanup_stdio+0x10>
 80058e0:	f000 fdee 	bl	80064c0 <_fflush_r>
 80058e4:	68a1      	ldr	r1, [r4, #8]
 80058e6:	4b09      	ldr	r3, [pc, #36]	@ (800590c <cleanup_stdio+0x38>)
 80058e8:	4299      	cmp	r1, r3
 80058ea:	d002      	beq.n	80058f2 <cleanup_stdio+0x1e>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fde7 	bl	80064c0 <_fflush_r>
 80058f2:	68e1      	ldr	r1, [r4, #12]
 80058f4:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <cleanup_stdio+0x3c>)
 80058f6:	4299      	cmp	r1, r3
 80058f8:	d004      	beq.n	8005904 <cleanup_stdio+0x30>
 80058fa:	4620      	mov	r0, r4
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f000 bdde 	b.w	80064c0 <_fflush_r>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	20001080 	.word	0x20001080
 800590c:	200010e8 	.word	0x200010e8
 8005910:	20001150 	.word	0x20001150

08005914 <global_stdio_init.part.0>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <global_stdio_init.part.0+0x30>)
 8005918:	4c0b      	ldr	r4, [pc, #44]	@ (8005948 <global_stdio_init.part.0+0x34>)
 800591a:	4a0c      	ldr	r2, [pc, #48]	@ (800594c <global_stdio_init.part.0+0x38>)
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	4620      	mov	r0, r4
 8005920:	2200      	movs	r2, #0
 8005922:	2104      	movs	r1, #4
 8005924:	f7ff ff94 	bl	8005850 <std>
 8005928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800592c:	2201      	movs	r2, #1
 800592e:	2109      	movs	r1, #9
 8005930:	f7ff ff8e 	bl	8005850 <std>
 8005934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005938:	2202      	movs	r2, #2
 800593a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593e:	2112      	movs	r1, #18
 8005940:	f7ff bf86 	b.w	8005850 <std>
 8005944:	200011b8 	.word	0x200011b8
 8005948:	20001080 	.word	0x20001080
 800594c:	080058bd 	.word	0x080058bd

08005950 <__sfp_lock_acquire>:
 8005950:	4801      	ldr	r0, [pc, #4]	@ (8005958 <__sfp_lock_acquire+0x8>)
 8005952:	f000 b91e 	b.w	8005b92 <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	200011c1 	.word	0x200011c1

0800595c <__sfp_lock_release>:
 800595c:	4801      	ldr	r0, [pc, #4]	@ (8005964 <__sfp_lock_release+0x8>)
 800595e:	f000 b919 	b.w	8005b94 <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	200011c1 	.word	0x200011c1

08005968 <__sinit>:
 8005968:	b510      	push	{r4, lr}
 800596a:	4604      	mov	r4, r0
 800596c:	f7ff fff0 	bl	8005950 <__sfp_lock_acquire>
 8005970:	6a23      	ldr	r3, [r4, #32]
 8005972:	b11b      	cbz	r3, 800597c <__sinit+0x14>
 8005974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005978:	f7ff bff0 	b.w	800595c <__sfp_lock_release>
 800597c:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <__sinit+0x28>)
 800597e:	6223      	str	r3, [r4, #32]
 8005980:	4b04      	ldr	r3, [pc, #16]	@ (8005994 <__sinit+0x2c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f5      	bne.n	8005974 <__sinit+0xc>
 8005988:	f7ff ffc4 	bl	8005914 <global_stdio_init.part.0>
 800598c:	e7f2      	b.n	8005974 <__sinit+0xc>
 800598e:	bf00      	nop
 8005990:	080058d5 	.word	0x080058d5
 8005994:	200011b8 	.word	0x200011b8

08005998 <_fwalk_sglue>:
 8005998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800599c:	4607      	mov	r7, r0
 800599e:	4688      	mov	r8, r1
 80059a0:	4614      	mov	r4, r2
 80059a2:	2600      	movs	r6, #0
 80059a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059a8:	f1b9 0901 	subs.w	r9, r9, #1
 80059ac:	d505      	bpl.n	80059ba <_fwalk_sglue+0x22>
 80059ae:	6824      	ldr	r4, [r4, #0]
 80059b0:	2c00      	cmp	r4, #0
 80059b2:	d1f7      	bne.n	80059a4 <_fwalk_sglue+0xc>
 80059b4:	4630      	mov	r0, r6
 80059b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d907      	bls.n	80059d0 <_fwalk_sglue+0x38>
 80059c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059c4:	3301      	adds	r3, #1
 80059c6:	d003      	beq.n	80059d0 <_fwalk_sglue+0x38>
 80059c8:	4629      	mov	r1, r5
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c0      	blx	r8
 80059ce:	4306      	orrs	r6, r0
 80059d0:	3568      	adds	r5, #104	@ 0x68
 80059d2:	e7e9      	b.n	80059a8 <_fwalk_sglue+0x10>

080059d4 <siprintf>:
 80059d4:	b40e      	push	{r1, r2, r3}
 80059d6:	b510      	push	{r4, lr}
 80059d8:	b09d      	sub	sp, #116	@ 0x74
 80059da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059dc:	9002      	str	r0, [sp, #8]
 80059de:	9006      	str	r0, [sp, #24]
 80059e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059e4:	480a      	ldr	r0, [pc, #40]	@ (8005a10 <siprintf+0x3c>)
 80059e6:	9107      	str	r1, [sp, #28]
 80059e8:	9104      	str	r1, [sp, #16]
 80059ea:	490a      	ldr	r1, [pc, #40]	@ (8005a14 <siprintf+0x40>)
 80059ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f0:	9105      	str	r1, [sp, #20]
 80059f2:	2400      	movs	r4, #0
 80059f4:	a902      	add	r1, sp, #8
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80059fc:	f000 fa54 	bl	8005ea8 <_svfiprintf_r>
 8005a00:	9b02      	ldr	r3, [sp, #8]
 8005a02:	701c      	strb	r4, [r3, #0]
 8005a04:	b01d      	add	sp, #116	@ 0x74
 8005a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a0a:	b003      	add	sp, #12
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	2000001c 	.word	0x2000001c
 8005a14:	ffff0208 	.word	0xffff0208

08005a18 <__sread>:
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a20:	f000 f868 	bl	8005af4 <_read_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	bfab      	itete	ge
 8005a28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a2c:	181b      	addge	r3, r3, r0
 8005a2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a32:	bfac      	ite	ge
 8005a34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a36:	81a3      	strhlt	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__swrite>:
 8005a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3e:	461f      	mov	r7, r3
 8005a40:	898b      	ldrh	r3, [r1, #12]
 8005a42:	05db      	lsls	r3, r3, #23
 8005a44:	4605      	mov	r5, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4616      	mov	r6, r2
 8005a4a:	d505      	bpl.n	8005a58 <__swrite+0x1e>
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	2302      	movs	r3, #2
 8005a52:	2200      	movs	r2, #0
 8005a54:	f000 f83c 	bl	8005ad0 <_lseek_r>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	4628      	mov	r0, r5
 8005a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	f000 b853 	b.w	8005b18 <_write_r>

08005a72 <__sseek>:
 8005a72:	b510      	push	{r4, lr}
 8005a74:	460c      	mov	r4, r1
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 f829 	bl	8005ad0 <_lseek_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	bf15      	itete	ne
 8005a84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a8e:	81a3      	strheq	r3, [r4, #12]
 8005a90:	bf18      	it	ne
 8005a92:	81a3      	strhne	r3, [r4, #12]
 8005a94:	bd10      	pop	{r4, pc}

08005a96 <__sclose>:
 8005a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9a:	f000 b809 	b.w	8005ab0 <_close_r>

08005a9e <memset>:
 8005a9e:	4402      	add	r2, r0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d100      	bne.n	8005aa8 <memset+0xa>
 8005aa6:	4770      	bx	lr
 8005aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8005aac:	e7f9      	b.n	8005aa2 <memset+0x4>
	...

08005ab0 <_close_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d06      	ldr	r5, [pc, #24]	@ (8005acc <_close_r+0x1c>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb f860 	bl	8000b80 <_close>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_close_r+0x1a>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_close_r+0x1a>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	200011bc 	.word	0x200011bc

08005ad0 <_lseek_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d07      	ldr	r5, [pc, #28]	@ (8005af0 <_lseek_r+0x20>)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	4611      	mov	r1, r2
 8005ada:	2200      	movs	r2, #0
 8005adc:	602a      	str	r2, [r5, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f7fb f875 	bl	8000bce <_lseek>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_lseek_r+0x1e>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_lseek_r+0x1e>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	200011bc 	.word	0x200011bc

08005af4 <_read_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4d07      	ldr	r5, [pc, #28]	@ (8005b14 <_read_r+0x20>)
 8005af8:	4604      	mov	r4, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	602a      	str	r2, [r5, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f7fb f803 	bl	8000b0e <_read>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_read_r+0x1e>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_read_r+0x1e>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	200011bc 	.word	0x200011bc

08005b18 <_write_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d07      	ldr	r5, [pc, #28]	@ (8005b38 <_write_r+0x20>)
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4608      	mov	r0, r1
 8005b20:	4611      	mov	r1, r2
 8005b22:	2200      	movs	r2, #0
 8005b24:	602a      	str	r2, [r5, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f7fb f80e 	bl	8000b48 <_write>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_write_r+0x1e>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_write_r+0x1e>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	200011bc 	.word	0x200011bc

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	@ (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	2000001c 	.word	0x2000001c

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	@ (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 ffee 	bl	8006b3c <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08006d18 	.word	0x08006d18
 8005b84:	08006d18 	.word	0x08006d18
 8005b88:	08006d18 	.word	0x08006d18
 8005b8c:	08006d1c 	.word	0x08006d1c

08005b90 <__retarget_lock_init_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_acquire_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <__retarget_lock_release_recursive>:
 8005b94:	4770      	bx	lr

08005b96 <memcpy>:
 8005b96:	440a      	add	r2, r1
 8005b98:	4291      	cmp	r1, r2
 8005b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b9e:	d100      	bne.n	8005ba2 <memcpy+0xc>
 8005ba0:	4770      	bx	lr
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bac:	4291      	cmp	r1, r2
 8005bae:	d1f9      	bne.n	8005ba4 <memcpy+0xe>
 8005bb0:	bd10      	pop	{r4, pc}
	...

08005bb4 <__assert_func>:
 8005bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bb6:	4614      	mov	r4, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4b09      	ldr	r3, [pc, #36]	@ (8005be0 <__assert_func+0x2c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	68d8      	ldr	r0, [r3, #12]
 8005bc2:	b14c      	cbz	r4, 8005bd8 <__assert_func+0x24>
 8005bc4:	4b07      	ldr	r3, [pc, #28]	@ (8005be4 <__assert_func+0x30>)
 8005bc6:	9100      	str	r1, [sp, #0]
 8005bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bcc:	4906      	ldr	r1, [pc, #24]	@ (8005be8 <__assert_func+0x34>)
 8005bce:	462b      	mov	r3, r5
 8005bd0:	f000 fc9e 	bl	8006510 <fiprintf>
 8005bd4:	f000 fcd8 	bl	8006588 <abort>
 8005bd8:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <__assert_func+0x38>)
 8005bda:	461c      	mov	r4, r3
 8005bdc:	e7f3      	b.n	8005bc6 <__assert_func+0x12>
 8005bde:	bf00      	nop
 8005be0:	2000001c 	.word	0x2000001c
 8005be4:	08006c9f 	.word	0x08006c9f
 8005be8:	08006cac 	.word	0x08006cac
 8005bec:	08006cda 	.word	0x08006cda

08005bf0 <_free_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d041      	beq.n	8005c7c <_free_r+0x8c>
 8005bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfc:	1f0c      	subs	r4, r1, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfb8      	it	lt
 8005c02:	18e4      	addlt	r4, r4, r3
 8005c04:	f000 f8e8 	bl	8005dd8 <__malloc_lock>
 8005c08:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <_free_r+0x90>)
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	b933      	cbnz	r3, 8005c1c <_free_r+0x2c>
 8005c0e:	6063      	str	r3, [r4, #4]
 8005c10:	6014      	str	r4, [r2, #0]
 8005c12:	4628      	mov	r0, r5
 8005c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c18:	f000 b8e4 	b.w	8005de4 <__malloc_unlock>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d908      	bls.n	8005c32 <_free_r+0x42>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428b      	cmp	r3, r1
 8005c26:	bf01      	itttt	eq
 8005c28:	6819      	ldreq	r1, [r3, #0]
 8005c2a:	685b      	ldreq	r3, [r3, #4]
 8005c2c:	1809      	addeq	r1, r1, r0
 8005c2e:	6021      	streq	r1, [r4, #0]
 8005c30:	e7ed      	b.n	8005c0e <_free_r+0x1e>
 8005c32:	461a      	mov	r2, r3
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b10b      	cbz	r3, 8005c3c <_free_r+0x4c>
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	d9fa      	bls.n	8005c32 <_free_r+0x42>
 8005c3c:	6811      	ldr	r1, [r2, #0]
 8005c3e:	1850      	adds	r0, r2, r1
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d10b      	bne.n	8005c5c <_free_r+0x6c>
 8005c44:	6820      	ldr	r0, [r4, #0]
 8005c46:	4401      	add	r1, r0
 8005c48:	1850      	adds	r0, r2, r1
 8005c4a:	4283      	cmp	r3, r0
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	d1e0      	bne.n	8005c12 <_free_r+0x22>
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	6053      	str	r3, [r2, #4]
 8005c56:	4408      	add	r0, r1
 8005c58:	6010      	str	r0, [r2, #0]
 8005c5a:	e7da      	b.n	8005c12 <_free_r+0x22>
 8005c5c:	d902      	bls.n	8005c64 <_free_r+0x74>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	e7d6      	b.n	8005c12 <_free_r+0x22>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	1821      	adds	r1, r4, r0
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf04      	itt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	6063      	str	r3, [r4, #4]
 8005c72:	bf04      	itt	eq
 8005c74:	1809      	addeq	r1, r1, r0
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	6054      	str	r4, [r2, #4]
 8005c7a:	e7ca      	b.n	8005c12 <_free_r+0x22>
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
 8005c7e:	bf00      	nop
 8005c80:	200011c8 	.word	0x200011c8

08005c84 <malloc>:
 8005c84:	4b02      	ldr	r3, [pc, #8]	@ (8005c90 <malloc+0xc>)
 8005c86:	4601      	mov	r1, r0
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f000 b825 	b.w	8005cd8 <_malloc_r>
 8005c8e:	bf00      	nop
 8005c90:	2000001c 	.word	0x2000001c

08005c94 <sbrk_aligned>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4e0f      	ldr	r6, [pc, #60]	@ (8005cd4 <sbrk_aligned+0x40>)
 8005c98:	460c      	mov	r4, r1
 8005c9a:	6831      	ldr	r1, [r6, #0]
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	b911      	cbnz	r1, 8005ca6 <sbrk_aligned+0x12>
 8005ca0:	f000 fc62 	bl	8006568 <_sbrk_r>
 8005ca4:	6030      	str	r0, [r6, #0]
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 fc5d 	bl	8006568 <_sbrk_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d103      	bne.n	8005cba <sbrk_aligned+0x26>
 8005cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	bd70      	pop	{r4, r5, r6, pc}
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d0f8      	beq.n	8005cb6 <sbrk_aligned+0x22>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fc4e 	bl	8006568 <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d1f2      	bne.n	8005cb6 <sbrk_aligned+0x22>
 8005cd0:	e7ef      	b.n	8005cb2 <sbrk_aligned+0x1e>
 8005cd2:	bf00      	nop
 8005cd4:	200011c4 	.word	0x200011c4

08005cd8 <_malloc_r>:
 8005cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	1ccd      	adds	r5, r1, #3
 8005cde:	f025 0503 	bic.w	r5, r5, #3
 8005ce2:	3508      	adds	r5, #8
 8005ce4:	2d0c      	cmp	r5, #12
 8005ce6:	bf38      	it	cc
 8005ce8:	250c      	movcc	r5, #12
 8005cea:	2d00      	cmp	r5, #0
 8005cec:	4606      	mov	r6, r0
 8005cee:	db01      	blt.n	8005cf4 <_malloc_r+0x1c>
 8005cf0:	42a9      	cmp	r1, r5
 8005cf2:	d904      	bls.n	8005cfe <_malloc_r+0x26>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dd4 <_malloc_r+0xfc>
 8005d02:	f000 f869 	bl	8005dd8 <__malloc_lock>
 8005d06:	f8d8 3000 	ldr.w	r3, [r8]
 8005d0a:	461c      	mov	r4, r3
 8005d0c:	bb44      	cbnz	r4, 8005d60 <_malloc_r+0x88>
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4630      	mov	r0, r6
 8005d12:	f7ff ffbf 	bl	8005c94 <sbrk_aligned>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	4604      	mov	r4, r0
 8005d1a:	d158      	bne.n	8005dce <_malloc_r+0xf6>
 8005d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8005d20:	4627      	mov	r7, r4
 8005d22:	2f00      	cmp	r7, #0
 8005d24:	d143      	bne.n	8005dae <_malloc_r+0xd6>
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	d04b      	beq.n	8005dc2 <_malloc_r+0xea>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	4630      	mov	r0, r6
 8005d30:	eb04 0903 	add.w	r9, r4, r3
 8005d34:	f000 fc18 	bl	8006568 <_sbrk_r>
 8005d38:	4581      	cmp	r9, r0
 8005d3a:	d142      	bne.n	8005dc2 <_malloc_r+0xea>
 8005d3c:	6821      	ldr	r1, [r4, #0]
 8005d3e:	1a6d      	subs	r5, r5, r1
 8005d40:	4629      	mov	r1, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7ff ffa6 	bl	8005c94 <sbrk_aligned>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d03a      	beq.n	8005dc2 <_malloc_r+0xea>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	442b      	add	r3, r5
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	f8d8 3000 	ldr.w	r3, [r8]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	bb62      	cbnz	r2, 8005db4 <_malloc_r+0xdc>
 8005d5a:	f8c8 7000 	str.w	r7, [r8]
 8005d5e:	e00f      	b.n	8005d80 <_malloc_r+0xa8>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	1b52      	subs	r2, r2, r5
 8005d64:	d420      	bmi.n	8005da8 <_malloc_r+0xd0>
 8005d66:	2a0b      	cmp	r2, #11
 8005d68:	d917      	bls.n	8005d9a <_malloc_r+0xc2>
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	6025      	str	r5, [r4, #0]
 8005d70:	bf18      	it	ne
 8005d72:	6059      	strne	r1, [r3, #4]
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	bf08      	it	eq
 8005d78:	f8c8 1000 	streq.w	r1, [r8]
 8005d7c:	5162      	str	r2, [r4, r5]
 8005d7e:	604b      	str	r3, [r1, #4]
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 f82f 	bl	8005de4 <__malloc_unlock>
 8005d86:	f104 000b 	add.w	r0, r4, #11
 8005d8a:	1d23      	adds	r3, r4, #4
 8005d8c:	f020 0007 	bic.w	r0, r0, #7
 8005d90:	1ac2      	subs	r2, r0, r3
 8005d92:	bf1c      	itt	ne
 8005d94:	1a1b      	subne	r3, r3, r0
 8005d96:	50a3      	strne	r3, [r4, r2]
 8005d98:	e7af      	b.n	8005cfa <_malloc_r+0x22>
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	bf0c      	ite	eq
 8005da0:	f8c8 2000 	streq.w	r2, [r8]
 8005da4:	605a      	strne	r2, [r3, #4]
 8005da6:	e7eb      	b.n	8005d80 <_malloc_r+0xa8>
 8005da8:	4623      	mov	r3, r4
 8005daa:	6864      	ldr	r4, [r4, #4]
 8005dac:	e7ae      	b.n	8005d0c <_malloc_r+0x34>
 8005dae:	463c      	mov	r4, r7
 8005db0:	687f      	ldr	r7, [r7, #4]
 8005db2:	e7b6      	b.n	8005d22 <_malloc_r+0x4a>
 8005db4:	461a      	mov	r2, r3
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d1fb      	bne.n	8005db4 <_malloc_r+0xdc>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6053      	str	r3, [r2, #4]
 8005dc0:	e7de      	b.n	8005d80 <_malloc_r+0xa8>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	6033      	str	r3, [r6, #0]
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 f80c 	bl	8005de4 <__malloc_unlock>
 8005dcc:	e794      	b.n	8005cf8 <_malloc_r+0x20>
 8005dce:	6005      	str	r5, [r0, #0]
 8005dd0:	e7d6      	b.n	8005d80 <_malloc_r+0xa8>
 8005dd2:	bf00      	nop
 8005dd4:	200011c8 	.word	0x200011c8

08005dd8 <__malloc_lock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__malloc_lock+0x8>)
 8005dda:	f7ff beda 	b.w	8005b92 <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	200011c0 	.word	0x200011c0

08005de4 <__malloc_unlock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	@ (8005dec <__malloc_unlock+0x8>)
 8005de6:	f7ff bed5 	b.w	8005b94 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	200011c0 	.word	0x200011c0

08005df0 <__ssputs_r>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	688e      	ldr	r6, [r1, #8]
 8005df6:	461f      	mov	r7, r3
 8005df8:	42be      	cmp	r6, r7
 8005dfa:	680b      	ldr	r3, [r1, #0]
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	4690      	mov	r8, r2
 8005e02:	d82d      	bhi.n	8005e60 <__ssputs_r+0x70>
 8005e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e0c:	d026      	beq.n	8005e5c <__ssputs_r+0x6c>
 8005e0e:	6965      	ldr	r5, [r4, #20]
 8005e10:	6909      	ldr	r1, [r1, #16]
 8005e12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e16:	eba3 0901 	sub.w	r9, r3, r1
 8005e1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e1e:	1c7b      	adds	r3, r7, #1
 8005e20:	444b      	add	r3, r9
 8005e22:	106d      	asrs	r5, r5, #1
 8005e24:	429d      	cmp	r5, r3
 8005e26:	bf38      	it	cc
 8005e28:	461d      	movcc	r5, r3
 8005e2a:	0553      	lsls	r3, r2, #21
 8005e2c:	d527      	bpl.n	8005e7e <__ssputs_r+0x8e>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7ff ff52 	bl	8005cd8 <_malloc_r>
 8005e34:	4606      	mov	r6, r0
 8005e36:	b360      	cbz	r0, 8005e92 <__ssputs_r+0xa2>
 8005e38:	6921      	ldr	r1, [r4, #16]
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	f7ff feab 	bl	8005b96 <memcpy>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	6126      	str	r6, [r4, #16]
 8005e4e:	6165      	str	r5, [r4, #20]
 8005e50:	444e      	add	r6, r9
 8005e52:	eba5 0509 	sub.w	r5, r5, r9
 8005e56:	6026      	str	r6, [r4, #0]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	463e      	mov	r6, r7
 8005e5c:	42be      	cmp	r6, r7
 8005e5e:	d900      	bls.n	8005e62 <__ssputs_r+0x72>
 8005e60:	463e      	mov	r6, r7
 8005e62:	6820      	ldr	r0, [r4, #0]
 8005e64:	4632      	mov	r2, r6
 8005e66:	4641      	mov	r1, r8
 8005e68:	f000 fb64 	bl	8006534 <memmove>
 8005e6c:	68a3      	ldr	r3, [r4, #8]
 8005e6e:	1b9b      	subs	r3, r3, r6
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	4433      	add	r3, r6
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	462a      	mov	r2, r5
 8005e80:	f000 fb89 	bl	8006596 <_realloc_r>
 8005e84:	4606      	mov	r6, r0
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d1e0      	bne.n	8005e4c <__ssputs_r+0x5c>
 8005e8a:	6921      	ldr	r1, [r4, #16]
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	f7ff feaf 	bl	8005bf0 <_free_r>
 8005e92:	230c      	movs	r3, #12
 8005e94:	f8ca 3000 	str.w	r3, [sl]
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e7e9      	b.n	8005e7a <__ssputs_r+0x8a>
	...

08005ea8 <_svfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	4698      	mov	r8, r3
 8005eae:	898b      	ldrh	r3, [r1, #12]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	b09d      	sub	sp, #116	@ 0x74
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	4614      	mov	r4, r2
 8005eba:	d510      	bpl.n	8005ede <_svfiprintf_r+0x36>
 8005ebc:	690b      	ldr	r3, [r1, #16]
 8005ebe:	b973      	cbnz	r3, 8005ede <_svfiprintf_r+0x36>
 8005ec0:	2140      	movs	r1, #64	@ 0x40
 8005ec2:	f7ff ff09 	bl	8005cd8 <_malloc_r>
 8005ec6:	6028      	str	r0, [r5, #0]
 8005ec8:	6128      	str	r0, [r5, #16]
 8005eca:	b930      	cbnz	r0, 8005eda <_svfiprintf_r+0x32>
 8005ecc:	230c      	movs	r3, #12
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	b01d      	add	sp, #116	@ 0x74
 8005ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eda:	2340      	movs	r3, #64	@ 0x40
 8005edc:	616b      	str	r3, [r5, #20]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eec:	2330      	movs	r3, #48	@ 0x30
 8005eee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800608c <_svfiprintf_r+0x1e4>
 8005ef2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ef6:	f04f 0901 	mov.w	r9, #1
 8005efa:	4623      	mov	r3, r4
 8005efc:	469a      	mov	sl, r3
 8005efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f02:	b10a      	cbz	r2, 8005f08 <_svfiprintf_r+0x60>
 8005f04:	2a25      	cmp	r2, #37	@ 0x25
 8005f06:	d1f9      	bne.n	8005efc <_svfiprintf_r+0x54>
 8005f08:	ebba 0b04 	subs.w	fp, sl, r4
 8005f0c:	d00b      	beq.n	8005f26 <_svfiprintf_r+0x7e>
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4622      	mov	r2, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ff6b 	bl	8005df0 <__ssputs_r>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f000 80a7 	beq.w	800606e <_svfiprintf_r+0x1c6>
 8005f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f22:	445a      	add	r2, fp
 8005f24:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 809f 	beq.w	800606e <_svfiprintf_r+0x1c6>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f3a:	f10a 0a01 	add.w	sl, sl, #1
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f46:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	484e      	ldr	r0, [pc, #312]	@ (800608c <_svfiprintf_r+0x1e4>)
 8005f52:	f7fa f945 	bl	80001e0 <memchr>
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	b9d8      	cbnz	r0, 8005f92 <_svfiprintf_r+0xea>
 8005f5a:	06d0      	lsls	r0, r2, #27
 8005f5c:	bf44      	itt	mi
 8005f5e:	2320      	movmi	r3, #32
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f64:	0711      	lsls	r1, r2, #28
 8005f66:	bf44      	itt	mi
 8005f68:	232b      	movmi	r3, #43	@ 0x2b
 8005f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f74:	d015      	beq.n	8005fa2 <_svfiprintf_r+0xfa>
 8005f76:	9a07      	ldr	r2, [sp, #28]
 8005f78:	4654      	mov	r4, sl
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f04f 0c0a 	mov.w	ip, #10
 8005f80:	4621      	mov	r1, r4
 8005f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f86:	3b30      	subs	r3, #48	@ 0x30
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d94b      	bls.n	8006024 <_svfiprintf_r+0x17c>
 8005f8c:	b1b0      	cbz	r0, 8005fbc <_svfiprintf_r+0x114>
 8005f8e:	9207      	str	r2, [sp, #28]
 8005f90:	e014      	b.n	8005fbc <_svfiprintf_r+0x114>
 8005f92:	eba0 0308 	sub.w	r3, r0, r8
 8005f96:	fa09 f303 	lsl.w	r3, r9, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	9304      	str	r3, [sp, #16]
 8005f9e:	46a2      	mov	sl, r4
 8005fa0:	e7d2      	b.n	8005f48 <_svfiprintf_r+0xa0>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	1d19      	adds	r1, r3, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	9103      	str	r1, [sp, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfbb      	ittet	lt
 8005fae:	425b      	neglt	r3, r3
 8005fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb4:	9307      	strge	r3, [sp, #28]
 8005fb6:	9307      	strlt	r3, [sp, #28]
 8005fb8:	bfb8      	it	lt
 8005fba:	9204      	strlt	r2, [sp, #16]
 8005fbc:	7823      	ldrb	r3, [r4, #0]
 8005fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fc0:	d10a      	bne.n	8005fd8 <_svfiprintf_r+0x130>
 8005fc2:	7863      	ldrb	r3, [r4, #1]
 8005fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc6:	d132      	bne.n	800602e <_svfiprintf_r+0x186>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9203      	str	r2, [sp, #12]
 8005fd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fd4:	3402      	adds	r4, #2
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800609c <_svfiprintf_r+0x1f4>
 8005fdc:	7821      	ldrb	r1, [r4, #0]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	f7fa f8fd 	bl	80001e0 <memchr>
 8005fe6:	b138      	cbz	r0, 8005ff8 <_svfiprintf_r+0x150>
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	eba0 000a 	sub.w	r0, r0, sl
 8005fee:	2240      	movs	r2, #64	@ 0x40
 8005ff0:	4082      	lsls	r2, r0
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	3401      	adds	r4, #1
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffc:	4824      	ldr	r0, [pc, #144]	@ (8006090 <_svfiprintf_r+0x1e8>)
 8005ffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006002:	2206      	movs	r2, #6
 8006004:	f7fa f8ec 	bl	80001e0 <memchr>
 8006008:	2800      	cmp	r0, #0
 800600a:	d036      	beq.n	800607a <_svfiprintf_r+0x1d2>
 800600c:	4b21      	ldr	r3, [pc, #132]	@ (8006094 <_svfiprintf_r+0x1ec>)
 800600e:	bb1b      	cbnz	r3, 8006058 <_svfiprintf_r+0x1b0>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	3307      	adds	r3, #7
 8006014:	f023 0307 	bic.w	r3, r3, #7
 8006018:	3308      	adds	r3, #8
 800601a:	9303      	str	r3, [sp, #12]
 800601c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601e:	4433      	add	r3, r6
 8006020:	9309      	str	r3, [sp, #36]	@ 0x24
 8006022:	e76a      	b.n	8005efa <_svfiprintf_r+0x52>
 8006024:	fb0c 3202 	mla	r2, ip, r2, r3
 8006028:	460c      	mov	r4, r1
 800602a:	2001      	movs	r0, #1
 800602c:	e7a8      	b.n	8005f80 <_svfiprintf_r+0xd8>
 800602e:	2300      	movs	r3, #0
 8006030:	3401      	adds	r4, #1
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	4619      	mov	r1, r3
 8006036:	f04f 0c0a 	mov.w	ip, #10
 800603a:	4620      	mov	r0, r4
 800603c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006040:	3a30      	subs	r2, #48	@ 0x30
 8006042:	2a09      	cmp	r2, #9
 8006044:	d903      	bls.n	800604e <_svfiprintf_r+0x1a6>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0c6      	beq.n	8005fd8 <_svfiprintf_r+0x130>
 800604a:	9105      	str	r1, [sp, #20]
 800604c:	e7c4      	b.n	8005fd8 <_svfiprintf_r+0x130>
 800604e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006052:	4604      	mov	r4, r0
 8006054:	2301      	movs	r3, #1
 8006056:	e7f0      	b.n	800603a <_svfiprintf_r+0x192>
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462a      	mov	r2, r5
 800605e:	4b0e      	ldr	r3, [pc, #56]	@ (8006098 <_svfiprintf_r+0x1f0>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4638      	mov	r0, r7
 8006064:	f3af 8000 	nop.w
 8006068:	1c42      	adds	r2, r0, #1
 800606a:	4606      	mov	r6, r0
 800606c:	d1d6      	bne.n	800601c <_svfiprintf_r+0x174>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	065b      	lsls	r3, r3, #25
 8006072:	f53f af2d 	bmi.w	8005ed0 <_svfiprintf_r+0x28>
 8006076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006078:	e72c      	b.n	8005ed4 <_svfiprintf_r+0x2c>
 800607a:	ab03      	add	r3, sp, #12
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	462a      	mov	r2, r5
 8006080:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <_svfiprintf_r+0x1f0>)
 8006082:	a904      	add	r1, sp, #16
 8006084:	4638      	mov	r0, r7
 8006086:	f000 f879 	bl	800617c <_printf_i>
 800608a:	e7ed      	b.n	8006068 <_svfiprintf_r+0x1c0>
 800608c:	08006cdb 	.word	0x08006cdb
 8006090:	08006ce5 	.word	0x08006ce5
 8006094:	00000000 	.word	0x00000000
 8006098:	08005df1 	.word	0x08005df1
 800609c:	08006ce1 	.word	0x08006ce1

080060a0 <_printf_common>:
 80060a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	4616      	mov	r6, r2
 80060a6:	4698      	mov	r8, r3
 80060a8:	688a      	ldr	r2, [r1, #8]
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bfb8      	it	lt
 80060b4:	4613      	movlt	r3, r2
 80060b6:	6033      	str	r3, [r6, #0]
 80060b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060bc:	4607      	mov	r7, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	b10a      	cbz	r2, 80060c6 <_printf_common+0x26>
 80060c2:	3301      	adds	r3, #1
 80060c4:	6033      	str	r3, [r6, #0]
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	0699      	lsls	r1, r3, #26
 80060ca:	bf42      	ittt	mi
 80060cc:	6833      	ldrmi	r3, [r6, #0]
 80060ce:	3302      	addmi	r3, #2
 80060d0:	6033      	strmi	r3, [r6, #0]
 80060d2:	6825      	ldr	r5, [r4, #0]
 80060d4:	f015 0506 	ands.w	r5, r5, #6
 80060d8:	d106      	bne.n	80060e8 <_printf_common+0x48>
 80060da:	f104 0a19 	add.w	sl, r4, #25
 80060de:	68e3      	ldr	r3, [r4, #12]
 80060e0:	6832      	ldr	r2, [r6, #0]
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	dc26      	bgt.n	8006136 <_printf_common+0x96>
 80060e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	3b00      	subs	r3, #0
 80060f0:	bf18      	it	ne
 80060f2:	2301      	movne	r3, #1
 80060f4:	0692      	lsls	r2, r2, #26
 80060f6:	d42b      	bmi.n	8006150 <_printf_common+0xb0>
 80060f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060fc:	4641      	mov	r1, r8
 80060fe:	4638      	mov	r0, r7
 8006100:	47c8      	blx	r9
 8006102:	3001      	adds	r0, #1
 8006104:	d01e      	beq.n	8006144 <_printf_common+0xa4>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	6922      	ldr	r2, [r4, #16]
 800610a:	f003 0306 	and.w	r3, r3, #6
 800610e:	2b04      	cmp	r3, #4
 8006110:	bf02      	ittt	eq
 8006112:	68e5      	ldreq	r5, [r4, #12]
 8006114:	6833      	ldreq	r3, [r6, #0]
 8006116:	1aed      	subeq	r5, r5, r3
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	bf0c      	ite	eq
 800611c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006120:	2500      	movne	r5, #0
 8006122:	4293      	cmp	r3, r2
 8006124:	bfc4      	itt	gt
 8006126:	1a9b      	subgt	r3, r3, r2
 8006128:	18ed      	addgt	r5, r5, r3
 800612a:	2600      	movs	r6, #0
 800612c:	341a      	adds	r4, #26
 800612e:	42b5      	cmp	r5, r6
 8006130:	d11a      	bne.n	8006168 <_printf_common+0xc8>
 8006132:	2000      	movs	r0, #0
 8006134:	e008      	b.n	8006148 <_printf_common+0xa8>
 8006136:	2301      	movs	r3, #1
 8006138:	4652      	mov	r2, sl
 800613a:	4641      	mov	r1, r8
 800613c:	4638      	mov	r0, r7
 800613e:	47c8      	blx	r9
 8006140:	3001      	adds	r0, #1
 8006142:	d103      	bne.n	800614c <_printf_common+0xac>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614c:	3501      	adds	r5, #1
 800614e:	e7c6      	b.n	80060de <_printf_common+0x3e>
 8006150:	18e1      	adds	r1, r4, r3
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	2030      	movs	r0, #48	@ 0x30
 8006156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800615a:	4422      	add	r2, r4
 800615c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006164:	3302      	adds	r3, #2
 8006166:	e7c7      	b.n	80060f8 <_printf_common+0x58>
 8006168:	2301      	movs	r3, #1
 800616a:	4622      	mov	r2, r4
 800616c:	4641      	mov	r1, r8
 800616e:	4638      	mov	r0, r7
 8006170:	47c8      	blx	r9
 8006172:	3001      	adds	r0, #1
 8006174:	d0e6      	beq.n	8006144 <_printf_common+0xa4>
 8006176:	3601      	adds	r6, #1
 8006178:	e7d9      	b.n	800612e <_printf_common+0x8e>
	...

0800617c <_printf_i>:
 800617c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	7e0f      	ldrb	r7, [r1, #24]
 8006182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006184:	2f78      	cmp	r7, #120	@ 0x78
 8006186:	4691      	mov	r9, r2
 8006188:	4680      	mov	r8, r0
 800618a:	460c      	mov	r4, r1
 800618c:	469a      	mov	sl, r3
 800618e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006192:	d807      	bhi.n	80061a4 <_printf_i+0x28>
 8006194:	2f62      	cmp	r7, #98	@ 0x62
 8006196:	d80a      	bhi.n	80061ae <_printf_i+0x32>
 8006198:	2f00      	cmp	r7, #0
 800619a:	f000 80d1 	beq.w	8006340 <_printf_i+0x1c4>
 800619e:	2f58      	cmp	r7, #88	@ 0x58
 80061a0:	f000 80b8 	beq.w	8006314 <_printf_i+0x198>
 80061a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061ac:	e03a      	b.n	8006224 <_printf_i+0xa8>
 80061ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061b2:	2b15      	cmp	r3, #21
 80061b4:	d8f6      	bhi.n	80061a4 <_printf_i+0x28>
 80061b6:	a101      	add	r1, pc, #4	@ (adr r1, 80061bc <_printf_i+0x40>)
 80061b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061bc:	08006215 	.word	0x08006215
 80061c0:	08006229 	.word	0x08006229
 80061c4:	080061a5 	.word	0x080061a5
 80061c8:	080061a5 	.word	0x080061a5
 80061cc:	080061a5 	.word	0x080061a5
 80061d0:	080061a5 	.word	0x080061a5
 80061d4:	08006229 	.word	0x08006229
 80061d8:	080061a5 	.word	0x080061a5
 80061dc:	080061a5 	.word	0x080061a5
 80061e0:	080061a5 	.word	0x080061a5
 80061e4:	080061a5 	.word	0x080061a5
 80061e8:	08006327 	.word	0x08006327
 80061ec:	08006253 	.word	0x08006253
 80061f0:	080062e1 	.word	0x080062e1
 80061f4:	080061a5 	.word	0x080061a5
 80061f8:	080061a5 	.word	0x080061a5
 80061fc:	08006349 	.word	0x08006349
 8006200:	080061a5 	.word	0x080061a5
 8006204:	08006253 	.word	0x08006253
 8006208:	080061a5 	.word	0x080061a5
 800620c:	080061a5 	.word	0x080061a5
 8006210:	080062e9 	.word	0x080062e9
 8006214:	6833      	ldr	r3, [r6, #0]
 8006216:	1d1a      	adds	r2, r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6032      	str	r2, [r6, #0]
 800621c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006224:	2301      	movs	r3, #1
 8006226:	e09c      	b.n	8006362 <_printf_i+0x1e6>
 8006228:	6833      	ldr	r3, [r6, #0]
 800622a:	6820      	ldr	r0, [r4, #0]
 800622c:	1d19      	adds	r1, r3, #4
 800622e:	6031      	str	r1, [r6, #0]
 8006230:	0606      	lsls	r6, r0, #24
 8006232:	d501      	bpl.n	8006238 <_printf_i+0xbc>
 8006234:	681d      	ldr	r5, [r3, #0]
 8006236:	e003      	b.n	8006240 <_printf_i+0xc4>
 8006238:	0645      	lsls	r5, r0, #25
 800623a:	d5fb      	bpl.n	8006234 <_printf_i+0xb8>
 800623c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006240:	2d00      	cmp	r5, #0
 8006242:	da03      	bge.n	800624c <_printf_i+0xd0>
 8006244:	232d      	movs	r3, #45	@ 0x2d
 8006246:	426d      	negs	r5, r5
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800624c:	4858      	ldr	r0, [pc, #352]	@ (80063b0 <_printf_i+0x234>)
 800624e:	230a      	movs	r3, #10
 8006250:	e011      	b.n	8006276 <_printf_i+0xfa>
 8006252:	6821      	ldr	r1, [r4, #0]
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	0608      	lsls	r0, r1, #24
 8006258:	f853 5b04 	ldr.w	r5, [r3], #4
 800625c:	d402      	bmi.n	8006264 <_printf_i+0xe8>
 800625e:	0649      	lsls	r1, r1, #25
 8006260:	bf48      	it	mi
 8006262:	b2ad      	uxthmi	r5, r5
 8006264:	2f6f      	cmp	r7, #111	@ 0x6f
 8006266:	4852      	ldr	r0, [pc, #328]	@ (80063b0 <_printf_i+0x234>)
 8006268:	6033      	str	r3, [r6, #0]
 800626a:	bf14      	ite	ne
 800626c:	230a      	movne	r3, #10
 800626e:	2308      	moveq	r3, #8
 8006270:	2100      	movs	r1, #0
 8006272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006276:	6866      	ldr	r6, [r4, #4]
 8006278:	60a6      	str	r6, [r4, #8]
 800627a:	2e00      	cmp	r6, #0
 800627c:	db05      	blt.n	800628a <_printf_i+0x10e>
 800627e:	6821      	ldr	r1, [r4, #0]
 8006280:	432e      	orrs	r6, r5
 8006282:	f021 0104 	bic.w	r1, r1, #4
 8006286:	6021      	str	r1, [r4, #0]
 8006288:	d04b      	beq.n	8006322 <_printf_i+0x1a6>
 800628a:	4616      	mov	r6, r2
 800628c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006290:	fb03 5711 	mls	r7, r3, r1, r5
 8006294:	5dc7      	ldrb	r7, [r0, r7]
 8006296:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800629a:	462f      	mov	r7, r5
 800629c:	42bb      	cmp	r3, r7
 800629e:	460d      	mov	r5, r1
 80062a0:	d9f4      	bls.n	800628c <_printf_i+0x110>
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d10b      	bne.n	80062be <_printf_i+0x142>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	07df      	lsls	r7, r3, #31
 80062aa:	d508      	bpl.n	80062be <_printf_i+0x142>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	6861      	ldr	r1, [r4, #4]
 80062b0:	4299      	cmp	r1, r3
 80062b2:	bfde      	ittt	le
 80062b4:	2330      	movle	r3, #48	@ 0x30
 80062b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062be:	1b92      	subs	r2, r2, r6
 80062c0:	6122      	str	r2, [r4, #16]
 80062c2:	f8cd a000 	str.w	sl, [sp]
 80062c6:	464b      	mov	r3, r9
 80062c8:	aa03      	add	r2, sp, #12
 80062ca:	4621      	mov	r1, r4
 80062cc:	4640      	mov	r0, r8
 80062ce:	f7ff fee7 	bl	80060a0 <_printf_common>
 80062d2:	3001      	adds	r0, #1
 80062d4:	d14a      	bne.n	800636c <_printf_i+0x1f0>
 80062d6:	f04f 30ff 	mov.w	r0, #4294967295
 80062da:	b004      	add	sp, #16
 80062dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	f043 0320 	orr.w	r3, r3, #32
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	4832      	ldr	r0, [pc, #200]	@ (80063b4 <_printf_i+0x238>)
 80062ea:	2778      	movs	r7, #120	@ 0x78
 80062ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	6831      	ldr	r1, [r6, #0]
 80062f4:	061f      	lsls	r7, r3, #24
 80062f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80062fa:	d402      	bmi.n	8006302 <_printf_i+0x186>
 80062fc:	065f      	lsls	r7, r3, #25
 80062fe:	bf48      	it	mi
 8006300:	b2ad      	uxthmi	r5, r5
 8006302:	6031      	str	r1, [r6, #0]
 8006304:	07d9      	lsls	r1, r3, #31
 8006306:	bf44      	itt	mi
 8006308:	f043 0320 	orrmi.w	r3, r3, #32
 800630c:	6023      	strmi	r3, [r4, #0]
 800630e:	b11d      	cbz	r5, 8006318 <_printf_i+0x19c>
 8006310:	2310      	movs	r3, #16
 8006312:	e7ad      	b.n	8006270 <_printf_i+0xf4>
 8006314:	4826      	ldr	r0, [pc, #152]	@ (80063b0 <_printf_i+0x234>)
 8006316:	e7e9      	b.n	80062ec <_printf_i+0x170>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f023 0320 	bic.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	e7f6      	b.n	8006310 <_printf_i+0x194>
 8006322:	4616      	mov	r6, r2
 8006324:	e7bd      	b.n	80062a2 <_printf_i+0x126>
 8006326:	6833      	ldr	r3, [r6, #0]
 8006328:	6825      	ldr	r5, [r4, #0]
 800632a:	6961      	ldr	r1, [r4, #20]
 800632c:	1d18      	adds	r0, r3, #4
 800632e:	6030      	str	r0, [r6, #0]
 8006330:	062e      	lsls	r6, r5, #24
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	d501      	bpl.n	800633a <_printf_i+0x1be>
 8006336:	6019      	str	r1, [r3, #0]
 8006338:	e002      	b.n	8006340 <_printf_i+0x1c4>
 800633a:	0668      	lsls	r0, r5, #25
 800633c:	d5fb      	bpl.n	8006336 <_printf_i+0x1ba>
 800633e:	8019      	strh	r1, [r3, #0]
 8006340:	2300      	movs	r3, #0
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	4616      	mov	r6, r2
 8006346:	e7bc      	b.n	80062c2 <_printf_i+0x146>
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	6032      	str	r2, [r6, #0]
 800634e:	681e      	ldr	r6, [r3, #0]
 8006350:	6862      	ldr	r2, [r4, #4]
 8006352:	2100      	movs	r1, #0
 8006354:	4630      	mov	r0, r6
 8006356:	f7f9 ff43 	bl	80001e0 <memchr>
 800635a:	b108      	cbz	r0, 8006360 <_printf_i+0x1e4>
 800635c:	1b80      	subs	r0, r0, r6
 800635e:	6060      	str	r0, [r4, #4]
 8006360:	6863      	ldr	r3, [r4, #4]
 8006362:	6123      	str	r3, [r4, #16]
 8006364:	2300      	movs	r3, #0
 8006366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800636a:	e7aa      	b.n	80062c2 <_printf_i+0x146>
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	4632      	mov	r2, r6
 8006370:	4649      	mov	r1, r9
 8006372:	4640      	mov	r0, r8
 8006374:	47d0      	blx	sl
 8006376:	3001      	adds	r0, #1
 8006378:	d0ad      	beq.n	80062d6 <_printf_i+0x15a>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	079b      	lsls	r3, r3, #30
 800637e:	d413      	bmi.n	80063a8 <_printf_i+0x22c>
 8006380:	68e0      	ldr	r0, [r4, #12]
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	4298      	cmp	r0, r3
 8006386:	bfb8      	it	lt
 8006388:	4618      	movlt	r0, r3
 800638a:	e7a6      	b.n	80062da <_printf_i+0x15e>
 800638c:	2301      	movs	r3, #1
 800638e:	4632      	mov	r2, r6
 8006390:	4649      	mov	r1, r9
 8006392:	4640      	mov	r0, r8
 8006394:	47d0      	blx	sl
 8006396:	3001      	adds	r0, #1
 8006398:	d09d      	beq.n	80062d6 <_printf_i+0x15a>
 800639a:	3501      	adds	r5, #1
 800639c:	68e3      	ldr	r3, [r4, #12]
 800639e:	9903      	ldr	r1, [sp, #12]
 80063a0:	1a5b      	subs	r3, r3, r1
 80063a2:	42ab      	cmp	r3, r5
 80063a4:	dcf2      	bgt.n	800638c <_printf_i+0x210>
 80063a6:	e7eb      	b.n	8006380 <_printf_i+0x204>
 80063a8:	2500      	movs	r5, #0
 80063aa:	f104 0619 	add.w	r6, r4, #25
 80063ae:	e7f5      	b.n	800639c <_printf_i+0x220>
 80063b0:	08006cec 	.word	0x08006cec
 80063b4:	08006cfd 	.word	0x08006cfd

080063b8 <__sflush_r>:
 80063b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c0:	0716      	lsls	r6, r2, #28
 80063c2:	4605      	mov	r5, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	d454      	bmi.n	8006472 <__sflush_r+0xba>
 80063c8:	684b      	ldr	r3, [r1, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	dc02      	bgt.n	80063d4 <__sflush_r+0x1c>
 80063ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dd48      	ble.n	8006466 <__sflush_r+0xae>
 80063d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	d045      	beq.n	8006466 <__sflush_r+0xae>
 80063da:	2300      	movs	r3, #0
 80063dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063e0:	682f      	ldr	r7, [r5, #0]
 80063e2:	6a21      	ldr	r1, [r4, #32]
 80063e4:	602b      	str	r3, [r5, #0]
 80063e6:	d030      	beq.n	800644a <__sflush_r+0x92>
 80063e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	0759      	lsls	r1, r3, #29
 80063ee:	d505      	bpl.n	80063fc <__sflush_r+0x44>
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063f6:	b10b      	cbz	r3, 80063fc <__sflush_r+0x44>
 80063f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	2300      	movs	r3, #0
 80063fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006400:	6a21      	ldr	r1, [r4, #32]
 8006402:	4628      	mov	r0, r5
 8006404:	47b0      	blx	r6
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	d106      	bne.n	800641a <__sflush_r+0x62>
 800640c:	6829      	ldr	r1, [r5, #0]
 800640e:	291d      	cmp	r1, #29
 8006410:	d82b      	bhi.n	800646a <__sflush_r+0xb2>
 8006412:	4a2a      	ldr	r2, [pc, #168]	@ (80064bc <__sflush_r+0x104>)
 8006414:	40ca      	lsrs	r2, r1
 8006416:	07d6      	lsls	r6, r2, #31
 8006418:	d527      	bpl.n	800646a <__sflush_r+0xb2>
 800641a:	2200      	movs	r2, #0
 800641c:	6062      	str	r2, [r4, #4]
 800641e:	04d9      	lsls	r1, r3, #19
 8006420:	6922      	ldr	r2, [r4, #16]
 8006422:	6022      	str	r2, [r4, #0]
 8006424:	d504      	bpl.n	8006430 <__sflush_r+0x78>
 8006426:	1c42      	adds	r2, r0, #1
 8006428:	d101      	bne.n	800642e <__sflush_r+0x76>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b903      	cbnz	r3, 8006430 <__sflush_r+0x78>
 800642e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006432:	602f      	str	r7, [r5, #0]
 8006434:	b1b9      	cbz	r1, 8006466 <__sflush_r+0xae>
 8006436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800643a:	4299      	cmp	r1, r3
 800643c:	d002      	beq.n	8006444 <__sflush_r+0x8c>
 800643e:	4628      	mov	r0, r5
 8006440:	f7ff fbd6 	bl	8005bf0 <_free_r>
 8006444:	2300      	movs	r3, #0
 8006446:	6363      	str	r3, [r4, #52]	@ 0x34
 8006448:	e00d      	b.n	8006466 <__sflush_r+0xae>
 800644a:	2301      	movs	r3, #1
 800644c:	4628      	mov	r0, r5
 800644e:	47b0      	blx	r6
 8006450:	4602      	mov	r2, r0
 8006452:	1c50      	adds	r0, r2, #1
 8006454:	d1c9      	bne.n	80063ea <__sflush_r+0x32>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0c6      	beq.n	80063ea <__sflush_r+0x32>
 800645c:	2b1d      	cmp	r3, #29
 800645e:	d001      	beq.n	8006464 <__sflush_r+0xac>
 8006460:	2b16      	cmp	r3, #22
 8006462:	d11e      	bne.n	80064a2 <__sflush_r+0xea>
 8006464:	602f      	str	r7, [r5, #0]
 8006466:	2000      	movs	r0, #0
 8006468:	e022      	b.n	80064b0 <__sflush_r+0xf8>
 800646a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800646e:	b21b      	sxth	r3, r3
 8006470:	e01b      	b.n	80064aa <__sflush_r+0xf2>
 8006472:	690f      	ldr	r7, [r1, #16]
 8006474:	2f00      	cmp	r7, #0
 8006476:	d0f6      	beq.n	8006466 <__sflush_r+0xae>
 8006478:	0793      	lsls	r3, r2, #30
 800647a:	680e      	ldr	r6, [r1, #0]
 800647c:	bf08      	it	eq
 800647e:	694b      	ldreq	r3, [r1, #20]
 8006480:	600f      	str	r7, [r1, #0]
 8006482:	bf18      	it	ne
 8006484:	2300      	movne	r3, #0
 8006486:	eba6 0807 	sub.w	r8, r6, r7
 800648a:	608b      	str	r3, [r1, #8]
 800648c:	f1b8 0f00 	cmp.w	r8, #0
 8006490:	dde9      	ble.n	8006466 <__sflush_r+0xae>
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006496:	4643      	mov	r3, r8
 8006498:	463a      	mov	r2, r7
 800649a:	4628      	mov	r0, r5
 800649c:	47b0      	blx	r6
 800649e:	2800      	cmp	r0, #0
 80064a0:	dc08      	bgt.n	80064b4 <__sflush_r+0xfc>
 80064a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	4407      	add	r7, r0
 80064b6:	eba8 0800 	sub.w	r8, r8, r0
 80064ba:	e7e7      	b.n	800648c <__sflush_r+0xd4>
 80064bc:	20400001 	.word	0x20400001

080064c0 <_fflush_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	4605      	mov	r5, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	b913      	cbnz	r3, 80064d0 <_fflush_r+0x10>
 80064ca:	2500      	movs	r5, #0
 80064cc:	4628      	mov	r0, r5
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	b118      	cbz	r0, 80064da <_fflush_r+0x1a>
 80064d2:	6a03      	ldr	r3, [r0, #32]
 80064d4:	b90b      	cbnz	r3, 80064da <_fflush_r+0x1a>
 80064d6:	f7ff fa47 	bl	8005968 <__sinit>
 80064da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f3      	beq.n	80064ca <_fflush_r+0xa>
 80064e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064e4:	07d0      	lsls	r0, r2, #31
 80064e6:	d404      	bmi.n	80064f2 <_fflush_r+0x32>
 80064e8:	0599      	lsls	r1, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_fflush_r+0x32>
 80064ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ee:	f7ff fb50 	bl	8005b92 <__retarget_lock_acquire_recursive>
 80064f2:	4628      	mov	r0, r5
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7ff ff5f 	bl	80063b8 <__sflush_r>
 80064fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064fc:	07da      	lsls	r2, r3, #31
 80064fe:	4605      	mov	r5, r0
 8006500:	d4e4      	bmi.n	80064cc <_fflush_r+0xc>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	059b      	lsls	r3, r3, #22
 8006506:	d4e1      	bmi.n	80064cc <_fflush_r+0xc>
 8006508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800650a:	f7ff fb43 	bl	8005b94 <__retarget_lock_release_recursive>
 800650e:	e7dd      	b.n	80064cc <_fflush_r+0xc>

08006510 <fiprintf>:
 8006510:	b40e      	push	{r1, r2, r3}
 8006512:	b503      	push	{r0, r1, lr}
 8006514:	4601      	mov	r1, r0
 8006516:	ab03      	add	r3, sp, #12
 8006518:	4805      	ldr	r0, [pc, #20]	@ (8006530 <fiprintf+0x20>)
 800651a:	f853 2b04 	ldr.w	r2, [r3], #4
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	f000 f88f 	bl	8006644 <_vfiprintf_r>
 8006526:	b002      	add	sp, #8
 8006528:	f85d eb04 	ldr.w	lr, [sp], #4
 800652c:	b003      	add	sp, #12
 800652e:	4770      	bx	lr
 8006530:	2000001c 	.word	0x2000001c

08006534 <memmove>:
 8006534:	4288      	cmp	r0, r1
 8006536:	b510      	push	{r4, lr}
 8006538:	eb01 0402 	add.w	r4, r1, r2
 800653c:	d902      	bls.n	8006544 <memmove+0x10>
 800653e:	4284      	cmp	r4, r0
 8006540:	4623      	mov	r3, r4
 8006542:	d807      	bhi.n	8006554 <memmove+0x20>
 8006544:	1e43      	subs	r3, r0, #1
 8006546:	42a1      	cmp	r1, r4
 8006548:	d008      	beq.n	800655c <memmove+0x28>
 800654a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800654e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006552:	e7f8      	b.n	8006546 <memmove+0x12>
 8006554:	4402      	add	r2, r0
 8006556:	4601      	mov	r1, r0
 8006558:	428a      	cmp	r2, r1
 800655a:	d100      	bne.n	800655e <memmove+0x2a>
 800655c:	bd10      	pop	{r4, pc}
 800655e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006566:	e7f7      	b.n	8006558 <memmove+0x24>

08006568 <_sbrk_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	@ (8006584 <_sbrk_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fa fb38 	bl	8000be8 <_sbrk>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_sbrk_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_sbrk_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	200011bc 	.word	0x200011bc

08006588 <abort>:
 8006588:	b508      	push	{r3, lr}
 800658a:	2006      	movs	r0, #6
 800658c:	f000 fa2e 	bl	80069ec <raise>
 8006590:	2001      	movs	r0, #1
 8006592:	f7fa fab1 	bl	8000af8 <_exit>

08006596 <_realloc_r>:
 8006596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659a:	4607      	mov	r7, r0
 800659c:	4614      	mov	r4, r2
 800659e:	460d      	mov	r5, r1
 80065a0:	b921      	cbnz	r1, 80065ac <_realloc_r+0x16>
 80065a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	4611      	mov	r1, r2
 80065a8:	f7ff bb96 	b.w	8005cd8 <_malloc_r>
 80065ac:	b92a      	cbnz	r2, 80065ba <_realloc_r+0x24>
 80065ae:	f7ff fb1f 	bl	8005bf0 <_free_r>
 80065b2:	4625      	mov	r5, r4
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ba:	f000 fa33 	bl	8006a24 <_malloc_usable_size_r>
 80065be:	4284      	cmp	r4, r0
 80065c0:	4606      	mov	r6, r0
 80065c2:	d802      	bhi.n	80065ca <_realloc_r+0x34>
 80065c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065c8:	d8f4      	bhi.n	80065b4 <_realloc_r+0x1e>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff fb83 	bl	8005cd8 <_malloc_r>
 80065d2:	4680      	mov	r8, r0
 80065d4:	b908      	cbnz	r0, 80065da <_realloc_r+0x44>
 80065d6:	4645      	mov	r5, r8
 80065d8:	e7ec      	b.n	80065b4 <_realloc_r+0x1e>
 80065da:	42b4      	cmp	r4, r6
 80065dc:	4622      	mov	r2, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	bf28      	it	cs
 80065e2:	4632      	movcs	r2, r6
 80065e4:	f7ff fad7 	bl	8005b96 <memcpy>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7ff fb00 	bl	8005bf0 <_free_r>
 80065f0:	e7f1      	b.n	80065d6 <_realloc_r+0x40>

080065f2 <__sfputc_r>:
 80065f2:	6893      	ldr	r3, [r2, #8]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	b410      	push	{r4}
 80065fa:	6093      	str	r3, [r2, #8]
 80065fc:	da08      	bge.n	8006610 <__sfputc_r+0x1e>
 80065fe:	6994      	ldr	r4, [r2, #24]
 8006600:	42a3      	cmp	r3, r4
 8006602:	db01      	blt.n	8006608 <__sfputc_r+0x16>
 8006604:	290a      	cmp	r1, #10
 8006606:	d103      	bne.n	8006610 <__sfputc_r+0x1e>
 8006608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800660c:	f000 b932 	b.w	8006874 <__swbuf_r>
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	1c58      	adds	r0, r3, #1
 8006614:	6010      	str	r0, [r2, #0]
 8006616:	7019      	strb	r1, [r3, #0]
 8006618:	4608      	mov	r0, r1
 800661a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800661e:	4770      	bx	lr

08006620 <__sfputs_r>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	4614      	mov	r4, r2
 8006628:	18d5      	adds	r5, r2, r3
 800662a:	42ac      	cmp	r4, r5
 800662c:	d101      	bne.n	8006632 <__sfputs_r+0x12>
 800662e:	2000      	movs	r0, #0
 8006630:	e007      	b.n	8006642 <__sfputs_r+0x22>
 8006632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006636:	463a      	mov	r2, r7
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff ffda 	bl	80065f2 <__sfputc_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d1f3      	bne.n	800662a <__sfputs_r+0xa>
 8006642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006644 <_vfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	460d      	mov	r5, r1
 800664a:	b09d      	sub	sp, #116	@ 0x74
 800664c:	4614      	mov	r4, r2
 800664e:	4698      	mov	r8, r3
 8006650:	4606      	mov	r6, r0
 8006652:	b118      	cbz	r0, 800665c <_vfiprintf_r+0x18>
 8006654:	6a03      	ldr	r3, [r0, #32]
 8006656:	b90b      	cbnz	r3, 800665c <_vfiprintf_r+0x18>
 8006658:	f7ff f986 	bl	8005968 <__sinit>
 800665c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d405      	bmi.n	800666e <_vfiprintf_r+0x2a>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	059a      	lsls	r2, r3, #22
 8006666:	d402      	bmi.n	800666e <_vfiprintf_r+0x2a>
 8006668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800666a:	f7ff fa92 	bl	8005b92 <__retarget_lock_acquire_recursive>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	071b      	lsls	r3, r3, #28
 8006672:	d501      	bpl.n	8006678 <_vfiprintf_r+0x34>
 8006674:	692b      	ldr	r3, [r5, #16]
 8006676:	b99b      	cbnz	r3, 80066a0 <_vfiprintf_r+0x5c>
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f938 	bl	80068f0 <__swsetup_r>
 8006680:	b170      	cbz	r0, 80066a0 <_vfiprintf_r+0x5c>
 8006682:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006684:	07dc      	lsls	r4, r3, #31
 8006686:	d504      	bpl.n	8006692 <_vfiprintf_r+0x4e>
 8006688:	f04f 30ff 	mov.w	r0, #4294967295
 800668c:	b01d      	add	sp, #116	@ 0x74
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	89ab      	ldrh	r3, [r5, #12]
 8006694:	0598      	lsls	r0, r3, #22
 8006696:	d4f7      	bmi.n	8006688 <_vfiprintf_r+0x44>
 8006698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800669a:	f7ff fa7b 	bl	8005b94 <__retarget_lock_release_recursive>
 800669e:	e7f3      	b.n	8006688 <_vfiprintf_r+0x44>
 80066a0:	2300      	movs	r3, #0
 80066a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a4:	2320      	movs	r3, #32
 80066a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ae:	2330      	movs	r3, #48	@ 0x30
 80066b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006860 <_vfiprintf_r+0x21c>
 80066b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066b8:	f04f 0901 	mov.w	r9, #1
 80066bc:	4623      	mov	r3, r4
 80066be:	469a      	mov	sl, r3
 80066c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c4:	b10a      	cbz	r2, 80066ca <_vfiprintf_r+0x86>
 80066c6:	2a25      	cmp	r2, #37	@ 0x25
 80066c8:	d1f9      	bne.n	80066be <_vfiprintf_r+0x7a>
 80066ca:	ebba 0b04 	subs.w	fp, sl, r4
 80066ce:	d00b      	beq.n	80066e8 <_vfiprintf_r+0xa4>
 80066d0:	465b      	mov	r3, fp
 80066d2:	4622      	mov	r2, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ffa2 	bl	8006620 <__sfputs_r>
 80066dc:	3001      	adds	r0, #1
 80066de:	f000 80a7 	beq.w	8006830 <_vfiprintf_r+0x1ec>
 80066e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066e4:	445a      	add	r2, fp
 80066e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066e8:	f89a 3000 	ldrb.w	r3, [sl]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 809f 	beq.w	8006830 <_vfiprintf_r+0x1ec>
 80066f2:	2300      	movs	r3, #0
 80066f4:	f04f 32ff 	mov.w	r2, #4294967295
 80066f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066fc:	f10a 0a01 	add.w	sl, sl, #1
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006708:	931a      	str	r3, [sp, #104]	@ 0x68
 800670a:	4654      	mov	r4, sl
 800670c:	2205      	movs	r2, #5
 800670e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006712:	4853      	ldr	r0, [pc, #332]	@ (8006860 <_vfiprintf_r+0x21c>)
 8006714:	f7f9 fd64 	bl	80001e0 <memchr>
 8006718:	9a04      	ldr	r2, [sp, #16]
 800671a:	b9d8      	cbnz	r0, 8006754 <_vfiprintf_r+0x110>
 800671c:	06d1      	lsls	r1, r2, #27
 800671e:	bf44      	itt	mi
 8006720:	2320      	movmi	r3, #32
 8006722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006726:	0713      	lsls	r3, r2, #28
 8006728:	bf44      	itt	mi
 800672a:	232b      	movmi	r3, #43	@ 0x2b
 800672c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006730:	f89a 3000 	ldrb.w	r3, [sl]
 8006734:	2b2a      	cmp	r3, #42	@ 0x2a
 8006736:	d015      	beq.n	8006764 <_vfiprintf_r+0x120>
 8006738:	9a07      	ldr	r2, [sp, #28]
 800673a:	4654      	mov	r4, sl
 800673c:	2000      	movs	r0, #0
 800673e:	f04f 0c0a 	mov.w	ip, #10
 8006742:	4621      	mov	r1, r4
 8006744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006748:	3b30      	subs	r3, #48	@ 0x30
 800674a:	2b09      	cmp	r3, #9
 800674c:	d94b      	bls.n	80067e6 <_vfiprintf_r+0x1a2>
 800674e:	b1b0      	cbz	r0, 800677e <_vfiprintf_r+0x13a>
 8006750:	9207      	str	r2, [sp, #28]
 8006752:	e014      	b.n	800677e <_vfiprintf_r+0x13a>
 8006754:	eba0 0308 	sub.w	r3, r0, r8
 8006758:	fa09 f303 	lsl.w	r3, r9, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	46a2      	mov	sl, r4
 8006762:	e7d2      	b.n	800670a <_vfiprintf_r+0xc6>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	1d19      	adds	r1, r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	9103      	str	r1, [sp, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	bfbb      	ittet	lt
 8006770:	425b      	neglt	r3, r3
 8006772:	f042 0202 	orrlt.w	r2, r2, #2
 8006776:	9307      	strge	r3, [sp, #28]
 8006778:	9307      	strlt	r3, [sp, #28]
 800677a:	bfb8      	it	lt
 800677c:	9204      	strlt	r2, [sp, #16]
 800677e:	7823      	ldrb	r3, [r4, #0]
 8006780:	2b2e      	cmp	r3, #46	@ 0x2e
 8006782:	d10a      	bne.n	800679a <_vfiprintf_r+0x156>
 8006784:	7863      	ldrb	r3, [r4, #1]
 8006786:	2b2a      	cmp	r3, #42	@ 0x2a
 8006788:	d132      	bne.n	80067f0 <_vfiprintf_r+0x1ac>
 800678a:	9b03      	ldr	r3, [sp, #12]
 800678c:	1d1a      	adds	r2, r3, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	9203      	str	r2, [sp, #12]
 8006792:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006796:	3402      	adds	r4, #2
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006870 <_vfiprintf_r+0x22c>
 800679e:	7821      	ldrb	r1, [r4, #0]
 80067a0:	2203      	movs	r2, #3
 80067a2:	4650      	mov	r0, sl
 80067a4:	f7f9 fd1c 	bl	80001e0 <memchr>
 80067a8:	b138      	cbz	r0, 80067ba <_vfiprintf_r+0x176>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	eba0 000a 	sub.w	r0, r0, sl
 80067b0:	2240      	movs	r2, #64	@ 0x40
 80067b2:	4082      	lsls	r2, r0
 80067b4:	4313      	orrs	r3, r2
 80067b6:	3401      	adds	r4, #1
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067be:	4829      	ldr	r0, [pc, #164]	@ (8006864 <_vfiprintf_r+0x220>)
 80067c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067c4:	2206      	movs	r2, #6
 80067c6:	f7f9 fd0b 	bl	80001e0 <memchr>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d03f      	beq.n	800684e <_vfiprintf_r+0x20a>
 80067ce:	4b26      	ldr	r3, [pc, #152]	@ (8006868 <_vfiprintf_r+0x224>)
 80067d0:	bb1b      	cbnz	r3, 800681a <_vfiprintf_r+0x1d6>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	3308      	adds	r3, #8
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e0:	443b      	add	r3, r7
 80067e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067e4:	e76a      	b.n	80066bc <_vfiprintf_r+0x78>
 80067e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ea:	460c      	mov	r4, r1
 80067ec:	2001      	movs	r0, #1
 80067ee:	e7a8      	b.n	8006742 <_vfiprintf_r+0xfe>
 80067f0:	2300      	movs	r3, #0
 80067f2:	3401      	adds	r4, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	4619      	mov	r1, r3
 80067f8:	f04f 0c0a 	mov.w	ip, #10
 80067fc:	4620      	mov	r0, r4
 80067fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006802:	3a30      	subs	r2, #48	@ 0x30
 8006804:	2a09      	cmp	r2, #9
 8006806:	d903      	bls.n	8006810 <_vfiprintf_r+0x1cc>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0c6      	beq.n	800679a <_vfiprintf_r+0x156>
 800680c:	9105      	str	r1, [sp, #20]
 800680e:	e7c4      	b.n	800679a <_vfiprintf_r+0x156>
 8006810:	fb0c 2101 	mla	r1, ip, r1, r2
 8006814:	4604      	mov	r4, r0
 8006816:	2301      	movs	r3, #1
 8006818:	e7f0      	b.n	80067fc <_vfiprintf_r+0x1b8>
 800681a:	ab03      	add	r3, sp, #12
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	462a      	mov	r2, r5
 8006820:	4b12      	ldr	r3, [pc, #72]	@ (800686c <_vfiprintf_r+0x228>)
 8006822:	a904      	add	r1, sp, #16
 8006824:	4630      	mov	r0, r6
 8006826:	f3af 8000 	nop.w
 800682a:	4607      	mov	r7, r0
 800682c:	1c78      	adds	r0, r7, #1
 800682e:	d1d6      	bne.n	80067de <_vfiprintf_r+0x19a>
 8006830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006832:	07d9      	lsls	r1, r3, #31
 8006834:	d405      	bmi.n	8006842 <_vfiprintf_r+0x1fe>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d402      	bmi.n	8006842 <_vfiprintf_r+0x1fe>
 800683c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800683e:	f7ff f9a9 	bl	8005b94 <__retarget_lock_release_recursive>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	065b      	lsls	r3, r3, #25
 8006846:	f53f af1f 	bmi.w	8006688 <_vfiprintf_r+0x44>
 800684a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800684c:	e71e      	b.n	800668c <_vfiprintf_r+0x48>
 800684e:	ab03      	add	r3, sp, #12
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	462a      	mov	r2, r5
 8006854:	4b05      	ldr	r3, [pc, #20]	@ (800686c <_vfiprintf_r+0x228>)
 8006856:	a904      	add	r1, sp, #16
 8006858:	4630      	mov	r0, r6
 800685a:	f7ff fc8f 	bl	800617c <_printf_i>
 800685e:	e7e4      	b.n	800682a <_vfiprintf_r+0x1e6>
 8006860:	08006cdb 	.word	0x08006cdb
 8006864:	08006ce5 	.word	0x08006ce5
 8006868:	00000000 	.word	0x00000000
 800686c:	08006621 	.word	0x08006621
 8006870:	08006ce1 	.word	0x08006ce1

08006874 <__swbuf_r>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	460e      	mov	r6, r1
 8006878:	4614      	mov	r4, r2
 800687a:	4605      	mov	r5, r0
 800687c:	b118      	cbz	r0, 8006886 <__swbuf_r+0x12>
 800687e:	6a03      	ldr	r3, [r0, #32]
 8006880:	b90b      	cbnz	r3, 8006886 <__swbuf_r+0x12>
 8006882:	f7ff f871 	bl	8005968 <__sinit>
 8006886:	69a3      	ldr	r3, [r4, #24]
 8006888:	60a3      	str	r3, [r4, #8]
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	071a      	lsls	r2, r3, #28
 800688e:	d501      	bpl.n	8006894 <__swbuf_r+0x20>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	b943      	cbnz	r3, 80068a6 <__swbuf_r+0x32>
 8006894:	4621      	mov	r1, r4
 8006896:	4628      	mov	r0, r5
 8006898:	f000 f82a 	bl	80068f0 <__swsetup_r>
 800689c:	b118      	cbz	r0, 80068a6 <__swbuf_r+0x32>
 800689e:	f04f 37ff 	mov.w	r7, #4294967295
 80068a2:	4638      	mov	r0, r7
 80068a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	6922      	ldr	r2, [r4, #16]
 80068aa:	1a98      	subs	r0, r3, r2
 80068ac:	6963      	ldr	r3, [r4, #20]
 80068ae:	b2f6      	uxtb	r6, r6
 80068b0:	4283      	cmp	r3, r0
 80068b2:	4637      	mov	r7, r6
 80068b4:	dc05      	bgt.n	80068c2 <__swbuf_r+0x4e>
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f7ff fe01 	bl	80064c0 <_fflush_r>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d1ed      	bne.n	800689e <__swbuf_r+0x2a>
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	60a3      	str	r3, [r4, #8]
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	6022      	str	r2, [r4, #0]
 80068ce:	701e      	strb	r6, [r3, #0]
 80068d0:	6962      	ldr	r2, [r4, #20]
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d004      	beq.n	80068e2 <__swbuf_r+0x6e>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	07db      	lsls	r3, r3, #31
 80068dc:	d5e1      	bpl.n	80068a2 <__swbuf_r+0x2e>
 80068de:	2e0a      	cmp	r6, #10
 80068e0:	d1df      	bne.n	80068a2 <__swbuf_r+0x2e>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	f7ff fdeb 	bl	80064c0 <_fflush_r>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d0d9      	beq.n	80068a2 <__swbuf_r+0x2e>
 80068ee:	e7d6      	b.n	800689e <__swbuf_r+0x2a>

080068f0 <__swsetup_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4b29      	ldr	r3, [pc, #164]	@ (8006998 <__swsetup_r+0xa8>)
 80068f4:	4605      	mov	r5, r0
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	460c      	mov	r4, r1
 80068fa:	b118      	cbz	r0, 8006904 <__swsetup_r+0x14>
 80068fc:	6a03      	ldr	r3, [r0, #32]
 80068fe:	b90b      	cbnz	r3, 8006904 <__swsetup_r+0x14>
 8006900:	f7ff f832 	bl	8005968 <__sinit>
 8006904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006908:	0719      	lsls	r1, r3, #28
 800690a:	d422      	bmi.n	8006952 <__swsetup_r+0x62>
 800690c:	06da      	lsls	r2, r3, #27
 800690e:	d407      	bmi.n	8006920 <__swsetup_r+0x30>
 8006910:	2209      	movs	r2, #9
 8006912:	602a      	str	r2, [r5, #0]
 8006914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	e033      	b.n	8006988 <__swsetup_r+0x98>
 8006920:	0758      	lsls	r0, r3, #29
 8006922:	d512      	bpl.n	800694a <__swsetup_r+0x5a>
 8006924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006926:	b141      	cbz	r1, 800693a <__swsetup_r+0x4a>
 8006928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800692c:	4299      	cmp	r1, r3
 800692e:	d002      	beq.n	8006936 <__swsetup_r+0x46>
 8006930:	4628      	mov	r0, r5
 8006932:	f7ff f95d 	bl	8005bf0 <_free_r>
 8006936:	2300      	movs	r3, #0
 8006938:	6363      	str	r3, [r4, #52]	@ 0x34
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	2300      	movs	r3, #0
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f043 0308 	orr.w	r3, r3, #8
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	b94b      	cbnz	r3, 800696a <__swsetup_r+0x7a>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800695c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006960:	d003      	beq.n	800696a <__swsetup_r+0x7a>
 8006962:	4621      	mov	r1, r4
 8006964:	4628      	mov	r0, r5
 8006966:	f000 f88b 	bl	8006a80 <__smakebuf_r>
 800696a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696e:	f013 0201 	ands.w	r2, r3, #1
 8006972:	d00a      	beq.n	800698a <__swsetup_r+0x9a>
 8006974:	2200      	movs	r2, #0
 8006976:	60a2      	str	r2, [r4, #8]
 8006978:	6962      	ldr	r2, [r4, #20]
 800697a:	4252      	negs	r2, r2
 800697c:	61a2      	str	r2, [r4, #24]
 800697e:	6922      	ldr	r2, [r4, #16]
 8006980:	b942      	cbnz	r2, 8006994 <__swsetup_r+0xa4>
 8006982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006986:	d1c5      	bne.n	8006914 <__swsetup_r+0x24>
 8006988:	bd38      	pop	{r3, r4, r5, pc}
 800698a:	0799      	lsls	r1, r3, #30
 800698c:	bf58      	it	pl
 800698e:	6962      	ldrpl	r2, [r4, #20]
 8006990:	60a2      	str	r2, [r4, #8]
 8006992:	e7f4      	b.n	800697e <__swsetup_r+0x8e>
 8006994:	2000      	movs	r0, #0
 8006996:	e7f7      	b.n	8006988 <__swsetup_r+0x98>
 8006998:	2000001c 	.word	0x2000001c

0800699c <_raise_r>:
 800699c:	291f      	cmp	r1, #31
 800699e:	b538      	push	{r3, r4, r5, lr}
 80069a0:	4605      	mov	r5, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	d904      	bls.n	80069b0 <_raise_r+0x14>
 80069a6:	2316      	movs	r3, #22
 80069a8:	6003      	str	r3, [r0, #0]
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80069b2:	b112      	cbz	r2, 80069ba <_raise_r+0x1e>
 80069b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069b8:	b94b      	cbnz	r3, 80069ce <_raise_r+0x32>
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f830 	bl	8006a20 <_getpid_r>
 80069c0:	4622      	mov	r2, r4
 80069c2:	4601      	mov	r1, r0
 80069c4:	4628      	mov	r0, r5
 80069c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ca:	f000 b817 	b.w	80069fc <_kill_r>
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d00a      	beq.n	80069e8 <_raise_r+0x4c>
 80069d2:	1c59      	adds	r1, r3, #1
 80069d4:	d103      	bne.n	80069de <_raise_r+0x42>
 80069d6:	2316      	movs	r3, #22
 80069d8:	6003      	str	r3, [r0, #0]
 80069da:	2001      	movs	r0, #1
 80069dc:	e7e7      	b.n	80069ae <_raise_r+0x12>
 80069de:	2100      	movs	r1, #0
 80069e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069e4:	4620      	mov	r0, r4
 80069e6:	4798      	blx	r3
 80069e8:	2000      	movs	r0, #0
 80069ea:	e7e0      	b.n	80069ae <_raise_r+0x12>

080069ec <raise>:
 80069ec:	4b02      	ldr	r3, [pc, #8]	@ (80069f8 <raise+0xc>)
 80069ee:	4601      	mov	r1, r0
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f7ff bfd3 	b.w	800699c <_raise_r>
 80069f6:	bf00      	nop
 80069f8:	2000001c 	.word	0x2000001c

080069fc <_kill_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d07      	ldr	r5, [pc, #28]	@ (8006a1c <_kill_r+0x20>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	f7fa f865 	bl	8000ad8 <_kill>
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d102      	bne.n	8006a18 <_kill_r+0x1c>
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	b103      	cbz	r3, 8006a18 <_kill_r+0x1c>
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200011bc 	.word	0x200011bc

08006a20 <_getpid_r>:
 8006a20:	f7fa b852 	b.w	8000ac8 <_getpid>

08006a24 <_malloc_usable_size_r>:
 8006a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a28:	1f18      	subs	r0, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfbc      	itt	lt
 8006a2e:	580b      	ldrlt	r3, [r1, r0]
 8006a30:	18c0      	addlt	r0, r0, r3
 8006a32:	4770      	bx	lr

08006a34 <__swhatbuf_r>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	460c      	mov	r4, r1
 8006a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	b096      	sub	sp, #88	@ 0x58
 8006a40:	4615      	mov	r5, r2
 8006a42:	461e      	mov	r6, r3
 8006a44:	da0d      	bge.n	8006a62 <__swhatbuf_r+0x2e>
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a4c:	f04f 0100 	mov.w	r1, #0
 8006a50:	bf14      	ite	ne
 8006a52:	2340      	movne	r3, #64	@ 0x40
 8006a54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a58:	2000      	movs	r0, #0
 8006a5a:	6031      	str	r1, [r6, #0]
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	b016      	add	sp, #88	@ 0x58
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	466a      	mov	r2, sp
 8006a64:	f000 f848 	bl	8006af8 <_fstat_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dbec      	blt.n	8006a46 <__swhatbuf_r+0x12>
 8006a6c:	9901      	ldr	r1, [sp, #4]
 8006a6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a76:	4259      	negs	r1, r3
 8006a78:	4159      	adcs	r1, r3
 8006a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a7e:	e7eb      	b.n	8006a58 <__swhatbuf_r+0x24>

08006a80 <__smakebuf_r>:
 8006a80:	898b      	ldrh	r3, [r1, #12]
 8006a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a84:	079d      	lsls	r5, r3, #30
 8006a86:	4606      	mov	r6, r0
 8006a88:	460c      	mov	r4, r1
 8006a8a:	d507      	bpl.n	8006a9c <__smakebuf_r+0x1c>
 8006a8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	2301      	movs	r3, #1
 8006a96:	6163      	str	r3, [r4, #20]
 8006a98:	b003      	add	sp, #12
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	ab01      	add	r3, sp, #4
 8006a9e:	466a      	mov	r2, sp
 8006aa0:	f7ff ffc8 	bl	8006a34 <__swhatbuf_r>
 8006aa4:	9f00      	ldr	r7, [sp, #0]
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff f914 	bl	8005cd8 <_malloc_r>
 8006ab0:	b948      	cbnz	r0, 8006ac6 <__smakebuf_r+0x46>
 8006ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab6:	059a      	lsls	r2, r3, #22
 8006ab8:	d4ee      	bmi.n	8006a98 <__smakebuf_r+0x18>
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	f043 0302 	orr.w	r3, r3, #2
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	e7e2      	b.n	8006a8c <__smakebuf_r+0xc>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	6020      	str	r0, [r4, #0]
 8006aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ad6:	b15b      	cbz	r3, 8006af0 <__smakebuf_r+0x70>
 8006ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 f81d 	bl	8006b1c <_isatty_r>
 8006ae2:	b128      	cbz	r0, 8006af0 <__smakebuf_r+0x70>
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	431d      	orrs	r5, r3
 8006af4:	81a5      	strh	r5, [r4, #12]
 8006af6:	e7cf      	b.n	8006a98 <__smakebuf_r+0x18>

08006af8 <_fstat_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	@ (8006b18 <_fstat_r+0x20>)
 8006afc:	2300      	movs	r3, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	f7fa f847 	bl	8000b98 <_fstat>
 8006b0a:	1c43      	adds	r3, r0, #1
 8006b0c:	d102      	bne.n	8006b14 <_fstat_r+0x1c>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	b103      	cbz	r3, 8006b14 <_fstat_r+0x1c>
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	200011bc 	.word	0x200011bc

08006b1c <_isatty_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d06      	ldr	r5, [pc, #24]	@ (8006b38 <_isatty_r+0x1c>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	f7fa f846 	bl	8000bb8 <_isatty>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_isatty_r+0x1a>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_isatty_r+0x1a>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	200011bc 	.word	0x200011bc

08006b3c <_init>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr

08006b48 <_fini>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr
