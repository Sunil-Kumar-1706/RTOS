
06_Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056a8  080056a8  000066a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b0  080056b0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b0  080056b0  000066b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056b4  080056b4  000066b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080056b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  20000060  08005718  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  08005718  000071f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f46e  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002621  00000000  00000000  000164fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00018b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a75  00000000  00000000  000198d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002754c  00000000  00000000  0001a345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa4c  00000000  00000000  00041891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f03ee  00000000  00000000  000512dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001416cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  00141710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00145308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005544 	.word	0x08005544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005544 	.word	0x08005544

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	200000d0 	.word	0x200000d0

080005e0 <EXTI15_10_IRQHandler>:

// ------------------- USER FUNCTIONS -------------------

// External interrupt handler (button on pin 13)
void EXTI15_10_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13); // Clear EXTI interrupt
 80005e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005e8:	f000 feca 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  priority_switch = TRUE;                // Set flag for switching priorities
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <EXTI15_10_IRQHandler+0x18>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000364 	.word	0x20000364

080005fc <uart_msg>:

// Send a string over UART2
void uart_msg(char *s)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff fde3 	bl	80001d0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	4803      	ldr	r0, [pc, #12]	@ (8000624 <uart_msg+0x28>)
 8000616:	f002 fa45 	bl	8002aa4 <HAL_UART_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200002d0 	.word	0x200002d0

08000628 <rtos_delay>:

// Simple delay using RTOS tick count
void rtos_delay(uint32_t delay_in_ms)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tick_count_local = xTaskGetTickCount();  // Current tick
 8000630:	f003 fc68 	bl	8003f04 <xTaskGetTickCount>
 8000634:	60f8      	str	r0, [r7, #12]
  uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000; // ms to ticks
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063c:	fb02 f303 	mul.w	r3, r2, r3
 8000640:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <rtos_delay+0x40>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	099b      	lsrs	r3, r3, #6
 8000648:	60bb      	str	r3, [r7, #8]

  while (xTaskGetTickCount() < (tick_count_local + delay_in_ticks)); // Wait
 800064a:	bf00      	nop
 800064c:	f003 fc5a 	bl	8003f04 <xTaskGetTickCount>
 8000650:	4601      	mov	r1, r0
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	4299      	cmp	r1, r3
 800065a:	d3f7      	bcc.n	800064c <rtos_delay+0x24>
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	10624dd3 	.word	0x10624dd3

0800066c <task1>:

// ------------------- TASK-1 -------------------
void task1(void *p)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  UBaseType_t p1, p2; // To store priorities

  uart_msg("TASK-1 RUNNING\r\n");
 8000674:	4825      	ldr	r0, [pc, #148]	@ (800070c <task1+0xa0>)
 8000676:	f7ff ffc1 	bl	80005fc <uart_msg>
  sprintf(msg, "TASK-1 priority %ld\r\n", uxTaskPriorityGet(xTaskHandle1));
 800067a:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <task1+0xa4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fa6e 	bl	8003b60 <uxTaskPriorityGet>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4922      	ldr	r1, [pc, #136]	@ (8000714 <task1+0xa8>)
 800068a:	4823      	ldr	r0, [pc, #140]	@ (8000718 <task1+0xac>)
 800068c:	f004 faba 	bl	8004c04 <siprintf>
  uart_msg(msg);
 8000690:	4821      	ldr	r0, [pc, #132]	@ (8000718 <task1+0xac>)
 8000692:	f7ff ffb3 	bl	80005fc <uart_msg>
  sprintf(msg, "TASK-2 priority %ld\r\n", uxTaskPriorityGet(xTaskHandle2));
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <task1+0xb0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fa60 	bl	8003b60 <uxTaskPriorityGet>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	491e      	ldr	r1, [pc, #120]	@ (8000720 <task1+0xb4>)
 80006a6:	481c      	ldr	r0, [pc, #112]	@ (8000718 <task1+0xac>)
 80006a8:	f004 faac 	bl	8004c04 <siprintf>
  uart_msg(msg);
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <task1+0xac>)
 80006ae:	f7ff ffa5 	bl	80005fc <uart_msg>

  while (1)
  {
    if (priority_switch) // If button pressed
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <task1+0xb8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d01e      	beq.n	80006f8 <task1+0x8c>
    {
      priority_switch = FALSE;  // Reset flag
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <task1+0xb8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
      uart_msg("Priority switch by TASK-1\r\n");
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <task1+0xbc>)
 80006c2:	f7ff ff9b 	bl	80005fc <uart_msg>

      p1 = uxTaskPriorityGet(xTaskHandle1); // Task1 priority
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <task1+0xa4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fa48 	bl	8003b60 <uxTaskPriorityGet>
 80006d0:	60f8      	str	r0, [r7, #12]
      p2 = uxTaskPriorityGet(xTaskHandle2); // Task2 priority
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <task1+0xb0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fa42 	bl	8003b60 <uxTaskPriorityGet>
 80006dc:	60b8      	str	r0, [r7, #8]

      vTaskPrioritySet(xTaskHandle1, p2);   // Swap priorities
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <task1+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fa55 	bl	8003b94 <vTaskPrioritySet>
      vTaskPrioritySet(xTaskHandle2, p1);
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <task1+0xb0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68f9      	ldr	r1, [r7, #12]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fa4f 	bl	8003b94 <vTaskPrioritySet>
 80006f6:	e7dc      	b.n	80006b2 <task1+0x46>
    }
    else
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 80006f8:	2120      	movs	r1, #32
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fe:	f000 fe25 	bl	800134c <HAL_GPIO_TogglePin>
      rtos_delay(200);                       // 200 ms delay
 8000702:	20c8      	movs	r0, #200	@ 0xc8
 8000704:	f7ff ff90 	bl	8000628 <rtos_delay>
    if (priority_switch) // If button pressed
 8000708:	e7d3      	b.n	80006b2 <task1+0x46>
 800070a:	bf00      	nop
 800070c:	0800555c 	.word	0x0800555c
 8000710:	2000035c 	.word	0x2000035c
 8000714:	08005570 	.word	0x08005570
 8000718:	20000368 	.word	0x20000368
 800071c:	20000360 	.word	0x20000360
 8000720:	08005588 	.word	0x08005588
 8000724:	20000364 	.word	0x20000364
 8000728:	080055a0 	.word	0x080055a0

0800072c <task2>:
  }
}

// ------------------- TASK-2 -------------------
void task2(void *p)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  UBaseType_t p1, p2; // To store priorities

  uart_msg("TASK-2 RUNNING\r\n");
 8000734:	4825      	ldr	r0, [pc, #148]	@ (80007cc <task2+0xa0>)
 8000736:	f7ff ff61 	bl	80005fc <uart_msg>
  sprintf(msg, "TASK-1 priority %ld\r\n", uxTaskPriorityGet(xTaskHandle1));
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <task2+0xa4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fa0e 	bl	8003b60 <uxTaskPriorityGet>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4922      	ldr	r1, [pc, #136]	@ (80007d4 <task2+0xa8>)
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <task2+0xac>)
 800074c:	f004 fa5a 	bl	8004c04 <siprintf>
  uart_msg(msg);
 8000750:	4821      	ldr	r0, [pc, #132]	@ (80007d8 <task2+0xac>)
 8000752:	f7ff ff53 	bl	80005fc <uart_msg>
  sprintf(msg, "TASK-2 priority %ld\r\n", uxTaskPriorityGet(xTaskHandle2));
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <task2+0xb0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fa00 	bl	8003b60 <uxTaskPriorityGet>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	491e      	ldr	r1, [pc, #120]	@ (80007e0 <task2+0xb4>)
 8000766:	481c      	ldr	r0, [pc, #112]	@ (80007d8 <task2+0xac>)
 8000768:	f004 fa4c 	bl	8004c04 <siprintf>
  uart_msg(msg);
 800076c:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <task2+0xac>)
 800076e:	f7ff ff45 	bl	80005fc <uart_msg>

  while (1)
  {
    if (priority_switch) // If button pressed
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <task2+0xb8>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d01e      	beq.n	80007b8 <task2+0x8c>
    {
      priority_switch = FALSE;  // Reset flag
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <task2+0xb8>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
      uart_msg("Priority switch by TASK-2\r\n");
 8000780:	4819      	ldr	r0, [pc, #100]	@ (80007e8 <task2+0xbc>)
 8000782:	f7ff ff3b 	bl	80005fc <uart_msg>

      p1 = uxTaskPriorityGet(xTaskHandle1); // Task1 priority
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <task2+0xa4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f003 f9e8 	bl	8003b60 <uxTaskPriorityGet>
 8000790:	60f8      	str	r0, [r7, #12]
      p2 = uxTaskPriorityGet(xTaskHandle2); // Task2 priority
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <task2+0xb0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f9e2 	bl	8003b60 <uxTaskPriorityGet>
 800079c:	60b8      	str	r0, [r7, #8]

      vTaskPrioritySet(xTaskHandle1, p2);   // Swap priorities
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <task2+0xa4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68b9      	ldr	r1, [r7, #8]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 f9f5 	bl	8003b94 <vTaskPrioritySet>
      vTaskPrioritySet(xTaskHandle2, p1);
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <task2+0xb0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68f9      	ldr	r1, [r7, #12]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 f9ef 	bl	8003b94 <vTaskPrioritySet>
 80007b6:	e7dc      	b.n	8000772 <task2+0x46>
    }
    else
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f000 fdc5 	bl	800134c <HAL_GPIO_TogglePin>
      rtos_delay(1000);                      // 1 second delay
 80007c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c6:	f7ff ff2f 	bl	8000628 <rtos_delay>
    if (priority_switch) // If button pressed
 80007ca:	e7d2      	b.n	8000772 <task2+0x46>
 80007cc:	080055bc 	.word	0x080055bc
 80007d0:	2000035c 	.word	0x2000035c
 80007d4:	08005570 	.word	0x08005570
 80007d8:	20000368 	.word	0x20000368
 80007dc:	20000360 	.word	0x20000360
 80007e0:	08005588 	.word	0x08005588
 80007e4:	20000364 	.word	0x20000364
 80007e8:	080055d0 	.word	0x080055d0

080007ec <main>:
  }
}

// ------------------- MAIN FUNCTION -------------------
int main(void)
{
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af02      	add	r7, sp, #8
  HAL_Init();               // Initialize HAL
 80007f2:	f000 fa5b 	bl	8000cac <HAL_Init>
  SystemClock_Config();     // Configure system clock
 80007f6:	f000 f83d 	bl	8000874 <SystemClock_Config>
  MX_GPIO_Init();           // Init GPIO
 80007fa:	f000 f8bd 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();    // Init UART2
 80007fe:	f000 f88b 	bl	8000918 <MX_USART2_UART_Init>

  // Create default task
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <main+0x68>)
 8000804:	1d3c      	adds	r4, r7, #4
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f002 febf 	bl	800359c <osThreadCreate>
 800081e:	4603      	mov	r3, r0
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <main+0x6c>)
 8000822:	6013      	str	r3, [r2, #0]

  // Create custom FreeRTOS tasks
  xTaskCreate(task1, "TASK1", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle1);
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <main+0x70>)
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	2302      	movs	r3, #2
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2300      	movs	r3, #0
 800082e:	2280      	movs	r2, #128	@ 0x80
 8000830:	490b      	ldr	r1, [pc, #44]	@ (8000860 <main+0x74>)
 8000832:	480c      	ldr	r0, [pc, #48]	@ (8000864 <main+0x78>)
 8000834:	f003 f826 	bl	8003884 <xTaskCreate>
  xTaskCreate(task2, "TASK2", configMINIMAL_STACK_SIZE, NULL, 3, &xTaskHandle2);
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <main+0x7c>)
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	2303      	movs	r3, #3
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2280      	movs	r2, #128	@ 0x80
 8000844:	4909      	ldr	r1, [pc, #36]	@ (800086c <main+0x80>)
 8000846:	480a      	ldr	r0, [pc, #40]	@ (8000870 <main+0x84>)
 8000848:	f003 f81c 	bl	8003884 <xTaskCreate>

  osKernelStart();          // Start RTOS scheduler
 800084c:	f002 fe9f 	bl	800358e <osKernelStart>

  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <main+0x64>
 8000854:	08005608 	.word	0x08005608
 8000858:	20000358 	.word	0x20000358
 800085c:	2000035c 	.word	0x2000035c
 8000860:	080055ec 	.word	0x080055ec
 8000864:	0800066d 	.word	0x0800066d
 8000868:	20000360 	.word	0x20000360
 800086c:	080055f4 	.word	0x080055f4
 8000870:	0800072d 	.word	0x0800072d

08000874 <SystemClock_Config>:
  }             // Should never reach here
}

// ------------------- CLOCK CONFIG -------------------
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b096      	sub	sp, #88	@ 0x58
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2244      	movs	r2, #68	@ 0x44
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f9e0 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000896:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800089a:	f000 fda3 	bl	80013e4 <HAL_PWREx_ControlVoltageScaling>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x34>
    Error_Handler();
 80008a4:	f000 f8de 	bl	8000a64 <Error_Handler>

  // Configure HSI + PLL
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b2:	2310      	movs	r3, #16
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ba:	2302      	movs	r3, #2
 80008bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008c2:	230a      	movs	r3, #10
 80008c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c6:	2307      	movs	r3, #7
 80008c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fdda 	bl	8001490 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x72>
    Error_Handler();
 80008e2:	f000 f8bf 	bl	8000a64 <Error_Handler>

  // Configure AHB and APB clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f9a2 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x9a>
    Error_Handler();
 800090a:	f000 f8ab 	bl	8000a64 <Error_Handler>
}
 800090e:	bf00      	nop
 8000910:	3758      	adds	r7, #88	@ 0x58
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <MX_USART2_UART_Init>:

// ------------------- UART2 INIT -------------------
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <MX_USART2_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART2_UART_Init+0x58>)
 800095c:	f002 f854 	bl	8002a08 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x52>
    Error_Handler();
 8000966:	f000 f87d 	bl	8000a64 <Error_Handler>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200002d0 	.word	0x200002d0
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:

// ------------------- GPIO INIT -------------------
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  // Enable clocks
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	4a2e      	ldr	r2, [pc, #184]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a28      	ldr	r2, [pc, #160]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b23      	ldr	r3, [pc, #140]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a1c      	ldr	r2, [pc, #112]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_GPIO_Init+0xd4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  // LED pin (PA5) → Output
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f000 fc91 	bl	800131c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fa:	2320      	movs	r3, #32
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f000 fad8 	bl	8000fc8 <HAL_GPIO_Init>

  // Button pin (PC13) → External interrupt
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <MX_GPIO_Init+0xd8>)
 8000a30:	f000 faca 	bl	8000fc8 <HAL_GPIO_Init>

  // Enable EXTI interrupt for button
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2105      	movs	r1, #5
 8000a38:	2028      	movs	r0, #40	@ 0x28
 8000a3a:	f000 fa8e 	bl	8000f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3e:	2028      	movs	r0, #40	@ 0x28
 8000a40:	f000 faa7 	bl	8000f92 <HAL_NVIC_EnableIRQ>
}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000800 	.word	0x48000800

08000a54 <StartDefaultTask>:

// ------------------- DEFAULT TASK -------------------
void StartDefaultTask(void const * argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    osDelay(1); // Small delay
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f002 fde9 	bl	8003634 <osDelay>
 8000a62:	e7fb      	b.n	8000a5c <StartDefaultTask+0x8>

08000a64 <Error_Handler>:
  }
}

// ------------------- ERROR HANDLER -------------------
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  __disable_irq(); // Disable interrupts
  while (1) { }    // Stay here
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7a:	4a10      	ldr	r2, [pc, #64]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	f06f 0001 	mvn.w	r0, #1
 8000aae:	f000 fa54 	bl	8000f5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2288      	movs	r2, #136	@ 0x88
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 f8b1 	bl	8004c48 <memset>
  if(huart->Instance==USART2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a21      	ldr	r2, [pc, #132]	@ (8000b70 <HAL_UART_MspInit+0xb0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d13b      	bne.n	8000b68 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fac7 	bl	8002090 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b08:	f7ff ffac 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b10:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b54:	2307      	movs	r3, #7
 8000b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f000 fa30 	bl	8000fc8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b68:	bf00      	nop
 8000b6a:	37b0      	adds	r7, #176	@ 0xb0
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f8d7 	bl	8000d64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb6:	f003 fba1 	bl	80042fc <xTaskGetSchedulerState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d001      	beq.n	8000bc4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc0:	f003 fde2 	bl	8004788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 f82e 	bl	8004c58 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20018000 	.word	0x20018000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	2000039c 	.word	0x2000039c
 8000c30:	200011f8 	.word	0x200011f8

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f003 ffed 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fdaf 	bl	80007ec <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c9c:	080056b8 	.word	0x080056b8
  ldr r2, =_sbss
 8000ca0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ca4:	200011f8 	.word	0x200011f8

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f93e 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f000 f80f 	bl	8000cec <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e001      	b.n	8000cde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cda:	f7ff fec9 	bl	8000a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f949 	bl	8000fae <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f913 	bl	8000f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200003a0 	.word	0x200003a0

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200003a0 	.word	0x200003a0

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	@ (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff29 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff3e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff31 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd6:	e17f      	b.n	80012d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8171 	beq.w	80012d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d005      	beq.n	8001008 <HAL_GPIO_Init+0x40>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 0201 	and.w	r2, r3, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b03      	cmp	r3, #3
 8001074:	d118      	bne.n	80010a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80ac 	beq.w	80012d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b5f      	ldr	r3, [pc, #380]	@ (80012f8 <HAL_GPIO_Init+0x330>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117e:	4a5e      	ldr	r2, [pc, #376]	@ (80012f8 <HAL_GPIO_Init+0x330>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6613      	str	r3, [r2, #96]	@ 0x60
 8001186:	4b5c      	ldr	r3, [pc, #368]	@ (80012f8 <HAL_GPIO_Init+0x330>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001192:	4a5a      	ldr	r2, [pc, #360]	@ (80012fc <HAL_GPIO_Init+0x334>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x242>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001300 <HAL_GPIO_Init+0x338>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x23e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001304 <HAL_GPIO_Init+0x33c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x23a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001308 <HAL_GPIO_Init+0x340>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x236>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	@ (800130c <HAL_GPIO_Init+0x344>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x232>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001310 <HAL_GPIO_Init+0x348>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x22e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001314 <HAL_GPIO_Init+0x34c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x22a>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x244>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x244>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x244>
 800120a:	2300      	movs	r3, #0
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121c:	4937      	ldr	r1, [pc, #220]	@ (80012fc <HAL_GPIO_Init+0x334>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <HAL_GPIO_Init+0x350>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800124e:	4a32      	ldr	r2, [pc, #200]	@ (8001318 <HAL_GPIO_Init+0x350>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001254:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <HAL_GPIO_Init+0x350>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001278:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <HAL_GPIO_Init+0x350>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_GPIO_Init+0x350>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <HAL_GPIO_Init+0x350>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_GPIO_Init+0x350>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <HAL_GPIO_Init+0x350>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f ae78 	bne.w	8000fd8 <HAL_GPIO_Init+0x10>
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4013      	ands	r3, r2
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43d9      	mvns	r1, r3
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	400b      	ands	r3, r1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f806 	bl	80013b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000

080013e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f2:	d130      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f4:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001400:	d038      	beq.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140a:	4a1e      	ldr	r2, [pc, #120]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001410:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2232      	movs	r2, #50	@ 0x32
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9b      	lsrs	r3, r3, #18
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001428:	e002      	b.n	8001430 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3b01      	subs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143c:	d102      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x60>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f2      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001450:	d110      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e00f      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001462:	d007      	beq.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800146c:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001472:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40007000 	.word	0x40007000
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e3ca      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a2:	4b97      	ldr	r3, [pc, #604]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ac:	4b94      	ldr	r3, [pc, #592]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80e4 	beq.w	800168c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_RCC_OscConfig+0x4a>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	f040 808b 	bne.w	80015e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	f040 8087 	bne.w	80015e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014da:	4b89      	ldr	r3, [pc, #548]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x62>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e3a2      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1a      	ldr	r2, [r3, #32]
 80014f6:	4b82      	ldr	r3, [pc, #520]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_RCC_OscConfig+0x7c>
 8001502:	4b7f      	ldr	r3, [pc, #508]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800150a:	e005      	b.n	8001518 <HAL_RCC_OscConfig+0x88>
 800150c:	4b7c      	ldr	r3, [pc, #496]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001518:	4293      	cmp	r3, r2
 800151a:	d223      	bcs.n	8001564 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fd55 	bl	8001fd0 <RCC_SetFlashLatencyFromMSIRange>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e383      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001530:	4b73      	ldr	r3, [pc, #460]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a72      	ldr	r2, [pc, #456]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b70      	ldr	r3, [pc, #448]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	496d      	ldr	r1, [pc, #436]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154e:	4b6c      	ldr	r3, [pc, #432]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	4968      	ldr	r1, [pc, #416]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
 8001562:	e025      	b.n	80015b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a65      	ldr	r2, [pc, #404]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b63      	ldr	r3, [pc, #396]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4960      	ldr	r1, [pc, #384]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001582:	4b5f      	ldr	r3, [pc, #380]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	495b      	ldr	r1, [pc, #364]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd15 	bl	8001fd0 <RCC_SetFlashLatencyFromMSIRange>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e343      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015b0:	f000 fc4a 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b52      	ldr	r3, [pc, #328]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	4950      	ldr	r1, [pc, #320]	@ (8001704 <HAL_RCC_OscConfig+0x274>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001708 <HAL_RCC_OscConfig+0x278>)
 80015ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015d0:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <HAL_RCC_OscConfig+0x27c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb89 	bl	8000cec <HAL_InitTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d052      	beq.n	800168a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	e327      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d032      	beq.n	8001656 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015f0:	4b43      	ldr	r3, [pc, #268]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a42      	ldr	r2, [pc, #264]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fbc6 	bl	8000d8c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001604:	f7ff fbc2 	bl	8000d8c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e310      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001616:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001622:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a36      	ldr	r2, [pc, #216]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4931      	ldr	r1, [pc, #196]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	492c      	ldr	r1, [pc, #176]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e01a      	b.n	800168c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb93 	bl	8000d8c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166a:	f7ff fb8f 	bl	8000d8c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e2dd      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800167c:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x1da>
 8001688:	e000      	b.n	800168c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d074      	beq.n	8001782 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x21a>
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b0c      	cmp	r3, #12
 80016a2:	d10e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d10b      	bne.n	80016c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d064      	beq.n	8001780 <HAL_RCC_OscConfig+0x2f0>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d160      	bne.n	8001780 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e2ba      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x24a>
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e026      	b.n	8001728 <HAL_RCC_OscConfig+0x298>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e2:	d115      	bne.n	8001710 <HAL_RCC_OscConfig+0x280>
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a02      	ldr	r2, [pc, #8]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x298>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	0800562c 	.word	0x0800562c
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004
 8001710:	4ba0      	ldr	r3, [pc, #640]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a9f      	ldr	r2, [pc, #636]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b9d      	ldr	r3, [pc, #628]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a9c      	ldr	r2, [pc, #624]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fb2c 	bl	8000d8c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fb28 	bl	8000d8c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e276      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	4b92      	ldr	r3, [pc, #584]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x2a8>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fb18 	bl	8000d8c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fb14 	bl	8000d8c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e262      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001772:	4b88      	ldr	r3, [pc, #544]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x2d0>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d060      	beq.n	8001850 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x310>
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d119      	bne.n	80017ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d116      	bne.n	80017ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x328>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e23f      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b76      	ldr	r3, [pc, #472]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	4973      	ldr	r1, [pc, #460]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017cc:	e040      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d023      	beq.n	800181e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6e      	ldr	r2, [pc, #440]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fad3 	bl	8000d8c <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff facf 	bl	8000d8c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e21d      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fc:	4b65      	ldr	r3, [pc, #404]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b62      	ldr	r3, [pc, #392]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	495f      	ldr	r1, [pc, #380]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e018      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b5d      	ldr	r3, [pc, #372]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5c      	ldr	r2, [pc, #368]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff faaf 	bl	8000d8c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff faab 	bl	8000d8c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1f9      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001844:	4b53      	ldr	r3, [pc, #332]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01c      	beq.n	800189e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001864:	4b4b      	ldr	r3, [pc, #300]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186a:	4a4a      	ldr	r2, [pc, #296]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7ff fa8a 	bl	8000d8c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fa86 	bl	8000d8c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1d4      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ef      	beq.n	800187c <HAL_RCC_OscConfig+0x3ec>
 800189c:	e01b      	b.n	80018d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189e:	4b3d      	ldr	r3, [pc, #244]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff fa6d 	bl	8000d8c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b6:	f7ff fa69 	bl	8000d8c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1b7      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c8:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ef      	bne.n	80018b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80a6 	beq.w	8001a30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10d      	bne.n	8001910 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001900:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190c:	2301      	movs	r3, #1
 800190e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <HAL_RCC_OscConfig+0x508>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d118      	bne.n	800194e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800191c:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <HAL_RCC_OscConfig+0x508>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1d      	ldr	r2, [pc, #116]	@ (8001998 <HAL_RCC_OscConfig+0x508>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001926:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001928:	f7ff fa30 	bl	8000d8c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001930:	f7ff fa2c 	bl	8000d8c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e17a      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_RCC_OscConfig+0x508>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x4d8>
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001966:	e029      	b.n	80019bc <HAL_RCC_OscConfig+0x52c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d115      	bne.n	800199c <HAL_RCC_OscConfig+0x50c>
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001986:	4a03      	ldr	r2, [pc, #12]	@ (8001994 <HAL_RCC_OscConfig+0x504>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001990:	e014      	b.n	80019bc <HAL_RCC_OscConfig+0x52c>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	4a9b      	ldr	r2, [pc, #620]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ac:	4b98      	ldr	r3, [pc, #608]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b2:	4a97      	ldr	r2, [pc, #604]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d016      	beq.n	80019f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9e2 	bl	8000d8c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f9de 	bl	8000d8c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e12a      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ed      	beq.n	80019cc <HAL_RCC_OscConfig+0x53c>
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff f9cb 	bl	8000d8c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff f9c7 	bl	8000d8c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e113      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a10:	4b7f      	ldr	r3, [pc, #508]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ed      	bne.n	80019fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a24:	4b7a      	ldr	r3, [pc, #488]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a28:	4a79      	ldr	r2, [pc, #484]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80fe 	beq.w	8001c36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	f040 80d0 	bne.w	8001be4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a44:	4b72      	ldr	r3, [pc, #456]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d130      	bne.n	8001aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	3b01      	subs	r3, #1
 8001a64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d127      	bne.n	8001aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d11f      	bne.n	8001aba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a84:	2a07      	cmp	r2, #7
 8001a86:	bf14      	ite	ne
 8001a88:	2201      	movne	r2, #1
 8001a8a:	2200      	moveq	r2, #0
 8001a8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d113      	bne.n	8001aba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d06e      	beq.n	8001b98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d069      	beq.n	8001b94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ac0:	4b53      	ldr	r3, [pc, #332]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001acc:	4b50      	ldr	r3, [pc, #320]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0ad      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001adc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae8:	f7ff f950 	bl	8000d8c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f94c 	bl	8000d8c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e09a      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b02:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0e:	4b40      	ldr	r3, [pc, #256]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	4b40      	ldr	r3, [pc, #256]	@ (8001c14 <HAL_RCC_OscConfig+0x784>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b1e:	3a01      	subs	r2, #1
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	4311      	orrs	r1, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b28:	0212      	lsls	r2, r2, #8
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b30:	0852      	lsrs	r2, r2, #1
 8001b32:	3a01      	subs	r2, #1
 8001b34:	0552      	lsls	r2, r2, #21
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b3c:	0852      	lsrs	r2, r2, #1
 8001b3e:	3a01      	subs	r2, #1
 8001b40:	0652      	lsls	r2, r2, #25
 8001b42:	4311      	orrs	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b48:	0912      	lsrs	r2, r2, #4
 8001b4a:	0452      	lsls	r2, r2, #17
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	4930      	ldr	r1, [pc, #192]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b54:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2d      	ldr	r2, [pc, #180]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b60:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a2a      	ldr	r2, [pc, #168]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b6c:	f7ff f90e 	bl	8000d8c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f90a 	bl	8000d8c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e058      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b92:	e050      	b.n	8001c36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e04f      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d148      	bne.n	8001c36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bbc:	f7ff f8e6 	bl	8000d8c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f8e2 	bl	8000d8c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e030      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x734>
 8001be2:	e028      	b.n	8001c36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d023      	beq.n	8001c32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f8c9 	bl	8000d8c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	e00c      	b.n	8001c18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f8c5 	bl	8000d8c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d905      	bls.n	8001c18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e013      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_OscConfig+0x7b0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ec      	bne.n	8001bfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_OscConfig+0x7b0>)
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4905      	ldr	r1, [pc, #20]	@ (8001c40 <HAL_RCC_OscConfig+0x7b0>)
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_RCC_OscConfig+0x7b4>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
 8001c30:	e001      	b.n	8001c36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	feeefffc 	.word	0xfeeefffc

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0e7      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b75      	ldr	r3, [pc, #468]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b72      	ldr	r3, [pc, #456]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4970      	ldr	r1, [pc, #448]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cf      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	4b66      	ldr	r3, [pc, #408]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d908      	bls.n	8001cba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4960      	ldr	r1, [pc, #384]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d04c      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d121      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0a6      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	4b54      	ldr	r3, [pc, #336]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e09a      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08e      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e086      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b46      	ldr	r3, [pc, #280]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4943      	ldr	r1, [pc, #268]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff f82c 	bl	8000d8c <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f828 	bl	8000d8c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e06e      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d010      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d208      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	492b      	ldr	r1, [pc, #172]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d210      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 0207 	bic.w	r2, r3, #7
 8001da4:	4923      	ldr	r1, [pc, #140]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <HAL_RCC_ClockConfig+0x1ec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e036      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dca:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4918      	ldr	r1, [pc, #96]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4910      	ldr	r1, [pc, #64]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dfc:	f000 f824 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	490b      	ldr	r1, [pc, #44]	@ (8001e3c <HAL_RCC_ClockConfig+0x1f4>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_RCC_ClockConfig+0x1fc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff63 	bl	8000cec <HAL_InitTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	0800562c 	.word	0x0800562c
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e60:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x34>
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d11e      	bne.n	8001eba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e7c:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e88:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e005      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10d      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	e004      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ecc:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ece:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d134      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d003      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0xa6>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d003      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xac>
 8001eec:	e005      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef0:	617b      	str	r3, [r7, #20]
      break;
 8001ef2:	e005      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ef6:	617b      	str	r3, [r7, #20]
      break;
 8001ef8:	e002      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	617b      	str	r3, [r7, #20]
      break;
 8001efe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	fb03 f202 	mul.w	r2, r3, r2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	0e5b      	lsrs	r3, r3, #25
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	3301      	adds	r3, #1
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f40:	69bb      	ldr	r3, [r7, #24]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	@ 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08005644 	.word	0x08005644
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4904      	ldr	r1, [pc, #16]	@ (8001fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	0800563c 	.word	0x0800563c

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa8:	f7ff ffda 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0adb      	lsrs	r3, r3, #11
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	0800563c 	.word	0x0800563c

08001fd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fe8:	f7ff f9ee 	bl	80013c8 <HAL_PWREx_GetVoltageRange>
 8001fec:	6178      	str	r0, [r7, #20]
 8001fee:	e014      	b.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	4a24      	ldr	r2, [pc, #144]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffc:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002008:	f7ff f9de 	bl	80013c8 <HAL_PWREx_GetVoltageRange>
 800200c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002018:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002020:	d10b      	bne.n	800203a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b80      	cmp	r3, #128	@ 0x80
 8002026:	d919      	bls.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2ba0      	cmp	r3, #160	@ 0xa0
 800202c:	d902      	bls.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800202e:	2302      	movs	r3, #2
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	e013      	b.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002034:	2301      	movs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e010      	b.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b80      	cmp	r3, #128	@ 0x80
 800203e:	d902      	bls.n	8002046 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002040:	2303      	movs	r3, #3
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e00a      	b.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b80      	cmp	r3, #128	@ 0x80
 800204a:	d102      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800204c:	2302      	movs	r3, #2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e004      	b.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b70      	cmp	r3, #112	@ 0x70
 8002056:	d101      	bne.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002058:	2301      	movs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 0207 	bic.w	r2, r3, #7
 8002064:	4909      	ldr	r1, [pc, #36]	@ (800208c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002098:	2300      	movs	r3, #0
 800209a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800209c:	2300      	movs	r3, #0
 800209e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d041      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020b4:	d02a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020ba:	d824      	bhi.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020c0:	d008      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020c6:	d81e      	bhi.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020d0:	d010      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020d2:	e018      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020d4:	4b86      	ldr	r3, [pc, #536]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a85      	ldr	r2, [pc, #532]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e0:	e015      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fabb 	bl	8002664 <RCCEx_PLLSAI1_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f2:	e00c      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3320      	adds	r3, #32
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fba6 	bl	800284c <RCCEx_PLLSAI2_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002104:	e003      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	74fb      	strb	r3, [r7, #19]
      break;
 800210a:	e000      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800210c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10b      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002114:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002122:	4973      	ldr	r1, [pc, #460]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800212a:	e001      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d041      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002140:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002144:	d02a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800214a:	d824      	bhi.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800214c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002150:	d008      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002156:	d81e      	bhi.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002160:	d010      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002162:	e018      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002164:	4b62      	ldr	r3, [pc, #392]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a61      	ldr	r2, [pc, #388]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002170:	e015      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fa73 	bl	8002664 <RCCEx_PLLSAI1_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002182:	e00c      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3320      	adds	r3, #32
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fb5e 	bl	800284c <RCCEx_PLLSAI2_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002194:	e003      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	74fb      	strb	r3, [r7, #19]
      break;
 800219a:	e000      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800219c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021a4:	4b52      	ldr	r3, [pc, #328]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021b2:	494f      	ldr	r1, [pc, #316]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021ba:	e001      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a0 	beq.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00d      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	4a40      	ldr	r2, [pc, #256]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f4:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002200:	2301      	movs	r3, #1
 8002202:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002204:	4b3b      	ldr	r3, [pc, #236]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3a      	ldr	r2, [pc, #232]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002210:	f7fe fdbc 	bl	8000d8c <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002216:	e009      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe fdb8 	bl	8000d8c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d902      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	74fb      	strb	r3, [r7, #19]
        break;
 800222a:	e005      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800222c:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ef      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d15c      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800223e:	4b2c      	ldr	r3, [pc, #176]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002248:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01f      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	d019      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800225c:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002266:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002268:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a20      	ldr	r2, [pc, #128]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fd77 	bl	8000d8c <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a0:	e00b      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fd73 	bl	8000d8c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d902      	bls.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	74fb      	strb	r3, [r7, #19]
            break;
 80022b8:	e006      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ec      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022de:	4904      	ldr	r1, [pc, #16]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022e6:	e009      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
 80022ec:	e006      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fc:	7c7b      	ldrb	r3, [r7, #17]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b9e      	ldr	r3, [pc, #632]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	4a9d      	ldr	r2, [pc, #628]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800230c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800231a:	4b98      	ldr	r3, [pc, #608]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002320:	f023 0203 	bic.w	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002328:	4994      	ldr	r1, [pc, #592]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233c:	4b8f      	ldr	r3, [pc, #572]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	f023 020c 	bic.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234a:	498c      	ldr	r1, [pc, #560]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800235e:	4b87      	ldr	r3, [pc, #540]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002364:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	4983      	ldr	r1, [pc, #524]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002380:	4b7e      	ldr	r3, [pc, #504]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	497b      	ldr	r1, [pc, #492]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023a2:	4b76      	ldr	r3, [pc, #472]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b0:	4972      	ldr	r1, [pc, #456]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023c4:	4b6d      	ldr	r3, [pc, #436]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	496a      	ldr	r1, [pc, #424]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e6:	4b65      	ldr	r3, [pc, #404]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f4:	4961      	ldr	r1, [pc, #388]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002408:	4b5c      	ldr	r3, [pc, #368]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	4959      	ldr	r1, [pc, #356]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002430:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002438:	4950      	ldr	r1, [pc, #320]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800244c:	4b4b      	ldr	r3, [pc, #300]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	4948      	ldr	r1, [pc, #288]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	493f      	ldr	r1, [pc, #252]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002490:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249e:	4937      	ldr	r1, [pc, #220]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024ae:	d106      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a31      	ldr	r2, [pc, #196]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ba:	60d3      	str	r3, [r2, #12]
 80024bc:	e011      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024c6:	d10c      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	2101      	movs	r1, #1
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f8c8 	bl	8002664 <RCCEx_PLLSAI1_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d028      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ee:	4b23      	ldr	r3, [pc, #140]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	491f      	ldr	r1, [pc, #124]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800250c:	d106      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250e:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4a1a      	ldr	r2, [pc, #104]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002518:	60d3      	str	r3, [r2, #12]
 800251a:	e011      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002524:	d10c      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f899 	bl	8002664 <RCCEx_PLLSAI1_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02b      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002552:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255a:	4908      	ldr	r1, [pc, #32]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800256a:	d109      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a02      	ldr	r2, [pc, #8]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002576:	60d3      	str	r3, [r2, #12]
 8002578:	e014      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f867 	bl	8002664 <RCCEx_PLLSAI1_Config>
 8002596:	4603      	mov	r3, r0
 8002598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02f      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025be:	4928      	ldr	r1, [pc, #160]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025ce:	d10d      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f844 	bl	8002664 <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d014      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
 80025ea:	e011      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3320      	adds	r3, #32
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f925 	bl	800284c <RCCEx_PLLSAI2_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800261c:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002644:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264e:	4904      	ldr	r1, [pc, #16]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002656:	7cbb      	ldrb	r3, [r7, #18]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000

08002664 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002672:	4b75      	ldr	r3, [pc, #468]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800267e:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d10d      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
       ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002696:	4b6c      	ldr	r3, [pc, #432]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
       ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d047      	beq.n	800273a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e044      	b.n	800273a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d018      	beq.n	80026ea <RCCEx_PLLSAI1_Config+0x86>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d825      	bhi.n	8002708 <RCCEx_PLLSAI1_Config+0xa4>
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d002      	beq.n	80026c6 <RCCEx_PLLSAI1_Config+0x62>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d009      	beq.n	80026d8 <RCCEx_PLLSAI1_Config+0x74>
 80026c4:	e020      	b.n	8002708 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026c6:	4b60      	ldr	r3, [pc, #384]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11d      	bne.n	800270e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e01a      	b.n	800270e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e013      	b.n	8002712 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ea:	4b57      	ldr	r3, [pc, #348]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026f6:	4b54      	ldr	r3, [pc, #336]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002706:	e006      	b.n	8002716 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e004      	b.n	8002718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002716:	bf00      	nop
    }

    if(status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800271e:	4b4a      	ldr	r3, [pc, #296]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	430b      	orrs	r3, r1
 8002734:	4944      	ldr	r1, [pc, #272]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d17d      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002740:	4b41      	ldr	r3, [pc, #260]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a40      	ldr	r2, [pc, #256]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe fb1e 	bl	8000d8c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002752:	e009      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002754:	f7fe fb1a 	bl	8000d8c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
        break;
 8002766:	e005      	b.n	8002774 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002768:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ef      	bne.n	8002754 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d160      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002780:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6892      	ldr	r2, [r2, #8]
 8002790:	0211      	lsls	r1, r2, #8
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	0912      	lsrs	r2, r2, #4
 8002798:	0452      	lsls	r2, r2, #17
 800279a:	430a      	orrs	r2, r1
 800279c:	492a      	ldr	r1, [pc, #168]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	610b      	str	r3, [r1, #16]
 80027a2:	e027      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d112      	bne.n	80027d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027aa:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	0211      	lsls	r1, r2, #8
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6912      	ldr	r2, [r2, #16]
 80027c0:	0852      	lsrs	r2, r2, #1
 80027c2:	3a01      	subs	r2, #1
 80027c4:	0552      	lsls	r2, r2, #21
 80027c6:	430a      	orrs	r2, r1
 80027c8:	491f      	ldr	r1, [pc, #124]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	610b      	str	r3, [r1, #16]
 80027ce:	e011      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6952      	ldr	r2, [r2, #20]
 80027e6:	0852      	lsrs	r2, r2, #1
 80027e8:	3a01      	subs	r2, #1
 80027ea:	0652      	lsls	r2, r2, #25
 80027ec:	430a      	orrs	r2, r1
 80027ee:	4916      	ldr	r1, [pc, #88]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027f4:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fac4 	bl	8000d8c <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002806:	e009      	b.n	800281c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002808:	f7fe fac0 	bl	8000d8c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
          break;
 800281a:	e005      	b.n	8002828 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4904      	ldr	r1, [pc, #16]	@ (8002848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002866:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d10d      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
       ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800287e:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
       ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d047      	beq.n	8002922 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e044      	b.n	8002922 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d018      	beq.n	80028d2 <RCCEx_PLLSAI2_Config+0x86>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d825      	bhi.n	80028f0 <RCCEx_PLLSAI2_Config+0xa4>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <RCCEx_PLLSAI2_Config+0x62>
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d009      	beq.n	80028c0 <RCCEx_PLLSAI2_Config+0x74>
 80028ac:	e020      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ae:	4b55      	ldr	r3, [pc, #340]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11d      	bne.n	80028f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028be:	e01a      	b.n	80028f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c0:	4b50      	ldr	r3, [pc, #320]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e013      	b.n	80028fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028de:	4b49      	ldr	r3, [pc, #292]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ee:	e006      	b.n	80028fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e004      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002906:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	430b      	orrs	r3, r1
 800291c:	4939      	ldr	r1, [pc, #228]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d167      	bne.n	80029f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002928:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a35      	ldr	r2, [pc, #212]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe fa2a 	bl	8000d8c <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800293a:	e009      	b.n	8002950 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800293c:	f7fe fa26 	bl	8000d8c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
        break;
 800294e:	e005      	b.n	800295c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002950:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ef      	bne.n	800293c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d14a      	bne.n	80029f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002968:	4b26      	ldr	r3, [pc, #152]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6892      	ldr	r2, [r2, #8]
 8002978:	0211      	lsls	r1, r2, #8
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	0912      	lsrs	r2, r2, #4
 8002980:	0452      	lsls	r2, r2, #17
 8002982:	430a      	orrs	r2, r1
 8002984:	491f      	ldr	r1, [pc, #124]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	614b      	str	r3, [r1, #20]
 800298a:	e011      	b.n	80029b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6892      	ldr	r2, [r2, #8]
 800299c:	0211      	lsls	r1, r2, #8
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6912      	ldr	r2, [r2, #16]
 80029a2:	0852      	lsrs	r2, r2, #1
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0652      	lsls	r2, r2, #25
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4916      	ldr	r1, [pc, #88]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a13      	ldr	r2, [pc, #76]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe f9e6 	bl	8000d8c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029c2:	e009      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029c4:	f7fe f9e2 	bl	8000d8c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
          break;
 80029d6:	e005      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4904      	ldr	r1, [pc, #16]	@ (8002a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e040      	b.n	8002a9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f848 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	@ 0x24
 8002a34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fb6a 	bl	8003128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8af 	bl	8002bb8 <UART_SetConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e01b      	b.n	8002a9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fbe9 	bl	800326c <UART_CheckIdleState>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	@ 0x28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d177      	bne.n	8002bac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_Transmit+0x24>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e070      	b.n	8002bae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2221      	movs	r2, #33	@ 0x21
 8002ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ada:	f7fe f957 	bl	8000d8c <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af8:	d108      	bne.n	8002b0c <HAL_UART_Transmit+0x68>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e003      	b.n	8002b14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b14:	e02f      	b.n	8002b76 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2180      	movs	r1, #128	@ 0x80
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fc4b 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e03b      	b.n	8002bae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	881a      	ldrh	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	3302      	adds	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e007      	b.n	8002b64 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1c9      	bne.n	8002b16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2140      	movs	r1, #64	@ 0x40
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fc15 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e005      	b.n	8002bae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bbc:	b08a      	sub	sp, #40	@ 0x28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4ba4      	ldr	r3, [pc, #656]	@ (8002e78 <UART_SetConfig+0x2c0>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a99      	ldr	r2, [pc, #612]	@ (8002e7c <UART_SetConfig+0x2c4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c20:	4313      	orrs	r3, r2
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a90      	ldr	r2, [pc, #576]	@ (8002e80 <UART_SetConfig+0x2c8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d126      	bne.n	8002c90 <UART_SetConfig+0xd8>
 8002c42:	4b90      	ldr	r3, [pc, #576]	@ (8002e84 <UART_SetConfig+0x2cc>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d81b      	bhi.n	8002c88 <UART_SetConfig+0xd0>
 8002c50:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <UART_SetConfig+0xa0>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c79 	.word	0x08002c79
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c81 	.word	0x08002c81
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6e:	e116      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002c70:	2302      	movs	r3, #2
 8002c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c76:	e112      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7e:	e10e      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c86:	e10a      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c8e:	e106      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a7c      	ldr	r2, [pc, #496]	@ (8002e88 <UART_SetConfig+0x2d0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d138      	bne.n	8002d0c <UART_SetConfig+0x154>
 8002c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e84 <UART_SetConfig+0x2cc>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d82d      	bhi.n	8002d04 <UART_SetConfig+0x14c>
 8002ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <UART_SetConfig+0xf8>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002ce5 	.word	0x08002ce5
 8002cb4:	08002d05 	.word	0x08002d05
 8002cb8:	08002d05 	.word	0x08002d05
 8002cbc:	08002d05 	.word	0x08002d05
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d05 	.word	0x08002d05
 8002cc8:	08002d05 	.word	0x08002d05
 8002ccc:	08002d05 	.word	0x08002d05
 8002cd0:	08002ced 	.word	0x08002ced
 8002cd4:	08002d05 	.word	0x08002d05
 8002cd8:	08002d05 	.word	0x08002d05
 8002cdc:	08002d05 	.word	0x08002d05
 8002ce0:	08002cfd 	.word	0x08002cfd
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cea:	e0d8      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002cec:	2302      	movs	r3, #2
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf2:	e0d4      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cfa:	e0d0      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d02:	e0cc      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d04:	2310      	movs	r3, #16
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d0a:	e0c8      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5e      	ldr	r2, [pc, #376]	@ (8002e8c <UART_SetConfig+0x2d4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d125      	bne.n	8002d62 <UART_SetConfig+0x1aa>
 8002d16:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <UART_SetConfig+0x2cc>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d016      	beq.n	8002d52 <UART_SetConfig+0x19a>
 8002d24:	2b30      	cmp	r3, #48	@ 0x30
 8002d26:	d818      	bhi.n	8002d5a <UART_SetConfig+0x1a2>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d00a      	beq.n	8002d42 <UART_SetConfig+0x18a>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d814      	bhi.n	8002d5a <UART_SetConfig+0x1a2>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <UART_SetConfig+0x182>
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d008      	beq.n	8002d4a <UART_SetConfig+0x192>
 8002d38:	e00f      	b.n	8002d5a <UART_SetConfig+0x1a2>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d40:	e0ad      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d42:	2302      	movs	r3, #2
 8002d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d48:	e0a9      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d50:	e0a5      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d52:	2308      	movs	r3, #8
 8002d54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d58:	e0a1      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d60:	e09d      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a4a      	ldr	r2, [pc, #296]	@ (8002e90 <UART_SetConfig+0x2d8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d125      	bne.n	8002db8 <UART_SetConfig+0x200>
 8002d6c:	4b45      	ldr	r3, [pc, #276]	@ (8002e84 <UART_SetConfig+0x2cc>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d78:	d016      	beq.n	8002da8 <UART_SetConfig+0x1f0>
 8002d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d7c:	d818      	bhi.n	8002db0 <UART_SetConfig+0x1f8>
 8002d7e:	2b80      	cmp	r3, #128	@ 0x80
 8002d80:	d00a      	beq.n	8002d98 <UART_SetConfig+0x1e0>
 8002d82:	2b80      	cmp	r3, #128	@ 0x80
 8002d84:	d814      	bhi.n	8002db0 <UART_SetConfig+0x1f8>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <UART_SetConfig+0x1d8>
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d008      	beq.n	8002da0 <UART_SetConfig+0x1e8>
 8002d8e:	e00f      	b.n	8002db0 <UART_SetConfig+0x1f8>
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d96:	e082      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d9e:	e07e      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da6:	e07a      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dae:	e076      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db6:	e072      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <UART_SetConfig+0x2dc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d12a      	bne.n	8002e18 <UART_SetConfig+0x260>
 8002dc2:	4b30      	ldr	r3, [pc, #192]	@ (8002e84 <UART_SetConfig+0x2cc>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dd0:	d01a      	beq.n	8002e08 <UART_SetConfig+0x250>
 8002dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dd6:	d81b      	bhi.n	8002e10 <UART_SetConfig+0x258>
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ddc:	d00c      	beq.n	8002df8 <UART_SetConfig+0x240>
 8002dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002de2:	d815      	bhi.n	8002e10 <UART_SetConfig+0x258>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <UART_SetConfig+0x238>
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dec:	d008      	beq.n	8002e00 <UART_SetConfig+0x248>
 8002dee:	e00f      	b.n	8002e10 <UART_SetConfig+0x258>
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df6:	e052      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfe:	e04e      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e00:	2304      	movs	r3, #4
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e06:	e04a      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e08:	2308      	movs	r3, #8
 8002e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e0e:	e046      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e10:	2310      	movs	r3, #16
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e16:	e042      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <UART_SetConfig+0x2c4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d13a      	bne.n	8002e98 <UART_SetConfig+0x2e0>
 8002e22:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <UART_SetConfig+0x2cc>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e30:	d01a      	beq.n	8002e68 <UART_SetConfig+0x2b0>
 8002e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e36:	d81b      	bhi.n	8002e70 <UART_SetConfig+0x2b8>
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e3c:	d00c      	beq.n	8002e58 <UART_SetConfig+0x2a0>
 8002e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e42:	d815      	bhi.n	8002e70 <UART_SetConfig+0x2b8>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <UART_SetConfig+0x298>
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4c:	d008      	beq.n	8002e60 <UART_SetConfig+0x2a8>
 8002e4e:	e00f      	b.n	8002e70 <UART_SetConfig+0x2b8>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e56:	e022      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5e:	e01e      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e60:	2304      	movs	r3, #4
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e66:	e01a      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e68:	2308      	movs	r3, #8
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6e:	e016      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e70:	2310      	movs	r3, #16
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e76:	e012      	b.n	8002e9e <UART_SetConfig+0x2e6>
 8002e78:	efff69f3 	.word	0xefff69f3
 8002e7c:	40008000 	.word	0x40008000
 8002e80:	40013800 	.word	0x40013800
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40004400 	.word	0x40004400
 8002e8c:	40004800 	.word	0x40004800
 8002e90:	40004c00 	.word	0x40004c00
 8002e94:	40005000 	.word	0x40005000
 8002e98:	2310      	movs	r3, #16
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a9f      	ldr	r2, [pc, #636]	@ (8003120 <UART_SetConfig+0x568>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d17a      	bne.n	8002f9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d824      	bhi.n	8002efa <UART_SetConfig+0x342>
 8002eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <UART_SetConfig+0x300>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002edd 	.word	0x08002edd
 8002ebc:	08002efb 	.word	0x08002efb
 8002ec0:	08002ee5 	.word	0x08002ee5
 8002ec4:	08002efb 	.word	0x08002efb
 8002ec8:	08002eeb 	.word	0x08002eeb
 8002ecc:	08002efb 	.word	0x08002efb
 8002ed0:	08002efb 	.word	0x08002efb
 8002ed4:	08002efb 	.word	0x08002efb
 8002ed8:	08002ef3 	.word	0x08002ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002edc:	f7ff f84c 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002ee0:	61f8      	str	r0, [r7, #28]
        break;
 8002ee2:	e010      	b.n	8002f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8003124 <UART_SetConfig+0x56c>)
 8002ee6:	61fb      	str	r3, [r7, #28]
        break;
 8002ee8:	e00d      	b.n	8002f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eea:	f7fe ffad 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8002eee:	61f8      	str	r0, [r7, #28]
        break;
 8002ef0:	e009      	b.n	8002f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ef6:	61fb      	str	r3, [r7, #28]
        break;
 8002ef8:	e005      	b.n	8002f06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80fb 	beq.w	8003104 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d305      	bcc.n	8002f2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d903      	bls.n	8002f32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f30:	e0e8      	b.n	8003104 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2200      	movs	r2, #0
 8002f36:	461c      	mov	r4, r3
 8002f38:	4615      	mov	r5, r2
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	022b      	lsls	r3, r5, #8
 8002f44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f48:	0222      	lsls	r2, r4, #8
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	6849      	ldr	r1, [r1, #4]
 8002f4e:	0849      	lsrs	r1, r1, #1
 8002f50:	2000      	movs	r0, #0
 8002f52:	4688      	mov	r8, r1
 8002f54:	4681      	mov	r9, r0
 8002f56:	eb12 0a08 	adds.w	sl, r2, r8
 8002f5a:	eb43 0b09 	adc.w	fp, r3, r9
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f6c:	4650      	mov	r0, sl
 8002f6e:	4659      	mov	r1, fp
 8002f70:	f7fd f986 	bl	8000280 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f82:	d308      	bcc.n	8002f96 <UART_SetConfig+0x3de>
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8a:	d204      	bcs.n	8002f96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	e0b6      	b.n	8003104 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f9c:	e0b2      	b.n	8003104 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa6:	d15e      	bne.n	8003066 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d828      	bhi.n	8003002 <UART_SetConfig+0x44a>
 8002fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <UART_SetConfig+0x400>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002fe5 	.word	0x08002fe5
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	08003003 	.word	0x08003003
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	08003003 	.word	0x08003003
 8002fd0:	08003003 	.word	0x08003003
 8002fd4:	08003003 	.word	0x08003003
 8002fd8:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7fe ffcc 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	61f8      	str	r0, [r7, #28]
        break;
 8002fe2:	e014      	b.n	800300e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7fe ffde 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	61f8      	str	r0, [r7, #28]
        break;
 8002fea:	e010      	b.n	800300e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b4d      	ldr	r3, [pc, #308]	@ (8003124 <UART_SetConfig+0x56c>)
 8002fee:	61fb      	str	r3, [r7, #28]
        break;
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe ff29 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8002ff6:	61f8      	str	r0, [r7, #28]
        break;
 8002ff8:	e009      	b.n	800300e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffe:	61fb      	str	r3, [r7, #28]
        break;
 8003000:	e005      	b.n	800300e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800300c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d077      	beq.n	8003104 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005a      	lsls	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	441a      	add	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d916      	bls.n	800305e <UART_SetConfig+0x4a6>
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003036:	d212      	bcs.n	800305e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f023 030f 	bic.w	r3, r3, #15
 8003040:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	b29b      	uxth	r3, r3
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	b29a      	uxth	r2, r3
 800304e:	8afb      	ldrh	r3, [r7, #22]
 8003050:	4313      	orrs	r3, r2
 8003052:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	8afa      	ldrh	r2, [r7, #22]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	e052      	b.n	8003104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003064:	e04e      	b.n	8003104 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800306a:	2b08      	cmp	r3, #8
 800306c:	d827      	bhi.n	80030be <UART_SetConfig+0x506>
 800306e:	a201      	add	r2, pc, #4	@ (adr r2, 8003074 <UART_SetConfig+0x4bc>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003099 	.word	0x08003099
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030a9 	.word	0x080030a9
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030af 	.word	0x080030af
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030bf 	.word	0x080030bf
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7fe ff6e 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 800309c:	61f8      	str	r0, [r7, #28]
        break;
 800309e:	e014      	b.n	80030ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a0:	f7fe ff80 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 80030a4:	61f8      	str	r0, [r7, #28]
        break;
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <UART_SetConfig+0x56c>)
 80030aa:	61fb      	str	r3, [r7, #28]
        break;
 80030ac:	e00d      	b.n	80030ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7fe fecb 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 80030b2:	61f8      	str	r0, [r7, #28]
        break;
 80030b4:	e009      	b.n	80030ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ba:	61fb      	str	r3, [r7, #28]
        break;
 80030bc:	e005      	b.n	80030ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030c8:	bf00      	nop
    }

    if (pclk != 0U)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d019      	beq.n	8003104 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	085a      	lsrs	r2, r3, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	441a      	add	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d909      	bls.n	80030fe <UART_SetConfig+0x546>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f0:	d205      	bcs.n	80030fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	e002      	b.n	8003104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003110:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003114:	4618      	mov	r0, r3
 8003116:	3728      	adds	r7, #40	@ 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40008000 	.word	0x40008000
 8003124:	00f42400 	.word	0x00f42400

08003128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01a      	beq.n	800323e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003226:	d10a      	bne.n	800323e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b098      	sub	sp, #96	@ 0x60
 8003270:	af02      	add	r7, sp, #8
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800327c:	f7fd fd86 	bl	8000d8c <HAL_GetTick>
 8003280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d12e      	bne.n	80032ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003298:	2200      	movs	r2, #0
 800329a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f88c 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d021      	beq.n	80032ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032be:	653b      	str	r3, [r7, #80]	@ 0x50
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e6      	bne.n	80032aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e062      	b.n	80033b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d149      	bne.n	8003390 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f856 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03c      	beq.n	8003390 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	623b      	str	r3, [r7, #32]
   return(result);
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800332a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003334:	633b      	str	r3, [r7, #48]	@ 0x30
 8003336:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800333a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e6      	bne.n	8003316 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3308      	adds	r3, #8
 800334e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	e853 3f00 	ldrex	r3, [r3]
 8003356:	60fb      	str	r3, [r7, #12]
   return(result);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003368:	61fa      	str	r2, [r7, #28]
 800336a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	617b      	str	r3, [r7, #20]
   return(result);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e5      	bne.n	8003348 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e011      	b.n	80033b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3758      	adds	r7, #88	@ 0x58
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033cc:	e04f      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d04b      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fd fcd9 	bl	8000d8c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <UART_WaitOnFlagUntilTimeout+0x30>
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e04e      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d037      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b80      	cmp	r3, #128	@ 0x80
 8003402:	d034      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	d031      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d110      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2208      	movs	r2, #8
 800341e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f838 	bl	8003496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2208      	movs	r2, #8
 800342a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e029      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003448:	d111      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f81e 	bl	8003496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e00f      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	429a      	cmp	r2, r3
 800348a:	d0a0      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003496:	b480      	push	{r7}
 8003498:	b095      	sub	sp, #84	@ 0x54
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e6      	bne.n	800349e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e5      	bne.n	80034d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003508:	2b01      	cmp	r3, #1
 800350a:	d118      	bne.n	800353e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60bb      	str	r3, [r7, #8]
   return(result);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	647b      	str	r3, [r7, #68]	@ 0x44
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6979      	ldr	r1, [r7, #20]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	613b      	str	r3, [r7, #16]
   return(result);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e6      	bne.n	800350c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003552:	bf00      	nop
 8003554:	3754      	adds	r7, #84	@ 0x54
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800356c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003570:	2b84      	cmp	r3, #132	@ 0x84
 8003572:	d005      	beq.n	8003580 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	3303      	adds	r3, #3
 800357e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003580:	68fb      	ldr	r3, [r7, #12]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003592:	f000 fba9 	bl	8003ce8 <vTaskStartScheduler>
  
  return osOK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}

0800359c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	b089      	sub	sp, #36	@ 0x24
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d020      	beq.n	80035f0 <osThreadCreate+0x54>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01c      	beq.n	80035f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685c      	ldr	r4, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691e      	ldr	r6, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ffc8 	bl	800355e <makeFreeRtosPriority>
 80035ce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d8:	9202      	str	r2, [sp, #8]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	9100      	str	r1, [sp, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4632      	mov	r2, r6
 80035e2:	4629      	mov	r1, r5
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f8ed 	bl	80037c4 <xTaskCreateStatic>
 80035ea:	4603      	mov	r3, r0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e01c      	b.n	800362a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685c      	ldr	r4, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035fc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ffaa 	bl	800355e <makeFreeRtosPriority>
 800360a:	4602      	mov	r2, r0
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	9200      	str	r2, [sp, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4632      	mov	r2, r6
 8003618:	4629      	mov	r1, r5
 800361a:	4620      	mov	r0, r4
 800361c:	f000 f932 	bl	8003884 <xTaskCreate>
 8003620:	4603      	mov	r3, r0
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003634 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <osDelay+0x16>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	e000      	b.n	800364c <osDelay+0x18>
 800364a:	2301      	movs	r3, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa51 	bl	8003af4 <vTaskDelay>
  
  return osOK;
 8003652:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f103 0208 	add.w	r2, r3, #8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f103 0208 	add.w	r2, r3, #8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f103 0208 	add.w	r2, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d103      	bne.n	800371e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e00c      	b.n	8003738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3308      	adds	r3, #8
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e002      	b.n	800372c <vListInsert+0x2e>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d2f6      	bcs.n	8003726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6852      	ldr	r2, [r2, #4]
 8003790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d103      	bne.n	80037a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1e5a      	subs	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	@ 0x38
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <xTaskCreateStatic+0x4a>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	61fb      	str	r3, [r7, #28]
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	e7fd      	b.n	800380a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800380e:	2354      	movs	r3, #84	@ 0x54
 8003810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b54      	cmp	r3, #84	@ 0x54
 8003816:	d00b      	beq.n	8003830 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	61bb      	str	r3, [r7, #24]
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003830:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01e      	beq.n	8003876 <xTaskCreateStatic+0xb2>
 8003838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01b      	beq.n	8003876 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003850:	2300      	movs	r3, #0
 8003852:	9303      	str	r3, [sp, #12]
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f850 	bl	800390e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800386e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003870:	f000 f8d6 	bl	8003a20 <prvAddNewTaskToReadyList>
 8003874:	e001      	b.n	800387a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800387a:	697b      	ldr	r3, [r7, #20]
	}
 800387c:	4618      	mov	r0, r3
 800387e:	3728      	adds	r7, #40	@ 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	@ 0x30
 8003888:	af04      	add	r7, sp, #16
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ffc5 	bl	8004828 <pvPortMalloc>
 800389e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00e      	beq.n	80038c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038a6:	2054      	movs	r0, #84	@ 0x54
 80038a8:	f000 ffbe 	bl	8004828 <pvPortMalloc>
 80038ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80038ba:	e005      	b.n	80038c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f001 f881 	bl	80049c4 <vPortFree>
 80038c2:	e001      	b.n	80038c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	2300      	movs	r3, #0
 80038da:	9303      	str	r3, [sp, #12]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	9302      	str	r3, [sp, #8]
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f80e 	bl	800390e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038f2:	69f8      	ldr	r0, [r7, #28]
 80038f4:	f000 f894 	bl	8003a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038f8:	2301      	movs	r3, #1
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e002      	b.n	8003904 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003904:	69bb      	ldr	r3, [r7, #24]
	}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b088      	sub	sp, #32
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003926:	3b01      	subs	r3, #1
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	617b      	str	r3, [r7, #20]
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01f      	beq.n	800399e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e012      	b.n	800398a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	7819      	ldrb	r1, [r3, #0]
 800396c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	3334      	adds	r3, #52	@ 0x34
 8003974:	460a      	mov	r2, r1
 8003976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d9e9      	bls.n	8003964 <prvInitialiseNewTask+0x56>
 8003990:	e000      	b.n	8003994 <prvInitialiseNewTask+0x86>
			{
				break;
 8003992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800399c:	e003      	b.n	80039a6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d901      	bls.n	80039b0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039ac:	2306      	movs	r3, #6
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	2200      	movs	r2, #0
 80039c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	3304      	adds	r3, #4
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fe68 	bl	800369c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	3318      	adds	r3, #24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fe63 	bl	800369c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	f1c3 0207 	rsb	r2, r3, #7
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	69b8      	ldr	r0, [r7, #24]
 8003a00:	f000 fd00 	bl	8004404 <pxPortInitialiseStack>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a16:	bf00      	nop
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a28:	f000 fe1e 	bl	8004668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad8 <prvAddNewTaskToReadyList+0xb8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	4a29      	ldr	r2, [pc, #164]	@ (8003ad8 <prvAddNewTaskToReadyList+0xb8>)
 8003a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a36:	4b29      	ldr	r3, [pc, #164]	@ (8003adc <prvAddNewTaskToReadyList+0xbc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a3e:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <prvAddNewTaskToReadyList+0xbc>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a44:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <prvAddNewTaskToReadyList+0xb8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d110      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a4c:	f000 fb98 	bl	8004180 <prvInitialiseTaskLists>
 8003a50:	e00d      	b.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a52:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <prvAddNewTaskToReadyList+0xbc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d802      	bhi.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a68:	4a1c      	ldr	r2, [pc, #112]	@ (8003adc <prvAddNewTaskToReadyList+0xbc>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4a15      	ldr	r2, [pc, #84]	@ (8003aec <prvAddNewTaskToReadyList+0xcc>)
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7ff fe08 	bl	80036b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003aa6:	f000 fe11 	bl	80046cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <prvAddNewTaskToReadyList+0xbc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d207      	bcs.n	8003ad0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200004a4 	.word	0x200004a4
 8003adc:	200003a4 	.word	0x200003a4
 8003ae0:	200004b0 	.word	0x200004b0
 8003ae4:	200004c0 	.word	0x200004c0
 8003ae8:	200004ac 	.word	0x200004ac
 8003aec:	200003a8 	.word	0x200003a8
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b06:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <vTaskDelay+0x64>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <vTaskDelay+0x32>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	60bb      	str	r3, [r7, #8]
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b26:	f000 f941 	bl	8003dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fc03 	bl	8004338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b32:	f000 f949 	bl	8003dc8 <xTaskResumeAll>
 8003b36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b3e:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <vTaskDelay+0x68>)
 8003b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200004cc 	.word	0x200004cc
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003b68:	f000 fd7e 	bl	8004668 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <uxTaskPriorityGet+0x18>
 8003b72:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <uxTaskPriorityGet+0x30>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e000      	b.n	8003b7a <uxTaskPriorityGet+0x1a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003b82:	f000 fda3 	bl	80046cc <vPortExitCritical>

		return uxReturn;
 8003b86:	68bb      	ldr	r3, [r7, #8]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200003a4 	.word	0x200003a4

08003b94 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b06      	cmp	r3, #6
 8003ba6:	d90b      	bls.n	8003bc0 <vTaskPrioritySet+0x2c>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d901      	bls.n	8003bca <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003bca:	f000 fd4d 	bl	8004668 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <vTaskPrioritySet+0x46>
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <vTaskPrioritySet+0x144>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	e000      	b.n	8003bdc <vTaskPrioritySet+0x48>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d06f      	beq.n	8003ccc <vTaskPrioritySet+0x138>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d90d      	bls.n	8003c10 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8003bf4:	4b38      	ldr	r3, [pc, #224]	@ (8003cd8 <vTaskPrioritySet+0x144>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d00f      	beq.n	8003c1e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003bfe:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <vTaskPrioritySet+0x144>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d309      	bcc.n	8003c1e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e006      	b.n	8003c1e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003c10:	4b31      	ldr	r3, [pc, #196]	@ (8003cd8 <vTaskPrioritySet+0x144>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d101      	bne.n	8003c1e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d102      	bne.n	8003c36 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	645a      	str	r2, [r3, #68]	@ 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db04      	blt.n	8003c4e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f1c3 0207 	rsb	r2, r3, #7
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	6959      	ldr	r1, [r3, #20]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <vTaskPrioritySet+0x148>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	4299      	cmp	r1, r3
 8003c62:	d128      	bne.n	8003cb6 <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fd81 	bl	8003770 <uxListRemove>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <vTaskPrioritySet+0xf4>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003c74:	2201      	movs	r2, #1
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <vTaskPrioritySet+0x14c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4013      	ands	r3, r2
 8003c84:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <vTaskPrioritySet+0x14c>)
 8003c86:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <vTaskPrioritySet+0x14c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <vTaskPrioritySet+0x14c>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cdc <vTaskPrioritySet+0x148>)
 8003ca8:	441a      	add	r2, r3
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7ff fd00 	bl	80036b6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <vTaskPrioritySet+0x138>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003cbc:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <vTaskPrioritySet+0x150>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003ccc:	f000 fcfe 	bl	80046cc <vPortExitCritical>
	}
 8003cd0:	bf00      	nop
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200003a4 	.word	0x200003a4
 8003cdc:	200003a8 	.word	0x200003a8
 8003ce0:	200004ac 	.word	0x200004ac
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cf6:	463a      	mov	r2, r7
 8003cf8:	1d39      	adds	r1, r7, #4
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc54 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	460a      	mov	r2, r1
 8003d16:	491f      	ldr	r1, [pc, #124]	@ (8003d94 <vTaskStartScheduler+0xac>)
 8003d18:	481f      	ldr	r0, [pc, #124]	@ (8003d98 <vTaskStartScheduler+0xb0>)
 8003d1a:	f7ff fd53 	bl	80037c4 <xTaskCreateStatic>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a1e      	ldr	r2, [pc, #120]	@ (8003d9c <vTaskStartScheduler+0xb4>)
 8003d22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <vTaskStartScheduler+0xb4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e001      	b.n	8003d36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d116      	bne.n	8003d6a <vTaskStartScheduler+0x82>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	613b      	str	r3, [r7, #16]
}
 8003d4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d50:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <vTaskStartScheduler+0xb8>)
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d58:	4b12      	ldr	r3, [pc, #72]	@ (8003da4 <vTaskStartScheduler+0xbc>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d5e:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <vTaskStartScheduler+0xc0>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d64:	f000 fbdc 	bl	8004520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d68:	e00f      	b.n	8003d8a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d10b      	bne.n	8003d8a <vTaskStartScheduler+0xa2>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60fb      	str	r3, [r7, #12]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <vTaskStartScheduler+0x9e>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	08005624 	.word	0x08005624
 8003d98:	08004151 	.word	0x08004151
 8003d9c:	200004c8 	.word	0x200004c8
 8003da0:	200004c4 	.word	0x200004c4
 8003da4:	200004b0 	.word	0x200004b0
 8003da8:	200004a8 	.word	0x200004a8

08003dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003db0:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <vTaskSuspendAll+0x18>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a03      	ldr	r2, [pc, #12]	@ (8003dc4 <vTaskSuspendAll+0x18>)
 8003db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	200004cc 	.word	0x200004cc

08003dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ee0 <xTaskResumeAll+0x118>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	603b      	str	r3, [r7, #0]
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	e7fd      	b.n	8003df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003df6:	f000 fc37 	bl	8004668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <xTaskResumeAll+0x118>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	4a37      	ldr	r2, [pc, #220]	@ (8003ee0 <xTaskResumeAll+0x118>)
 8003e02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e04:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <xTaskResumeAll+0x118>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d161      	bne.n	8003ed0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e0c:	4b35      	ldr	r3, [pc, #212]	@ (8003ee4 <xTaskResumeAll+0x11c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05d      	beq.n	8003ed0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e14:	e02e      	b.n	8003e74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e16:	4b34      	ldr	r3, [pc, #208]	@ (8003ee8 <xTaskResumeAll+0x120>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3318      	adds	r3, #24
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fca4 	bl	8003770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fc9f 	bl	8003770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	2201      	movs	r2, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003eec <xTaskResumeAll+0x124>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	4a2a      	ldr	r2, [pc, #168]	@ (8003eec <xTaskResumeAll+0x124>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a27      	ldr	r2, [pc, #156]	@ (8003ef0 <xTaskResumeAll+0x128>)
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7ff fc2b 	bl	80036b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e64:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <xTaskResumeAll+0x12c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <xTaskResumeAll+0x130>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e74:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee8 <xTaskResumeAll+0x120>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1cc      	bne.n	8003e16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e82:	f000 fa1b 	bl	80042bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e86:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <xTaskResumeAll+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e92:	f000 f847 	bl	8003f24 <xTaskIncrementTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <xTaskResumeAll+0x130>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f1      	bne.n	8003e92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003eae:	4b13      	ldr	r3, [pc, #76]	@ (8003efc <xTaskResumeAll+0x134>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <xTaskResumeAll+0x130>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f00 <xTaskResumeAll+0x138>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ed0:	f000 fbfc 	bl	80046cc <vPortExitCritical>

	return xAlreadyYielded;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200004cc 	.word	0x200004cc
 8003ee4:	200004a4 	.word	0x200004a4
 8003ee8:	20000464 	.word	0x20000464
 8003eec:	200004ac 	.word	0x200004ac
 8003ef0:	200003a8 	.word	0x200003a8
 8003ef4:	200003a4 	.word	0x200003a4
 8003ef8:	200004b8 	.word	0x200004b8
 8003efc:	200004b4 	.word	0x200004b4
 8003f00:	e000ed04 	.word	0xe000ed04

08003f04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f0a:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <xTaskGetTickCount+0x1c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f10:	687b      	ldr	r3, [r7, #4]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200004a8 	.word	0x200004a8

08003f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800406c <xTaskIncrementTick+0x148>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 808f 	bne.w	8004056 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f38:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <xTaskIncrementTick+0x14c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f40:	4a4b      	ldr	r2, [pc, #300]	@ (8004070 <xTaskIncrementTick+0x14c>)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d121      	bne.n	8003f90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f4c:	4b49      	ldr	r3, [pc, #292]	@ (8004074 <xTaskIncrementTick+0x150>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	603b      	str	r3, [r7, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <xTaskIncrementTick+0x46>
 8003f6e:	4b41      	ldr	r3, [pc, #260]	@ (8004074 <xTaskIncrementTick+0x150>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	4b40      	ldr	r3, [pc, #256]	@ (8004078 <xTaskIncrementTick+0x154>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3e      	ldr	r2, [pc, #248]	@ (8004074 <xTaskIncrementTick+0x150>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8004078 <xTaskIncrementTick+0x154>)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b3e      	ldr	r3, [pc, #248]	@ (800407c <xTaskIncrementTick+0x158>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <xTaskIncrementTick+0x158>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	f000 f996 	bl	80042bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f90:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <xTaskIncrementTick+0x15c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d348      	bcc.n	800402c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f9a:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <xTaskIncrementTick+0x150>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d104      	bne.n	8003fae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa4:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <xTaskIncrementTick+0x15c>)
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	601a      	str	r2, [r3, #0]
					break;
 8003fac:	e03e      	b.n	800402c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fae:	4b31      	ldr	r3, [pc, #196]	@ (8004074 <xTaskIncrementTick+0x150>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d203      	bcs.n	8003fce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004080 <xTaskIncrementTick+0x15c>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fcc:	e02e      	b.n	800402c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fbcc 	bl	8003770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fbc3 	bl	8003770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	2201      	movs	r2, #1
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <xTaskIncrementTick+0x160>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	4a22      	ldr	r2, [pc, #136]	@ (8004084 <xTaskIncrementTick+0x160>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <xTaskIncrementTick+0x164>)
 800400a:	441a      	add	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7ff fb4f 	bl	80036b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401c:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <xTaskIncrementTick+0x168>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d3b9      	bcc.n	8003f9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402a:	e7b6      	b.n	8003f9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <xTaskIncrementTick+0x168>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004032:	4915      	ldr	r1, [pc, #84]	@ (8004088 <xTaskIncrementTick+0x164>)
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d901      	bls.n	8004048 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <xTaskIncrementTick+0x16c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e004      	b.n	8004060 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <xTaskIncrementTick+0x170>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <xTaskIncrementTick+0x170>)
 800405e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004060:	697b      	ldr	r3, [r7, #20]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200004cc 	.word	0x200004cc
 8004070:	200004a8 	.word	0x200004a8
 8004074:	2000045c 	.word	0x2000045c
 8004078:	20000460 	.word	0x20000460
 800407c:	200004bc 	.word	0x200004bc
 8004080:	200004c4 	.word	0x200004c4
 8004084:	200004ac 	.word	0x200004ac
 8004088:	200003a8 	.word	0x200003a8
 800408c:	200003a4 	.word	0x200003a4
 8004090:	200004b8 	.word	0x200004b8
 8004094:	200004b4 	.word	0x200004b4

08004098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800409e:	4b27      	ldr	r3, [pc, #156]	@ (800413c <vTaskSwitchContext+0xa4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040a6:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <vTaskSwitchContext+0xa8>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040ac:	e040      	b.n	8004130 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <vTaskSwitchContext+0xa8>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b4:	4b23      	ldr	r3, [pc, #140]	@ (8004144 <vTaskSwitchContext+0xac>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040c2:	7afb      	ldrb	r3, [r7, #11]
 80040c4:	f1c3 031f 	rsb	r3, r3, #31
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	491f      	ldr	r1, [pc, #124]	@ (8004148 <vTaskSwitchContext+0xb0>)
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	e7fd      	b.n	80040f2 <vTaskSwitchContext+0x5a>
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <vTaskSwitchContext+0xb0>)
 8004102:	4413      	add	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3308      	adds	r3, #8
 8004118:	429a      	cmp	r2, r3
 800411a:	d104      	bne.n	8004126 <vTaskSwitchContext+0x8e>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a07      	ldr	r2, [pc, #28]	@ (800414c <vTaskSwitchContext+0xb4>)
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	200004cc 	.word	0x200004cc
 8004140:	200004b8 	.word	0x200004b8
 8004144:	200004ac 	.word	0x200004ac
 8004148:	200003a8 	.word	0x200003a8
 800414c:	200003a4 	.word	0x200003a4

08004150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004158:	f000 f852 	bl	8004200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <prvIdleTask+0x28>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d9f9      	bls.n	8004158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004164:	4b05      	ldr	r3, [pc, #20]	@ (800417c <prvIdleTask+0x2c>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004174:	e7f0      	b.n	8004158 <prvIdleTask+0x8>
 8004176:	bf00      	nop
 8004178:	200003a8 	.word	0x200003a8
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	e00c      	b.n	80041a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a12      	ldr	r2, [pc, #72]	@ (80041e0 <prvInitialiseTaskLists+0x60>)
 8004198:	4413      	add	r3, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fa5e 	bl	800365c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3301      	adds	r3, #1
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b06      	cmp	r3, #6
 80041aa:	d9ef      	bls.n	800418c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041ac:	480d      	ldr	r0, [pc, #52]	@ (80041e4 <prvInitialiseTaskLists+0x64>)
 80041ae:	f7ff fa55 	bl	800365c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041b2:	480d      	ldr	r0, [pc, #52]	@ (80041e8 <prvInitialiseTaskLists+0x68>)
 80041b4:	f7ff fa52 	bl	800365c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041b8:	480c      	ldr	r0, [pc, #48]	@ (80041ec <prvInitialiseTaskLists+0x6c>)
 80041ba:	f7ff fa4f 	bl	800365c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041be:	480c      	ldr	r0, [pc, #48]	@ (80041f0 <prvInitialiseTaskLists+0x70>)
 80041c0:	f7ff fa4c 	bl	800365c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041c4:	480b      	ldr	r0, [pc, #44]	@ (80041f4 <prvInitialiseTaskLists+0x74>)
 80041c6:	f7ff fa49 	bl	800365c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <prvInitialiseTaskLists+0x78>)
 80041cc:	4a05      	ldr	r2, [pc, #20]	@ (80041e4 <prvInitialiseTaskLists+0x64>)
 80041ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <prvInitialiseTaskLists+0x7c>)
 80041d2:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <prvInitialiseTaskLists+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200003a8 	.word	0x200003a8
 80041e4:	20000434 	.word	0x20000434
 80041e8:	20000448 	.word	0x20000448
 80041ec:	20000464 	.word	0x20000464
 80041f0:	20000478 	.word	0x20000478
 80041f4:	20000490 	.word	0x20000490
 80041f8:	2000045c 	.word	0x2000045c
 80041fc:	20000460 	.word	0x20000460

08004200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004206:	e019      	b.n	800423c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004208:	f000 fa2e 	bl	8004668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <prvCheckTasksWaitingTermination+0x50>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff faa9 	bl	8003770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <prvCheckTasksWaitingTermination+0x54>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3b01      	subs	r3, #1
 8004224:	4a0b      	ldr	r2, [pc, #44]	@ (8004254 <prvCheckTasksWaitingTermination+0x54>)
 8004226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <prvCheckTasksWaitingTermination+0x58>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <prvCheckTasksWaitingTermination+0x58>)
 8004230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004232:	f000 fa4b 	bl	80046cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f810 	bl	800425c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <prvCheckTasksWaitingTermination+0x58>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e1      	bne.n	8004208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000478 	.word	0x20000478
 8004254:	200004a4 	.word	0x200004a4
 8004258:	2000048c 	.word	0x2000048c

0800425c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fba6 	bl	80049c4 <vPortFree>
				vPortFree( pxTCB );
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fba3 	bl	80049c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800427e:	e019      	b.n	80042b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004286:	2b01      	cmp	r3, #1
 8004288:	d103      	bne.n	8004292 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb9a 	bl	80049c4 <vPortFree>
	}
 8004290:	e010      	b.n	80042b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004298:	2b02      	cmp	r3, #2
 800429a:	d00b      	beq.n	80042b4 <prvDeleteTCB+0x58>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60fb      	str	r3, [r7, #12]
}
 80042ae:	bf00      	nop
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <prvDeleteTCB+0x54>
	}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c2:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <prvResetNextTaskUnblockTime+0x38>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvResetNextTaskUnblockTime+0x3c>)
 80042ce:	f04f 32ff 	mov.w	r2, #4294967295
 80042d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042d4:	e008      	b.n	80042e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d6:	4b07      	ldr	r3, [pc, #28]	@ (80042f4 <prvResetNextTaskUnblockTime+0x38>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4a04      	ldr	r2, [pc, #16]	@ (80042f8 <prvResetNextTaskUnblockTime+0x3c>)
 80042e6:	6013      	str	r3, [r2, #0]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	2000045c 	.word	0x2000045c
 80042f8:	200004c4 	.word	0x200004c4

080042fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004302:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <xTaskGetSchedulerState+0x34>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800430a:	2301      	movs	r3, #1
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e008      	b.n	8004322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <xTaskGetSchedulerState+0x38>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004318:	2302      	movs	r3, #2
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	e001      	b.n	8004322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004322:	687b      	ldr	r3, [r7, #4]
	}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	200004b0 	.word	0x200004b0
 8004334:	200004cc 	.word	0x200004cc

08004338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004342:	4b29      	ldr	r3, [pc, #164]	@ (80043e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004348:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fa0e 	bl	8003770 <uxListRemove>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800435a:	4b24      	ldr	r3, [pc, #144]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4013      	ands	r3, r2
 800436e:	4a20      	ldr	r2, [pc, #128]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d10a      	bne.n	8004390 <prvAddCurrentTaskToDelayedList+0x58>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004380:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3304      	adds	r3, #4
 8004386:	4619      	mov	r1, r3
 8004388:	481a      	ldr	r0, [pc, #104]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800438a:	f7ff f994 	bl	80036b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800438e:	e026      	b.n	80043de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004398:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d209      	bcs.n	80043bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7ff f9a2 	bl	80036fe <vListInsert>
}
 80043ba:	e010      	b.n	80043de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043bc:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f7ff f998 	bl	80036fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d202      	bcs.n	80043de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043d8:	4a09      	ldr	r2, [pc, #36]	@ (8004400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6013      	str	r3, [r2, #0]
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200004a8 	.word	0x200004a8
 80043ec:	200003a4 	.word	0x200003a4
 80043f0:	200004ac 	.word	0x200004ac
 80043f4:	20000490 	.word	0x20000490
 80043f8:	20000460 	.word	0x20000460
 80043fc:	2000045c 	.word	0x2000045c
 8004400:	200004c4 	.word	0x200004c4

08004404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b04      	subs	r3, #4
 8004414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800441c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b04      	subs	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b04      	subs	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004434:	4a0c      	ldr	r2, [pc, #48]	@ (8004468 <pxPortInitialiseStack+0x64>)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b14      	subs	r3, #20
 800443e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3b04      	subs	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b20      	subs	r3, #32
 8004458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800445a:	68fb      	ldr	r3, [r7, #12]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	0800446d 	.word	0x0800446d

0800446c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004476:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <prvTaskExitError+0x58>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d00b      	beq.n	8004498 <prvTaskExitError+0x2c>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <prvTaskExitError+0x28>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60bb      	str	r3, [r7, #8]
}
 80044aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044ac:	bf00      	nop
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0fc      	beq.n	80044ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	2000000c 	.word	0x2000000c
	...

080044d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044d0:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <pxCurrentTCBConst2>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6808      	ldr	r0, [r1, #0]
 80044d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	f380 8809 	msr	PSP, r0
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	4770      	bx	lr
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst2>:
 80044f0:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044f8:	4808      	ldr	r0, [pc, #32]	@ (800451c <prvPortStartFirstTask+0x24>)
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	6800      	ldr	r0, [r0, #0]
 80044fe:	f380 8808 	msr	MSP, r0
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8814 	msr	CONTROL, r0
 800450a:	b662      	cpsie	i
 800450c:	b661      	cpsie	f
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	df00      	svc	0
 8004518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800451a:	bf00      	nop
 800451c:	e000ed08 	.word	0xe000ed08

08004520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004526:	4b47      	ldr	r3, [pc, #284]	@ (8004644 <xPortStartScheduler+0x124>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <xPortStartScheduler+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10b      	bne.n	8004548 <xPortStartScheduler+0x28>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004548:	4b3e      	ldr	r3, [pc, #248]	@ (8004644 <xPortStartScheduler+0x124>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3f      	ldr	r2, [pc, #252]	@ (800464c <xPortStartScheduler+0x12c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10b      	bne.n	800456a <xPortStartScheduler+0x4a>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	613b      	str	r3, [r7, #16]
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800456a:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <xPortStartScheduler+0x130>)
 800456c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	22ff      	movs	r2, #255	@ 0xff
 800457a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800458c:	b2da      	uxtb	r2, r3
 800458e:	4b31      	ldr	r3, [pc, #196]	@ (8004654 <xPortStartScheduler+0x134>)
 8004590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004592:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <xPortStartScheduler+0x138>)
 8004594:	2207      	movs	r2, #7
 8004596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004598:	e009      	b.n	80045ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800459a:	4b2f      	ldr	r3, [pc, #188]	@ (8004658 <xPortStartScheduler+0x138>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004658 <xPortStartScheduler+0x138>)
 80045a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b6:	2b80      	cmp	r3, #128	@ 0x80
 80045b8:	d0ef      	beq.n	800459a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ba:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <xPortStartScheduler+0x138>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d00b      	beq.n	80045de <xPortStartScheduler+0xbe>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60bb      	str	r3, [r7, #8]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045de:	4b1e      	ldr	r3, [pc, #120]	@ (8004658 <xPortStartScheduler+0x138>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004658 <xPortStartScheduler+0x138>)
 80045e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <xPortStartScheduler+0x138>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045f0:	4a19      	ldr	r2, [pc, #100]	@ (8004658 <xPortStartScheduler+0x138>)
 80045f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045fc:	4b17      	ldr	r3, [pc, #92]	@ (800465c <xPortStartScheduler+0x13c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a16      	ldr	r2, [pc, #88]	@ (800465c <xPortStartScheduler+0x13c>)
 8004602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004608:	4b14      	ldr	r3, [pc, #80]	@ (800465c <xPortStartScheduler+0x13c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a13      	ldr	r2, [pc, #76]	@ (800465c <xPortStartScheduler+0x13c>)
 800460e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004614:	f000 f8da 	bl	80047cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <xPortStartScheduler+0x140>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800461e:	f000 f8f9 	bl	8004814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004622:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <xPortStartScheduler+0x144>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a0f      	ldr	r2, [pc, #60]	@ (8004664 <xPortStartScheduler+0x144>)
 8004628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800462c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800462e:	f7ff ff63 	bl	80044f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004632:	f7ff fd31 	bl	8004098 <vTaskSwitchContext>
	prvTaskExitError();
 8004636:	f7ff ff19 	bl	800446c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	e000ed00 	.word	0xe000ed00
 8004648:	410fc271 	.word	0x410fc271
 800464c:	410fc270 	.word	0x410fc270
 8004650:	e000e400 	.word	0xe000e400
 8004654:	200004d0 	.word	0x200004d0
 8004658:	200004d4 	.word	0x200004d4
 800465c:	e000ed20 	.word	0xe000ed20
 8004660:	2000000c 	.word	0x2000000c
 8004664:	e000ef34 	.word	0xe000ef34

08004668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	607b      	str	r3, [r7, #4]
}
 8004680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004682:	4b10      	ldr	r3, [pc, #64]	@ (80046c4 <vPortEnterCritical+0x5c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	4a0e      	ldr	r2, [pc, #56]	@ (80046c4 <vPortEnterCritical+0x5c>)
 800468a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800468c:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <vPortEnterCritical+0x5c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d110      	bne.n	80046b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <vPortEnterCritical+0x60>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	603b      	str	r3, [r7, #0]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <vPortEnterCritical+0x4a>
	}
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046d2:	4b12      	ldr	r3, [pc, #72]	@ (800471c <vPortExitCritical+0x50>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <vPortExitCritical+0x26>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	607b      	str	r3, [r7, #4]
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	e7fd      	b.n	80046ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <vPortExitCritical+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	4a08      	ldr	r2, [pc, #32]	@ (800471c <vPortExitCritical+0x50>)
 80046fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <vPortExitCritical+0x50>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <vPortExitCritical+0x44>
 8004704:	2300      	movs	r3, #0
 8004706:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800470e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	2000000c 	.word	0x2000000c

08004720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f01e 0f10 	tst.w	lr, #16
 8004730:	bf08      	it	eq
 8004732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	6010      	str	r0, [r2, #0]
 800473c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004744:	f380 8811 	msr	BASEPRI, r0
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f7ff fca2 	bl	8004098 <vTaskSwitchContext>
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f380 8811 	msr	BASEPRI, r0
 800475c:	bc09      	pop	{r0, r3}
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004766:	f01e 0f10 	tst.w	lr, #16
 800476a:	bf08      	it	eq
 800476c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004770:	f380 8809 	msr	PSP, r0
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	f3af 8000 	nop.w

08004780 <pxCurrentTCBConst>:
 8004780:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
}
 80047a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047a2:	f7ff fbbf 	bl	8003f24 <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <xPortSysTickHandler+0x40>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f383 8811 	msr	BASEPRI, r3
}
 80047be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <vPortSetupTimerInterrupt+0x38>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <vPortSetupTimerInterrupt+0x3c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <vPortSetupTimerInterrupt+0x40>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <vPortSetupTimerInterrupt+0x44>)
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ee:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e010 	.word	0xe000e010
 8004804:	e000e018 	.word	0xe000e018
 8004808:	20000000 	.word	0x20000000
 800480c:	10624dd3 	.word	0x10624dd3
 8004810:	e000e014 	.word	0xe000e014

08004814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004824 <vPortEnableVFP+0x10>
 8004818:	6801      	ldr	r1, [r0, #0]
 800481a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800481e:	6001      	str	r1, [r0, #0]
 8004820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004822:	bf00      	nop
 8004824:	e000ed88 	.word	0xe000ed88

08004828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004834:	f7ff faba 	bl	8003dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004838:	4b5c      	ldr	r3, [pc, #368]	@ (80049ac <pvPortMalloc+0x184>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004840:	f000 f924 	bl	8004a8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004844:	4b5a      	ldr	r3, [pc, #360]	@ (80049b0 <pvPortMalloc+0x188>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8095 	bne.w	800497c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01e      	beq.n	8004896 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004858:	2208      	movs	r2, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d015      	beq.n	8004896 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <pvPortMalloc+0x6e>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d06f      	beq.n	800497c <pvPortMalloc+0x154>
 800489c:	4b45      	ldr	r3, [pc, #276]	@ (80049b4 <pvPortMalloc+0x18c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d86a      	bhi.n	800497c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048a6:	4b44      	ldr	r3, [pc, #272]	@ (80049b8 <pvPortMalloc+0x190>)
 80048a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048aa:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <pvPortMalloc+0x190>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048b0:	e004      	b.n	80048bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d903      	bls.n	80048ce <pvPortMalloc+0xa6>
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f1      	bne.n	80048b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048ce:	4b37      	ldr	r3, [pc, #220]	@ (80049ac <pvPortMalloc+0x184>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d051      	beq.n	800497c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2208      	movs	r2, #8
 80048de:	4413      	add	r3, r2
 80048e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	1ad2      	subs	r2, r2, r3
 80048f2:	2308      	movs	r3, #8
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d920      	bls.n	800493c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4413      	add	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <pvPortMalloc+0xfc>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	613b      	str	r3, [r7, #16]
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004936:	69b8      	ldr	r0, [r7, #24]
 8004938:	f000 f90a 	bl	8004b50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800493c:	4b1d      	ldr	r3, [pc, #116]	@ (80049b4 <pvPortMalloc+0x18c>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <pvPortMalloc+0x18c>)
 8004948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800494a:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <pvPortMalloc+0x18c>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <pvPortMalloc+0x194>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d203      	bcs.n	800495e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004956:	4b17      	ldr	r3, [pc, #92]	@ (80049b4 <pvPortMalloc+0x18c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a18      	ldr	r2, [pc, #96]	@ (80049bc <pvPortMalloc+0x194>)
 800495c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <pvPortMalloc+0x188>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	431a      	orrs	r2, r3
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004972:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <pvPortMalloc+0x198>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	4a11      	ldr	r2, [pc, #68]	@ (80049c0 <pvPortMalloc+0x198>)
 800497a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800497c:	f7ff fa24 	bl	8003dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <pvPortMalloc+0x17a>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60fb      	str	r3, [r7, #12]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <pvPortMalloc+0x176>
	return pvReturn;
 80049a2:	69fb      	ldr	r3, [r7, #28]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	@ 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20001098 	.word	0x20001098
 80049b0:	200010ac 	.word	0x200010ac
 80049b4:	2000109c 	.word	0x2000109c
 80049b8:	20001090 	.word	0x20001090
 80049bc:	200010a0 	.word	0x200010a0
 80049c0:	200010a4 	.word	0x200010a4

080049c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04f      	beq.n	8004a76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049d6:	2308      	movs	r3, #8
 80049d8:	425b      	negs	r3, r3
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4413      	add	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	4b25      	ldr	r3, [pc, #148]	@ (8004a80 <vPortFree+0xbc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <vPortFree+0x46>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <vPortFree+0x66>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60bb      	str	r3, [r7, #8]
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	e7fd      	b.n	8004a26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	4b14      	ldr	r3, [pc, #80]	@ (8004a80 <vPortFree+0xbc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01e      	beq.n	8004a76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11a      	bne.n	8004a76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <vPortFree+0xbc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a50:	f7ff f9ac 	bl	8003dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <vPortFree+0xc0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	4a09      	ldr	r2, [pc, #36]	@ (8004a84 <vPortFree+0xc0>)
 8004a60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a62:	6938      	ldr	r0, [r7, #16]
 8004a64:	f000 f874 	bl	8004b50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <vPortFree+0xc4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a06      	ldr	r2, [pc, #24]	@ (8004a88 <vPortFree+0xc4>)
 8004a70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a72:	f7ff f9a9 	bl	8003dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a76:	bf00      	nop
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200010ac 	.word	0x200010ac
 8004a84:	2000109c 	.word	0x2000109c
 8004a88:	200010a8 	.word	0x200010a8

08004a8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004a96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a98:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <prvHeapInit+0xac>)
 8004a9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3307      	adds	r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0307 	bic.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	4a1f      	ldr	r2, [pc, #124]	@ (8004b38 <prvHeapInit+0xac>)
 8004abc:	4413      	add	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <prvHeapInit+0xb0>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004aca:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <prvHeapInit+0xb0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ad8:	2208      	movs	r2, #8
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a15      	ldr	r2, [pc, #84]	@ (8004b40 <prvHeapInit+0xb4>)
 8004aec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004aee:	4b14      	ldr	r3, [pc, #80]	@ (8004b40 <prvHeapInit+0xb4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <prvHeapInit+0xb4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <prvHeapInit+0xb4>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a0a      	ldr	r2, [pc, #40]	@ (8004b44 <prvHeapInit+0xb8>)
 8004b1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <prvHeapInit+0xbc>)
 8004b22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b24:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <prvHeapInit+0xc0>)
 8004b26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b2a:	601a      	str	r2, [r3, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	200004d8 	.word	0x200004d8
 8004b3c:	20001090 	.word	0x20001090
 8004b40:	20001098 	.word	0x20001098
 8004b44:	200010a0 	.word	0x200010a0
 8004b48:	2000109c 	.word	0x2000109c
 8004b4c:	200010ac 	.word	0x200010ac

08004b50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b58:	4b28      	ldr	r3, [pc, #160]	@ (8004bfc <prvInsertBlockIntoFreeList+0xac>)
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e002      	b.n	8004b64 <prvInsertBlockIntoFreeList+0x14>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d8f7      	bhi.n	8004b5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d108      	bne.n	8004b92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	441a      	add	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d118      	bne.n	8004bd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <prvInsertBlockIntoFreeList+0xb0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d00d      	beq.n	8004bce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e008      	b.n	8004be0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bce:	4b0c      	ldr	r3, [pc, #48]	@ (8004c00 <prvInsertBlockIntoFreeList+0xb0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e003      	b.n	8004be0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d002      	beq.n	8004bee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20001090 	.word	0x20001090
 8004c00:	20001098 	.word	0x20001098

08004c04 <siprintf>:
 8004c04:	b40e      	push	{r1, r2, r3}
 8004c06:	b510      	push	{r4, lr}
 8004c08:	b09d      	sub	sp, #116	@ 0x74
 8004c0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	9006      	str	r0, [sp, #24]
 8004c10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c14:	480a      	ldr	r0, [pc, #40]	@ (8004c40 <siprintf+0x3c>)
 8004c16:	9107      	str	r1, [sp, #28]
 8004c18:	9104      	str	r1, [sp, #16]
 8004c1a:	490a      	ldr	r1, [pc, #40]	@ (8004c44 <siprintf+0x40>)
 8004c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	2400      	movs	r4, #0
 8004c24:	a902      	add	r1, sp, #8
 8004c26:	6800      	ldr	r0, [r0, #0]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c2c:	f000 f9a2 	bl	8004f74 <_svfiprintf_r>
 8004c30:	9b02      	ldr	r3, [sp, #8]
 8004c32:	701c      	strb	r4, [r3, #0]
 8004c34:	b01d      	add	sp, #116	@ 0x74
 8004c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c3a:	b003      	add	sp, #12
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000010 	.word	0x20000010
 8004c44:	ffff0208 	.word	0xffff0208

08004c48 <memset>:
 8004c48:	4402      	add	r2, r0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <__errno>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	@ (8004c60 <__errno+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000010 	.word	0x20000010

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4d0d      	ldr	r5, [pc, #52]	@ (8004c9c <__libc_init_array+0x38>)
 8004c68:	4c0d      	ldr	r4, [pc, #52]	@ (8004ca0 <__libc_init_array+0x3c>)
 8004c6a:	1b64      	subs	r4, r4, r5
 8004c6c:	10a4      	asrs	r4, r4, #2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	4d0b      	ldr	r5, [pc, #44]	@ (8004ca4 <__libc_init_array+0x40>)
 8004c76:	4c0c      	ldr	r4, [pc, #48]	@ (8004ca8 <__libc_init_array+0x44>)
 8004c78:	f000 fc64 	bl	8005544 <_init>
 8004c7c:	1b64      	subs	r4, r4, r5
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	2600      	movs	r6, #0
 8004c82:	42a6      	cmp	r6, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8c:	4798      	blx	r3
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c96:	4798      	blx	r3
 8004c98:	3601      	adds	r6, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	080056b0 	.word	0x080056b0
 8004ca0:	080056b0 	.word	0x080056b0
 8004ca4:	080056b0 	.word	0x080056b0
 8004ca8:	080056b4 	.word	0x080056b4

08004cac <__retarget_lock_acquire_recursive>:
 8004cac:	4770      	bx	lr

08004cae <__retarget_lock_release_recursive>:
 8004cae:	4770      	bx	lr

08004cb0 <memcpy>:
 8004cb0:	440a      	add	r2, r1
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cb8:	d100      	bne.n	8004cbc <memcpy+0xc>
 8004cba:	4770      	bx	lr
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cc6:	4291      	cmp	r1, r2
 8004cc8:	d1f9      	bne.n	8004cbe <memcpy+0xe>
 8004cca:	bd10      	pop	{r4, pc}

08004ccc <_free_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4605      	mov	r5, r0
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d041      	beq.n	8004d58 <_free_r+0x8c>
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f0c      	subs	r4, r1, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfb8      	it	lt
 8004cde:	18e4      	addlt	r4, r4, r3
 8004ce0:	f000 f8e0 	bl	8004ea4 <__malloc_lock>
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d5c <_free_r+0x90>)
 8004ce6:	6813      	ldr	r3, [r2, #0]
 8004ce8:	b933      	cbnz	r3, 8004cf8 <_free_r+0x2c>
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	6014      	str	r4, [r2, #0]
 8004cee:	4628      	mov	r0, r5
 8004cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf4:	f000 b8dc 	b.w	8004eb0 <__malloc_unlock>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d908      	bls.n	8004d0e <_free_r+0x42>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf01      	itttt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	1809      	addeq	r1, r1, r0
 8004d0a:	6021      	streq	r1, [r4, #0]
 8004d0c:	e7ed      	b.n	8004cea <_free_r+0x1e>
 8004d0e:	461a      	mov	r2, r3
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b10b      	cbz	r3, 8004d18 <_free_r+0x4c>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d9fa      	bls.n	8004d0e <_free_r+0x42>
 8004d18:	6811      	ldr	r1, [r2, #0]
 8004d1a:	1850      	adds	r0, r2, r1
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d10b      	bne.n	8004d38 <_free_r+0x6c>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4401      	add	r1, r0
 8004d24:	1850      	adds	r0, r2, r1
 8004d26:	4283      	cmp	r3, r0
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	d1e0      	bne.n	8004cee <_free_r+0x22>
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	6053      	str	r3, [r2, #4]
 8004d32:	4408      	add	r0, r1
 8004d34:	6010      	str	r0, [r2, #0]
 8004d36:	e7da      	b.n	8004cee <_free_r+0x22>
 8004d38:	d902      	bls.n	8004d40 <_free_r+0x74>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	e7d6      	b.n	8004cee <_free_r+0x22>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428b      	cmp	r3, r1
 8004d46:	bf04      	itt	eq
 8004d48:	6819      	ldreq	r1, [r3, #0]
 8004d4a:	685b      	ldreq	r3, [r3, #4]
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	bf04      	itt	eq
 8004d50:	1809      	addeq	r1, r1, r0
 8004d52:	6021      	streq	r1, [r4, #0]
 8004d54:	6054      	str	r4, [r2, #4]
 8004d56:	e7ca      	b.n	8004cee <_free_r+0x22>
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200011f4 	.word	0x200011f4

08004d60 <sbrk_aligned>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4e0f      	ldr	r6, [pc, #60]	@ (8004da0 <sbrk_aligned+0x40>)
 8004d64:	460c      	mov	r4, r1
 8004d66:	6831      	ldr	r1, [r6, #0]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	b911      	cbnz	r1, 8004d72 <sbrk_aligned+0x12>
 8004d6c:	f000 fba4 	bl	80054b8 <_sbrk_r>
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	4621      	mov	r1, r4
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 fb9f 	bl	80054b8 <_sbrk_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	d103      	bne.n	8004d86 <sbrk_aligned+0x26>
 8004d7e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d82:	4620      	mov	r0, r4
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	1cc4      	adds	r4, r0, #3
 8004d88:	f024 0403 	bic.w	r4, r4, #3
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d0f8      	beq.n	8004d82 <sbrk_aligned+0x22>
 8004d90:	1a21      	subs	r1, r4, r0
 8004d92:	4628      	mov	r0, r5
 8004d94:	f000 fb90 	bl	80054b8 <_sbrk_r>
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d1f2      	bne.n	8004d82 <sbrk_aligned+0x22>
 8004d9c:	e7ef      	b.n	8004d7e <sbrk_aligned+0x1e>
 8004d9e:	bf00      	nop
 8004da0:	200011f0 	.word	0x200011f0

08004da4 <_malloc_r>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	1ccd      	adds	r5, r1, #3
 8004daa:	f025 0503 	bic.w	r5, r5, #3
 8004dae:	3508      	adds	r5, #8
 8004db0:	2d0c      	cmp	r5, #12
 8004db2:	bf38      	it	cc
 8004db4:	250c      	movcc	r5, #12
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	4606      	mov	r6, r0
 8004dba:	db01      	blt.n	8004dc0 <_malloc_r+0x1c>
 8004dbc:	42a9      	cmp	r1, r5
 8004dbe:	d904      	bls.n	8004dca <_malloc_r+0x26>
 8004dc0:	230c      	movs	r3, #12
 8004dc2:	6033      	str	r3, [r6, #0]
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ea0 <_malloc_r+0xfc>
 8004dce:	f000 f869 	bl	8004ea4 <__malloc_lock>
 8004dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd6:	461c      	mov	r4, r3
 8004dd8:	bb44      	cbnz	r4, 8004e2c <_malloc_r+0x88>
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f7ff ffbf 	bl	8004d60 <sbrk_aligned>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	4604      	mov	r4, r0
 8004de6:	d158      	bne.n	8004e9a <_malloc_r+0xf6>
 8004de8:	f8d8 4000 	ldr.w	r4, [r8]
 8004dec:	4627      	mov	r7, r4
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	d143      	bne.n	8004e7a <_malloc_r+0xd6>
 8004df2:	2c00      	cmp	r4, #0
 8004df4:	d04b      	beq.n	8004e8e <_malloc_r+0xea>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	4639      	mov	r1, r7
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	eb04 0903 	add.w	r9, r4, r3
 8004e00:	f000 fb5a 	bl	80054b8 <_sbrk_r>
 8004e04:	4581      	cmp	r9, r0
 8004e06:	d142      	bne.n	8004e8e <_malloc_r+0xea>
 8004e08:	6821      	ldr	r1, [r4, #0]
 8004e0a:	1a6d      	subs	r5, r5, r1
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f7ff ffa6 	bl	8004d60 <sbrk_aligned>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d03a      	beq.n	8004e8e <_malloc_r+0xea>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	442b      	add	r3, r5
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	bb62      	cbnz	r2, 8004e80 <_malloc_r+0xdc>
 8004e26:	f8c8 7000 	str.w	r7, [r8]
 8004e2a:	e00f      	b.n	8004e4c <_malloc_r+0xa8>
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	1b52      	subs	r2, r2, r5
 8004e30:	d420      	bmi.n	8004e74 <_malloc_r+0xd0>
 8004e32:	2a0b      	cmp	r2, #11
 8004e34:	d917      	bls.n	8004e66 <_malloc_r+0xc2>
 8004e36:	1961      	adds	r1, r4, r5
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	6025      	str	r5, [r4, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	6059      	strne	r1, [r3, #4]
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	bf08      	it	eq
 8004e44:	f8c8 1000 	streq.w	r1, [r8]
 8004e48:	5162      	str	r2, [r4, r5]
 8004e4a:	604b      	str	r3, [r1, #4]
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 f82f 	bl	8004eb0 <__malloc_unlock>
 8004e52:	f104 000b 	add.w	r0, r4, #11
 8004e56:	1d23      	adds	r3, r4, #4
 8004e58:	f020 0007 	bic.w	r0, r0, #7
 8004e5c:	1ac2      	subs	r2, r0, r3
 8004e5e:	bf1c      	itt	ne
 8004e60:	1a1b      	subne	r3, r3, r0
 8004e62:	50a3      	strne	r3, [r4, r2]
 8004e64:	e7af      	b.n	8004dc6 <_malloc_r+0x22>
 8004e66:	6862      	ldr	r2, [r4, #4]
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	bf0c      	ite	eq
 8004e6c:	f8c8 2000 	streq.w	r2, [r8]
 8004e70:	605a      	strne	r2, [r3, #4]
 8004e72:	e7eb      	b.n	8004e4c <_malloc_r+0xa8>
 8004e74:	4623      	mov	r3, r4
 8004e76:	6864      	ldr	r4, [r4, #4]
 8004e78:	e7ae      	b.n	8004dd8 <_malloc_r+0x34>
 8004e7a:	463c      	mov	r4, r7
 8004e7c:	687f      	ldr	r7, [r7, #4]
 8004e7e:	e7b6      	b.n	8004dee <_malloc_r+0x4a>
 8004e80:	461a      	mov	r2, r3
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d1fb      	bne.n	8004e80 <_malloc_r+0xdc>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6053      	str	r3, [r2, #4]
 8004e8c:	e7de      	b.n	8004e4c <_malloc_r+0xa8>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 f80c 	bl	8004eb0 <__malloc_unlock>
 8004e98:	e794      	b.n	8004dc4 <_malloc_r+0x20>
 8004e9a:	6005      	str	r5, [r0, #0]
 8004e9c:	e7d6      	b.n	8004e4c <_malloc_r+0xa8>
 8004e9e:	bf00      	nop
 8004ea0:	200011f4 	.word	0x200011f4

08004ea4 <__malloc_lock>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	@ (8004eac <__malloc_lock+0x8>)
 8004ea6:	f7ff bf01 	b.w	8004cac <__retarget_lock_acquire_recursive>
 8004eaa:	bf00      	nop
 8004eac:	200011ec 	.word	0x200011ec

08004eb0 <__malloc_unlock>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	@ (8004eb8 <__malloc_unlock+0x8>)
 8004eb2:	f7ff befc 	b.w	8004cae <__retarget_lock_release_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	200011ec 	.word	0x200011ec

08004ebc <__ssputs_r>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	688e      	ldr	r6, [r1, #8]
 8004ec2:	461f      	mov	r7, r3
 8004ec4:	42be      	cmp	r6, r7
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	4682      	mov	sl, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	4690      	mov	r8, r2
 8004ece:	d82d      	bhi.n	8004f2c <__ssputs_r+0x70>
 8004ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ed8:	d026      	beq.n	8004f28 <__ssputs_r+0x6c>
 8004eda:	6965      	ldr	r5, [r4, #20]
 8004edc:	6909      	ldr	r1, [r1, #16]
 8004ede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee2:	eba3 0901 	sub.w	r9, r3, r1
 8004ee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eea:	1c7b      	adds	r3, r7, #1
 8004eec:	444b      	add	r3, r9
 8004eee:	106d      	asrs	r5, r5, #1
 8004ef0:	429d      	cmp	r5, r3
 8004ef2:	bf38      	it	cc
 8004ef4:	461d      	movcc	r5, r3
 8004ef6:	0553      	lsls	r3, r2, #21
 8004ef8:	d527      	bpl.n	8004f4a <__ssputs_r+0x8e>
 8004efa:	4629      	mov	r1, r5
 8004efc:	f7ff ff52 	bl	8004da4 <_malloc_r>
 8004f00:	4606      	mov	r6, r0
 8004f02:	b360      	cbz	r0, 8004f5e <__ssputs_r+0xa2>
 8004f04:	6921      	ldr	r1, [r4, #16]
 8004f06:	464a      	mov	r2, r9
 8004f08:	f7ff fed2 	bl	8004cb0 <memcpy>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	6126      	str	r6, [r4, #16]
 8004f1a:	6165      	str	r5, [r4, #20]
 8004f1c:	444e      	add	r6, r9
 8004f1e:	eba5 0509 	sub.w	r5, r5, r9
 8004f22:	6026      	str	r6, [r4, #0]
 8004f24:	60a5      	str	r5, [r4, #8]
 8004f26:	463e      	mov	r6, r7
 8004f28:	42be      	cmp	r6, r7
 8004f2a:	d900      	bls.n	8004f2e <__ssputs_r+0x72>
 8004f2c:	463e      	mov	r6, r7
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	4632      	mov	r2, r6
 8004f32:	4641      	mov	r1, r8
 8004f34:	f000 faa6 	bl	8005484 <memmove>
 8004f38:	68a3      	ldr	r3, [r4, #8]
 8004f3a:	1b9b      	subs	r3, r3, r6
 8004f3c:	60a3      	str	r3, [r4, #8]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	4433      	add	r3, r6
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	2000      	movs	r0, #0
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	462a      	mov	r2, r5
 8004f4c:	f000 fac4 	bl	80054d8 <_realloc_r>
 8004f50:	4606      	mov	r6, r0
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d1e0      	bne.n	8004f18 <__ssputs_r+0x5c>
 8004f56:	6921      	ldr	r1, [r4, #16]
 8004f58:	4650      	mov	r0, sl
 8004f5a:	f7ff feb7 	bl	8004ccc <_free_r>
 8004f5e:	230c      	movs	r3, #12
 8004f60:	f8ca 3000 	str.w	r3, [sl]
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	e7e9      	b.n	8004f46 <__ssputs_r+0x8a>
	...

08004f74 <_svfiprintf_r>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	4698      	mov	r8, r3
 8004f7a:	898b      	ldrh	r3, [r1, #12]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	b09d      	sub	sp, #116	@ 0x74
 8004f80:	4607      	mov	r7, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	4614      	mov	r4, r2
 8004f86:	d510      	bpl.n	8004faa <_svfiprintf_r+0x36>
 8004f88:	690b      	ldr	r3, [r1, #16]
 8004f8a:	b973      	cbnz	r3, 8004faa <_svfiprintf_r+0x36>
 8004f8c:	2140      	movs	r1, #64	@ 0x40
 8004f8e:	f7ff ff09 	bl	8004da4 <_malloc_r>
 8004f92:	6028      	str	r0, [r5, #0]
 8004f94:	6128      	str	r0, [r5, #16]
 8004f96:	b930      	cbnz	r0, 8004fa6 <_svfiprintf_r+0x32>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	b01d      	add	sp, #116	@ 0x74
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa6:	2340      	movs	r3, #64	@ 0x40
 8004fa8:	616b      	str	r3, [r5, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fae:	2320      	movs	r3, #32
 8004fb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb8:	2330      	movs	r3, #48	@ 0x30
 8004fba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005158 <_svfiprintf_r+0x1e4>
 8004fbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fc2:	f04f 0901 	mov.w	r9, #1
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fce:	b10a      	cbz	r2, 8004fd4 <_svfiprintf_r+0x60>
 8004fd0:	2a25      	cmp	r2, #37	@ 0x25
 8004fd2:	d1f9      	bne.n	8004fc8 <_svfiprintf_r+0x54>
 8004fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd8:	d00b      	beq.n	8004ff2 <_svfiprintf_r+0x7e>
 8004fda:	465b      	mov	r3, fp
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ff6b 	bl	8004ebc <__ssputs_r>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f000 80a7 	beq.w	800513a <_svfiprintf_r+0x1c6>
 8004fec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fee:	445a      	add	r2, fp
 8004ff0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 809f 	beq.w	800513a <_svfiprintf_r+0x1c6>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005006:	f10a 0a01 	add.w	sl, sl, #1
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	9307      	str	r3, [sp, #28]
 800500e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005012:	931a      	str	r3, [sp, #104]	@ 0x68
 8005014:	4654      	mov	r4, sl
 8005016:	2205      	movs	r2, #5
 8005018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501c:	484e      	ldr	r0, [pc, #312]	@ (8005158 <_svfiprintf_r+0x1e4>)
 800501e:	f7fb f8df 	bl	80001e0 <memchr>
 8005022:	9a04      	ldr	r2, [sp, #16]
 8005024:	b9d8      	cbnz	r0, 800505e <_svfiprintf_r+0xea>
 8005026:	06d0      	lsls	r0, r2, #27
 8005028:	bf44      	itt	mi
 800502a:	2320      	movmi	r3, #32
 800502c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005030:	0711      	lsls	r1, r2, #28
 8005032:	bf44      	itt	mi
 8005034:	232b      	movmi	r3, #43	@ 0x2b
 8005036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800503a:	f89a 3000 	ldrb.w	r3, [sl]
 800503e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005040:	d015      	beq.n	800506e <_svfiprintf_r+0xfa>
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	4654      	mov	r4, sl
 8005046:	2000      	movs	r0, #0
 8005048:	f04f 0c0a 	mov.w	ip, #10
 800504c:	4621      	mov	r1, r4
 800504e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005052:	3b30      	subs	r3, #48	@ 0x30
 8005054:	2b09      	cmp	r3, #9
 8005056:	d94b      	bls.n	80050f0 <_svfiprintf_r+0x17c>
 8005058:	b1b0      	cbz	r0, 8005088 <_svfiprintf_r+0x114>
 800505a:	9207      	str	r2, [sp, #28]
 800505c:	e014      	b.n	8005088 <_svfiprintf_r+0x114>
 800505e:	eba0 0308 	sub.w	r3, r0, r8
 8005062:	fa09 f303 	lsl.w	r3, r9, r3
 8005066:	4313      	orrs	r3, r2
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	46a2      	mov	sl, r4
 800506c:	e7d2      	b.n	8005014 <_svfiprintf_r+0xa0>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9103      	str	r1, [sp, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfbb      	ittet	lt
 800507a:	425b      	neglt	r3, r3
 800507c:	f042 0202 	orrlt.w	r2, r2, #2
 8005080:	9307      	strge	r3, [sp, #28]
 8005082:	9307      	strlt	r3, [sp, #28]
 8005084:	bfb8      	it	lt
 8005086:	9204      	strlt	r2, [sp, #16]
 8005088:	7823      	ldrb	r3, [r4, #0]
 800508a:	2b2e      	cmp	r3, #46	@ 0x2e
 800508c:	d10a      	bne.n	80050a4 <_svfiprintf_r+0x130>
 800508e:	7863      	ldrb	r3, [r4, #1]
 8005090:	2b2a      	cmp	r3, #42	@ 0x2a
 8005092:	d132      	bne.n	80050fa <_svfiprintf_r+0x186>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1d1a      	adds	r2, r3, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050a0:	3402      	adds	r4, #2
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005168 <_svfiprintf_r+0x1f4>
 80050a8:	7821      	ldrb	r1, [r4, #0]
 80050aa:	2203      	movs	r2, #3
 80050ac:	4650      	mov	r0, sl
 80050ae:	f7fb f897 	bl	80001e0 <memchr>
 80050b2:	b138      	cbz	r0, 80050c4 <_svfiprintf_r+0x150>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	eba0 000a 	sub.w	r0, r0, sl
 80050ba:	2240      	movs	r2, #64	@ 0x40
 80050bc:	4082      	lsls	r2, r0
 80050be:	4313      	orrs	r3, r2
 80050c0:	3401      	adds	r4, #1
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c8:	4824      	ldr	r0, [pc, #144]	@ (800515c <_svfiprintf_r+0x1e8>)
 80050ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050ce:	2206      	movs	r2, #6
 80050d0:	f7fb f886 	bl	80001e0 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d036      	beq.n	8005146 <_svfiprintf_r+0x1d2>
 80050d8:	4b21      	ldr	r3, [pc, #132]	@ (8005160 <_svfiprintf_r+0x1ec>)
 80050da:	bb1b      	cbnz	r3, 8005124 <_svfiprintf_r+0x1b0>
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	3307      	adds	r3, #7
 80050e0:	f023 0307 	bic.w	r3, r3, #7
 80050e4:	3308      	adds	r3, #8
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050ea:	4433      	add	r3, r6
 80050ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ee:	e76a      	b.n	8004fc6 <_svfiprintf_r+0x52>
 80050f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050f4:	460c      	mov	r4, r1
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7a8      	b.n	800504c <_svfiprintf_r+0xd8>
 80050fa:	2300      	movs	r3, #0
 80050fc:	3401      	adds	r4, #1
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	4619      	mov	r1, r3
 8005102:	f04f 0c0a 	mov.w	ip, #10
 8005106:	4620      	mov	r0, r4
 8005108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510c:	3a30      	subs	r2, #48	@ 0x30
 800510e:	2a09      	cmp	r2, #9
 8005110:	d903      	bls.n	800511a <_svfiprintf_r+0x1a6>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0c6      	beq.n	80050a4 <_svfiprintf_r+0x130>
 8005116:	9105      	str	r1, [sp, #20]
 8005118:	e7c4      	b.n	80050a4 <_svfiprintf_r+0x130>
 800511a:	fb0c 2101 	mla	r1, ip, r1, r2
 800511e:	4604      	mov	r4, r0
 8005120:	2301      	movs	r3, #1
 8005122:	e7f0      	b.n	8005106 <_svfiprintf_r+0x192>
 8005124:	ab03      	add	r3, sp, #12
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	462a      	mov	r2, r5
 800512a:	4b0e      	ldr	r3, [pc, #56]	@ (8005164 <_svfiprintf_r+0x1f0>)
 800512c:	a904      	add	r1, sp, #16
 800512e:	4638      	mov	r0, r7
 8005130:	f3af 8000 	nop.w
 8005134:	1c42      	adds	r2, r0, #1
 8005136:	4606      	mov	r6, r0
 8005138:	d1d6      	bne.n	80050e8 <_svfiprintf_r+0x174>
 800513a:	89ab      	ldrh	r3, [r5, #12]
 800513c:	065b      	lsls	r3, r3, #25
 800513e:	f53f af2d 	bmi.w	8004f9c <_svfiprintf_r+0x28>
 8005142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005144:	e72c      	b.n	8004fa0 <_svfiprintf_r+0x2c>
 8005146:	ab03      	add	r3, sp, #12
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	462a      	mov	r2, r5
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <_svfiprintf_r+0x1f0>)
 800514e:	a904      	add	r1, sp, #16
 8005150:	4638      	mov	r0, r7
 8005152:	f000 f879 	bl	8005248 <_printf_i>
 8005156:	e7ed      	b.n	8005134 <_svfiprintf_r+0x1c0>
 8005158:	08005674 	.word	0x08005674
 800515c:	0800567e 	.word	0x0800567e
 8005160:	00000000 	.word	0x00000000
 8005164:	08004ebd 	.word	0x08004ebd
 8005168:	0800567a 	.word	0x0800567a

0800516c <_printf_common>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	4616      	mov	r6, r2
 8005172:	4698      	mov	r8, r3
 8005174:	688a      	ldr	r2, [r1, #8]
 8005176:	690b      	ldr	r3, [r1, #16]
 8005178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800517c:	4293      	cmp	r3, r2
 800517e:	bfb8      	it	lt
 8005180:	4613      	movlt	r3, r2
 8005182:	6033      	str	r3, [r6, #0]
 8005184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005188:	4607      	mov	r7, r0
 800518a:	460c      	mov	r4, r1
 800518c:	b10a      	cbz	r2, 8005192 <_printf_common+0x26>
 800518e:	3301      	adds	r3, #1
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	0699      	lsls	r1, r3, #26
 8005196:	bf42      	ittt	mi
 8005198:	6833      	ldrmi	r3, [r6, #0]
 800519a:	3302      	addmi	r3, #2
 800519c:	6033      	strmi	r3, [r6, #0]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	f015 0506 	ands.w	r5, r5, #6
 80051a4:	d106      	bne.n	80051b4 <_printf_common+0x48>
 80051a6:	f104 0a19 	add.w	sl, r4, #25
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	6832      	ldr	r2, [r6, #0]
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	dc26      	bgt.n	8005202 <_printf_common+0x96>
 80051b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	3b00      	subs	r3, #0
 80051bc:	bf18      	it	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	0692      	lsls	r2, r2, #26
 80051c2:	d42b      	bmi.n	800521c <_printf_common+0xb0>
 80051c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051c8:	4641      	mov	r1, r8
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c8      	blx	r9
 80051ce:	3001      	adds	r0, #1
 80051d0:	d01e      	beq.n	8005210 <_printf_common+0xa4>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	6922      	ldr	r2, [r4, #16]
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf02      	ittt	eq
 80051de:	68e5      	ldreq	r5, [r4, #12]
 80051e0:	6833      	ldreq	r3, [r6, #0]
 80051e2:	1aed      	subeq	r5, r5, r3
 80051e4:	68a3      	ldr	r3, [r4, #8]
 80051e6:	bf0c      	ite	eq
 80051e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ec:	2500      	movne	r5, #0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	bfc4      	itt	gt
 80051f2:	1a9b      	subgt	r3, r3, r2
 80051f4:	18ed      	addgt	r5, r5, r3
 80051f6:	2600      	movs	r6, #0
 80051f8:	341a      	adds	r4, #26
 80051fa:	42b5      	cmp	r5, r6
 80051fc:	d11a      	bne.n	8005234 <_printf_common+0xc8>
 80051fe:	2000      	movs	r0, #0
 8005200:	e008      	b.n	8005214 <_printf_common+0xa8>
 8005202:	2301      	movs	r3, #1
 8005204:	4652      	mov	r2, sl
 8005206:	4641      	mov	r1, r8
 8005208:	4638      	mov	r0, r7
 800520a:	47c8      	blx	r9
 800520c:	3001      	adds	r0, #1
 800520e:	d103      	bne.n	8005218 <_printf_common+0xac>
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	3501      	adds	r5, #1
 800521a:	e7c6      	b.n	80051aa <_printf_common+0x3e>
 800521c:	18e1      	adds	r1, r4, r3
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	2030      	movs	r0, #48	@ 0x30
 8005222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005226:	4422      	add	r2, r4
 8005228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800522c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005230:	3302      	adds	r3, #2
 8005232:	e7c7      	b.n	80051c4 <_printf_common+0x58>
 8005234:	2301      	movs	r3, #1
 8005236:	4622      	mov	r2, r4
 8005238:	4641      	mov	r1, r8
 800523a:	4638      	mov	r0, r7
 800523c:	47c8      	blx	r9
 800523e:	3001      	adds	r0, #1
 8005240:	d0e6      	beq.n	8005210 <_printf_common+0xa4>
 8005242:	3601      	adds	r6, #1
 8005244:	e7d9      	b.n	80051fa <_printf_common+0x8e>
	...

08005248 <_printf_i>:
 8005248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	7e0f      	ldrb	r7, [r1, #24]
 800524e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005250:	2f78      	cmp	r7, #120	@ 0x78
 8005252:	4691      	mov	r9, r2
 8005254:	4680      	mov	r8, r0
 8005256:	460c      	mov	r4, r1
 8005258:	469a      	mov	sl, r3
 800525a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800525e:	d807      	bhi.n	8005270 <_printf_i+0x28>
 8005260:	2f62      	cmp	r7, #98	@ 0x62
 8005262:	d80a      	bhi.n	800527a <_printf_i+0x32>
 8005264:	2f00      	cmp	r7, #0
 8005266:	f000 80d1 	beq.w	800540c <_printf_i+0x1c4>
 800526a:	2f58      	cmp	r7, #88	@ 0x58
 800526c:	f000 80b8 	beq.w	80053e0 <_printf_i+0x198>
 8005270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005278:	e03a      	b.n	80052f0 <_printf_i+0xa8>
 800527a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800527e:	2b15      	cmp	r3, #21
 8005280:	d8f6      	bhi.n	8005270 <_printf_i+0x28>
 8005282:	a101      	add	r1, pc, #4	@ (adr r1, 8005288 <_printf_i+0x40>)
 8005284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052f5 	.word	0x080052f5
 8005290:	08005271 	.word	0x08005271
 8005294:	08005271 	.word	0x08005271
 8005298:	08005271 	.word	0x08005271
 800529c:	08005271 	.word	0x08005271
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005271 	.word	0x08005271
 80052a8:	08005271 	.word	0x08005271
 80052ac:	08005271 	.word	0x08005271
 80052b0:	08005271 	.word	0x08005271
 80052b4:	080053f3 	.word	0x080053f3
 80052b8:	0800531f 	.word	0x0800531f
 80052bc:	080053ad 	.word	0x080053ad
 80052c0:	08005271 	.word	0x08005271
 80052c4:	08005271 	.word	0x08005271
 80052c8:	08005415 	.word	0x08005415
 80052cc:	08005271 	.word	0x08005271
 80052d0:	0800531f 	.word	0x0800531f
 80052d4:	08005271 	.word	0x08005271
 80052d8:	08005271 	.word	0x08005271
 80052dc:	080053b5 	.word	0x080053b5
 80052e0:	6833      	ldr	r3, [r6, #0]
 80052e2:	1d1a      	adds	r2, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6032      	str	r2, [r6, #0]
 80052e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052f0:	2301      	movs	r3, #1
 80052f2:	e09c      	b.n	800542e <_printf_i+0x1e6>
 80052f4:	6833      	ldr	r3, [r6, #0]
 80052f6:	6820      	ldr	r0, [r4, #0]
 80052f8:	1d19      	adds	r1, r3, #4
 80052fa:	6031      	str	r1, [r6, #0]
 80052fc:	0606      	lsls	r6, r0, #24
 80052fe:	d501      	bpl.n	8005304 <_printf_i+0xbc>
 8005300:	681d      	ldr	r5, [r3, #0]
 8005302:	e003      	b.n	800530c <_printf_i+0xc4>
 8005304:	0645      	lsls	r5, r0, #25
 8005306:	d5fb      	bpl.n	8005300 <_printf_i+0xb8>
 8005308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800530c:	2d00      	cmp	r5, #0
 800530e:	da03      	bge.n	8005318 <_printf_i+0xd0>
 8005310:	232d      	movs	r3, #45	@ 0x2d
 8005312:	426d      	negs	r5, r5
 8005314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005318:	4858      	ldr	r0, [pc, #352]	@ (800547c <_printf_i+0x234>)
 800531a:	230a      	movs	r3, #10
 800531c:	e011      	b.n	8005342 <_printf_i+0xfa>
 800531e:	6821      	ldr	r1, [r4, #0]
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	0608      	lsls	r0, r1, #24
 8005324:	f853 5b04 	ldr.w	r5, [r3], #4
 8005328:	d402      	bmi.n	8005330 <_printf_i+0xe8>
 800532a:	0649      	lsls	r1, r1, #25
 800532c:	bf48      	it	mi
 800532e:	b2ad      	uxthmi	r5, r5
 8005330:	2f6f      	cmp	r7, #111	@ 0x6f
 8005332:	4852      	ldr	r0, [pc, #328]	@ (800547c <_printf_i+0x234>)
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	bf14      	ite	ne
 8005338:	230a      	movne	r3, #10
 800533a:	2308      	moveq	r3, #8
 800533c:	2100      	movs	r1, #0
 800533e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005342:	6866      	ldr	r6, [r4, #4]
 8005344:	60a6      	str	r6, [r4, #8]
 8005346:	2e00      	cmp	r6, #0
 8005348:	db05      	blt.n	8005356 <_printf_i+0x10e>
 800534a:	6821      	ldr	r1, [r4, #0]
 800534c:	432e      	orrs	r6, r5
 800534e:	f021 0104 	bic.w	r1, r1, #4
 8005352:	6021      	str	r1, [r4, #0]
 8005354:	d04b      	beq.n	80053ee <_printf_i+0x1a6>
 8005356:	4616      	mov	r6, r2
 8005358:	fbb5 f1f3 	udiv	r1, r5, r3
 800535c:	fb03 5711 	mls	r7, r3, r1, r5
 8005360:	5dc7      	ldrb	r7, [r0, r7]
 8005362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005366:	462f      	mov	r7, r5
 8005368:	42bb      	cmp	r3, r7
 800536a:	460d      	mov	r5, r1
 800536c:	d9f4      	bls.n	8005358 <_printf_i+0x110>
 800536e:	2b08      	cmp	r3, #8
 8005370:	d10b      	bne.n	800538a <_printf_i+0x142>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	07df      	lsls	r7, r3, #31
 8005376:	d508      	bpl.n	800538a <_printf_i+0x142>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	6861      	ldr	r1, [r4, #4]
 800537c:	4299      	cmp	r1, r3
 800537e:	bfde      	ittt	le
 8005380:	2330      	movle	r3, #48	@ 0x30
 8005382:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005386:	f106 36ff 	addle.w	r6, r6, #4294967295
 800538a:	1b92      	subs	r2, r2, r6
 800538c:	6122      	str	r2, [r4, #16]
 800538e:	f8cd a000 	str.w	sl, [sp]
 8005392:	464b      	mov	r3, r9
 8005394:	aa03      	add	r2, sp, #12
 8005396:	4621      	mov	r1, r4
 8005398:	4640      	mov	r0, r8
 800539a:	f7ff fee7 	bl	800516c <_printf_common>
 800539e:	3001      	adds	r0, #1
 80053a0:	d14a      	bne.n	8005438 <_printf_i+0x1f0>
 80053a2:	f04f 30ff 	mov.w	r0, #4294967295
 80053a6:	b004      	add	sp, #16
 80053a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	f043 0320 	orr.w	r3, r3, #32
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	4832      	ldr	r0, [pc, #200]	@ (8005480 <_printf_i+0x238>)
 80053b6:	2778      	movs	r7, #120	@ 0x78
 80053b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	6831      	ldr	r1, [r6, #0]
 80053c0:	061f      	lsls	r7, r3, #24
 80053c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80053c6:	d402      	bmi.n	80053ce <_printf_i+0x186>
 80053c8:	065f      	lsls	r7, r3, #25
 80053ca:	bf48      	it	mi
 80053cc:	b2ad      	uxthmi	r5, r5
 80053ce:	6031      	str	r1, [r6, #0]
 80053d0:	07d9      	lsls	r1, r3, #31
 80053d2:	bf44      	itt	mi
 80053d4:	f043 0320 	orrmi.w	r3, r3, #32
 80053d8:	6023      	strmi	r3, [r4, #0]
 80053da:	b11d      	cbz	r5, 80053e4 <_printf_i+0x19c>
 80053dc:	2310      	movs	r3, #16
 80053de:	e7ad      	b.n	800533c <_printf_i+0xf4>
 80053e0:	4826      	ldr	r0, [pc, #152]	@ (800547c <_printf_i+0x234>)
 80053e2:	e7e9      	b.n	80053b8 <_printf_i+0x170>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e7f6      	b.n	80053dc <_printf_i+0x194>
 80053ee:	4616      	mov	r6, r2
 80053f0:	e7bd      	b.n	800536e <_printf_i+0x126>
 80053f2:	6833      	ldr	r3, [r6, #0]
 80053f4:	6825      	ldr	r5, [r4, #0]
 80053f6:	6961      	ldr	r1, [r4, #20]
 80053f8:	1d18      	adds	r0, r3, #4
 80053fa:	6030      	str	r0, [r6, #0]
 80053fc:	062e      	lsls	r6, r5, #24
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	d501      	bpl.n	8005406 <_printf_i+0x1be>
 8005402:	6019      	str	r1, [r3, #0]
 8005404:	e002      	b.n	800540c <_printf_i+0x1c4>
 8005406:	0668      	lsls	r0, r5, #25
 8005408:	d5fb      	bpl.n	8005402 <_printf_i+0x1ba>
 800540a:	8019      	strh	r1, [r3, #0]
 800540c:	2300      	movs	r3, #0
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	4616      	mov	r6, r2
 8005412:	e7bc      	b.n	800538e <_printf_i+0x146>
 8005414:	6833      	ldr	r3, [r6, #0]
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	6032      	str	r2, [r6, #0]
 800541a:	681e      	ldr	r6, [r3, #0]
 800541c:	6862      	ldr	r2, [r4, #4]
 800541e:	2100      	movs	r1, #0
 8005420:	4630      	mov	r0, r6
 8005422:	f7fa fedd 	bl	80001e0 <memchr>
 8005426:	b108      	cbz	r0, 800542c <_printf_i+0x1e4>
 8005428:	1b80      	subs	r0, r0, r6
 800542a:	6060      	str	r0, [r4, #4]
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	2300      	movs	r3, #0
 8005432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005436:	e7aa      	b.n	800538e <_printf_i+0x146>
 8005438:	6923      	ldr	r3, [r4, #16]
 800543a:	4632      	mov	r2, r6
 800543c:	4649      	mov	r1, r9
 800543e:	4640      	mov	r0, r8
 8005440:	47d0      	blx	sl
 8005442:	3001      	adds	r0, #1
 8005444:	d0ad      	beq.n	80053a2 <_printf_i+0x15a>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	079b      	lsls	r3, r3, #30
 800544a:	d413      	bmi.n	8005474 <_printf_i+0x22c>
 800544c:	68e0      	ldr	r0, [r4, #12]
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	4298      	cmp	r0, r3
 8005452:	bfb8      	it	lt
 8005454:	4618      	movlt	r0, r3
 8005456:	e7a6      	b.n	80053a6 <_printf_i+0x15e>
 8005458:	2301      	movs	r3, #1
 800545a:	4632      	mov	r2, r6
 800545c:	4649      	mov	r1, r9
 800545e:	4640      	mov	r0, r8
 8005460:	47d0      	blx	sl
 8005462:	3001      	adds	r0, #1
 8005464:	d09d      	beq.n	80053a2 <_printf_i+0x15a>
 8005466:	3501      	adds	r5, #1
 8005468:	68e3      	ldr	r3, [r4, #12]
 800546a:	9903      	ldr	r1, [sp, #12]
 800546c:	1a5b      	subs	r3, r3, r1
 800546e:	42ab      	cmp	r3, r5
 8005470:	dcf2      	bgt.n	8005458 <_printf_i+0x210>
 8005472:	e7eb      	b.n	800544c <_printf_i+0x204>
 8005474:	2500      	movs	r5, #0
 8005476:	f104 0619 	add.w	r6, r4, #25
 800547a:	e7f5      	b.n	8005468 <_printf_i+0x220>
 800547c:	08005685 	.word	0x08005685
 8005480:	08005696 	.word	0x08005696

08005484 <memmove>:
 8005484:	4288      	cmp	r0, r1
 8005486:	b510      	push	{r4, lr}
 8005488:	eb01 0402 	add.w	r4, r1, r2
 800548c:	d902      	bls.n	8005494 <memmove+0x10>
 800548e:	4284      	cmp	r4, r0
 8005490:	4623      	mov	r3, r4
 8005492:	d807      	bhi.n	80054a4 <memmove+0x20>
 8005494:	1e43      	subs	r3, r0, #1
 8005496:	42a1      	cmp	r1, r4
 8005498:	d008      	beq.n	80054ac <memmove+0x28>
 800549a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800549e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054a2:	e7f8      	b.n	8005496 <memmove+0x12>
 80054a4:	4402      	add	r2, r0
 80054a6:	4601      	mov	r1, r0
 80054a8:	428a      	cmp	r2, r1
 80054aa:	d100      	bne.n	80054ae <memmove+0x2a>
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054b6:	e7f7      	b.n	80054a8 <memmove+0x24>

080054b8 <_sbrk_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4d06      	ldr	r5, [pc, #24]	@ (80054d4 <_sbrk_r+0x1c>)
 80054bc:	2300      	movs	r3, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	602b      	str	r3, [r5, #0]
 80054c4:	f7fb fb80 	bl	8000bc8 <_sbrk>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_sbrk_r+0x1a>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_sbrk_r+0x1a>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200011e8 	.word	0x200011e8

080054d8 <_realloc_r>:
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	4607      	mov	r7, r0
 80054de:	4614      	mov	r4, r2
 80054e0:	460d      	mov	r5, r1
 80054e2:	b921      	cbnz	r1, 80054ee <_realloc_r+0x16>
 80054e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054e8:	4611      	mov	r1, r2
 80054ea:	f7ff bc5b 	b.w	8004da4 <_malloc_r>
 80054ee:	b92a      	cbnz	r2, 80054fc <_realloc_r+0x24>
 80054f0:	f7ff fbec 	bl	8004ccc <_free_r>
 80054f4:	4625      	mov	r5, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054fc:	f000 f81a 	bl	8005534 <_malloc_usable_size_r>
 8005500:	4284      	cmp	r4, r0
 8005502:	4606      	mov	r6, r0
 8005504:	d802      	bhi.n	800550c <_realloc_r+0x34>
 8005506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800550a:	d8f4      	bhi.n	80054f6 <_realloc_r+0x1e>
 800550c:	4621      	mov	r1, r4
 800550e:	4638      	mov	r0, r7
 8005510:	f7ff fc48 	bl	8004da4 <_malloc_r>
 8005514:	4680      	mov	r8, r0
 8005516:	b908      	cbnz	r0, 800551c <_realloc_r+0x44>
 8005518:	4645      	mov	r5, r8
 800551a:	e7ec      	b.n	80054f6 <_realloc_r+0x1e>
 800551c:	42b4      	cmp	r4, r6
 800551e:	4622      	mov	r2, r4
 8005520:	4629      	mov	r1, r5
 8005522:	bf28      	it	cs
 8005524:	4632      	movcs	r2, r6
 8005526:	f7ff fbc3 	bl	8004cb0 <memcpy>
 800552a:	4629      	mov	r1, r5
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff fbcd 	bl	8004ccc <_free_r>
 8005532:	e7f1      	b.n	8005518 <_realloc_r+0x40>

08005534 <_malloc_usable_size_r>:
 8005534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005538:	1f18      	subs	r0, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfbc      	itt	lt
 800553e:	580b      	ldrlt	r3, [r1, r0]
 8005540:	18c0      	addlt	r0, r0, r3
 8005542:	4770      	bx	lr

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
