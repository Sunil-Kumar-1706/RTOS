
15_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005400  08005400  00006400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005498  08005498  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005498  08005498  00006498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a0  080054a0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080054a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000100c  20000010  080054b8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000101c  080054b8  0000701c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001056d  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bc  00000000  00000000  000175ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00019e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b20  00000000  00000000  0001acf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272c7  00000000  00000000  0001b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108ef  00000000  00000000  00042adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000effd3  00000000  00000000  000533ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001433a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  001433e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00146eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053e8 	.word	0x080053e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080053e8 	.word	0x080053e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <uart_send>:
// Default task function
void StartDefaultTask(void const * argument);

// Send a string over UART
void uart_send(char *msg)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <uart_send+0x28>)
 800055a:	f002 f8eb 	bl	8002734 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000280 	.word	0x20000280

0800056c <Task1>:

// Task1 function
void Task1(void *argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    while(1)
    {
        // Take UART mutex
        if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE)
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <Task1+0x3c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f04f 31ff 	mov.w	r1, #4294967295
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f8e9 	bl	8003754 <xQueueSemaphoreTake>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d109      	bne.n	800059c <Task1+0x30>
        {
            uart_send("Task 1: Hello from Task 1\r\n"); // Send message
 8000588:	4808      	ldr	r0, [pc, #32]	@ (80005ac <Task1+0x40>)
 800058a:	f7ff ffd9 	bl	8000540 <uart_send>
            xSemaphoreGive(xUartMutex);                 // Release mutex
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <Task1+0x3c>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	f002 ffda 	bl	8003550 <xQueueGenericSend>
        }
        vTaskDelay(pdMS_TO_TICKS(1000)); // Wait 1 second
 800059c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a0:	f003 fc82 	bl	8003ea8 <vTaskDelay>
        if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE)
 80005a4:	e7e6      	b.n	8000574 <Task1+0x8>
 80005a6:	bf00      	nop
 80005a8:	20000308 	.word	0x20000308
 80005ac:	08005400 	.word	0x08005400

080005b0 <Task2>:
    }
}

// Task2 function
void Task2(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    while(1)
    {
        // Take UART mutex
        if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE)
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <Task2+0x3c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f8c7 	bl	8003754 <xQueueSemaphoreTake>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d109      	bne.n	80005e0 <Task2+0x30>
        {
            uart_send("Task 2: Hello from Task 2\r\n"); // Send message
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <Task2+0x40>)
 80005ce:	f7ff ffb7 	bl	8000540 <uart_send>
            xSemaphoreGive(xUartMutex);                 // Release mutex
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <Task2+0x3c>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 ffb8 	bl	8003550 <xQueueGenericSend>
        }
        vTaskDelay(pdMS_TO_TICKS(1500)); // Wait 1.5 seconds
 80005e0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005e4:	f003 fc60 	bl	8003ea8 <vTaskDelay>
        if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE)
 80005e8:	e7e6      	b.n	80005b8 <Task2+0x8>
 80005ea:	bf00      	nop
 80005ec:	20000308 	.word	0x20000308
 80005f0:	0800541c 	.word	0x0800541c

080005f4 <main>:
    }
}

int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af02      	add	r7, sp, #8
  HAL_Init();             // Initialize HAL
 80005fa:	f000 fa09 	bl	8000a10 <HAL_Init>
  SystemClock_Config();   // Setup system clock
 80005fe:	f000 f831 	bl	8000664 <SystemClock_Config>
  MX_GPIO_Init();         // Initialize GPIO
 8000602:	f000 f8b1 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();  // Initialize UART2
 8000606:	f000 f87f 	bl	8000708 <MX_USART2_UART_Init>

  // Create mutex for UART
  xUartMutex = xSemaphoreCreateMutex();
 800060a:	2001      	movs	r0, #1
 800060c:	f002 ff88 	bl	8003520 <xQueueCreateMutex>
 8000610:	4603      	mov	r3, r0
 8000612:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <main+0x5c>)
 8000614:	6013      	str	r3, [r2, #0]

  if(xUartMutex != NULL)
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <main+0x5c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d013      	beq.n	8000646 <main+0x52>
  {
      // Create Task1
      xTaskCreate(Task1, "Task1", 128, NULL, 1, NULL);
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2301      	movs	r3, #1
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	490a      	ldr	r1, [pc, #40]	@ (8000654 <main+0x60>)
 800062c:	480a      	ldr	r0, [pc, #40]	@ (8000658 <main+0x64>)
 800062e:	f003 fb03 	bl	8003c38 <xTaskCreate>
      // Create Task2
      xTaskCreate(Task2, "Task2", 128, NULL, 1, NULL);
 8000632:	2300      	movs	r3, #0
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2301      	movs	r3, #1
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2280      	movs	r2, #128	@ 0x80
 800063e:	4907      	ldr	r1, [pc, #28]	@ (800065c <main+0x68>)
 8000640:	4807      	ldr	r0, [pc, #28]	@ (8000660 <main+0x6c>)
 8000642:	f003 faf9 	bl	8003c38 <xTaskCreate>
  }

  // Start CMSIS-RTOS kernel
  osKernelStart();
 8000646:	f002 fdd2 	bl	80031ee <osKernelStart>

  // should not reach here
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x56>
 800064e:	bf00      	nop
 8000650:	20000308 	.word	0x20000308
 8000654:	08005438 	.word	0x08005438
 8000658:	0800056d 	.word	0x0800056d
 800065c:	08005440 	.word	0x08005440
 8000660:	080005b1 	.word	0x080005b1

08000664 <SystemClock_Config>:
  }
}

// Configure system clock
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	@ 0x58
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0}; // Oscillator config struct
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2244      	movs	r2, #68	@ 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fe7e 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0}; // Clock config struct
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068a:	f000 fcf3 	bl	8001074 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x34>
  {
    Error_Handler(); // Error if power scaling fails
 8000694:	f000 f8ce 	bl	8000834 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI; // Use HSI oscillator
 8000698:	2302      	movs	r3, #2
 800069a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;                   // Enable HSI
 800069c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; // Default trim
 80006a2:	2310      	movs	r3, #16
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;               // Enable PLL
 80006a6:	2302      	movs	r3, #2
 80006a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;       // Source HSI
 80006aa:	2302      	movs	r3, #2
 80006ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;                            // PLL divider M
 80006ae:	2301      	movs	r3, #1
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;                           // PLL multiplier N
 80006b2:	230a      	movs	r3, #10
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;                // PLL divider P
 80006b6:	2307      	movs	r3, #7
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;                // PLL divider Q
 80006ba:	2302      	movs	r3, #2
 80006bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;                // PLL divider R
 80006be:	2302      	movs	r3, #2
 80006c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fd2a 	bl	8001120 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x72>
  {
    Error_Handler(); // Error if oscillator config fails
 80006d2:	f000 f8af 	bl	8000834 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2; // Clock domains
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;             // Use PLL as SYSCLK
 80006da:	2303      	movs	r3, #3
 80006dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;                    // AHB prescaler
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;                     // APB1 prescaler
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;                     // APB2 prescaler
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	2104      	movs	r1, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f8f2 	bl	80018d8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler(); // Error if clock config fails
 80006fa:	f000 f89b 	bl	8000834 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3758      	adds	r7, #88	@ 0x58
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_USART2_UART_Init>:

// Initialize USART2
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;                        // Use USART2
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <MX_USART2_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;                   // Set baud rate
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;     // 8-bit data
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;          // 1 stop bit
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;           // No parity
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;              // Enable TX and RX
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;     // No flow control
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16; // Oversampling 16
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE; // No 1-bit sampling
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; // No advanced features
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800074c:	f001 ffa4 	bl	8002698 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler(); // Error if UART init fails
 8000756:	f000 f86d 	bl	8000834 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000280 	.word	0x20000280
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:

// Initialize GPIO
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0}; // GPIO config struct
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable GPIOC clock
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a2a      	ldr	r2, [pc, #168]	@ (800082c <MX_GPIO_Init+0xc4>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE(); // Enable GPIOH clock
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a24      	ldr	r2, [pc, #144]	@ (800082c <MX_GPIO_Init+0xc4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b22      	ldr	r3, [pc, #136]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA clock
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable GPIOB clock
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a18      	ldr	r2, [pc, #96]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b16      	ldr	r3, [pc, #88]	@ (800082c <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Reset LED2
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 fc1f 	bl	8001028 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;               // Button pin
 80007ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;// Interrupt on falling edge
 80007f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;         // No pull-up/down
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <MX_GPIO_Init+0xc8>)
 8000802:	f000 fa67 	bl	8000cd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;              // LED2 pin
 8000806:	2320      	movs	r3, #32
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;         // No pull-up/down
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;// Low speed
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f000 fa58 	bl	8000cd4 <HAL_GPIO_Init>
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800

08000834 <Error_Handler>:
  }
}

// Error handler
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  __disable_irq(); // Disable interrupts
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_MspInit+0x4c>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084a:	4a10      	ldr	r2, [pc, #64]	@ (800088c <HAL_MspInit+0x4c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6613      	str	r3, [r2, #96]	@ 0x60
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_MspInit+0x4c>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_MspInit+0x4c>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000868:	6593      	str	r3, [r2, #88]	@ 0x58
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_MspInit+0x4c>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	210f      	movs	r1, #15
 800087a:	f06f 0001 	mvn.w	r0, #1
 800087e:	f000 fa00 	bl	8000c82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0ac      	sub	sp, #176	@ 0xb0
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2288      	movs	r2, #136	@ 0x88
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fd5f 	bl	8005374 <memset>
  if(huart->Instance==USART2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <HAL_UART_MspInit+0xb0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d13b      	bne.n	8000938 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fa27 	bl	8001d20 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f7ff ffac 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_UART_MspInit+0xb4>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e0:	4a18      	ldr	r2, [pc, #96]	@ (8000944 <HAL_UART_MspInit+0xb4>)
 80008e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <HAL_UART_MspInit+0xb4>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <HAL_UART_MspInit+0xb4>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <HAL_UART_MspInit+0xb4>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000900:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_UART_MspInit+0xb4>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800090c:	230c      	movs	r3, #12
 800090e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000924:	2307      	movs	r3, #7
 8000926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f000 f9ce 	bl	8000cd4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000938:	bf00      	nop
 800093a:	37b0      	adds	r7, #176	@ 0xb0
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40004400 	.word	0x40004400
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f8a1 	bl	8000ac8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000986:	f003 fecf 	bl	8004728 <xTaskGetSchedulerState>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d001      	beq.n	8000994 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000990:	f004 fab2 	bl	8004ef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f004 fccb 	bl	8005384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ee:	f7ff fe01 	bl	80005f4 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a00:	080054a8 	.word	0x080054a8
  ldr r2, =_sbss
 8000a04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a08:	2000101c 	.word	0x2000101c

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <HAL_Init+0x3c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <HAL_Init+0x3c>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 f920 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2c:	200f      	movs	r0, #15
 8000a2e:	f000 f80f 	bl	8000a50 <HAL_InitTick>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	e001      	b.n	8000a42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3e:	f7ff feff 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <HAL_InitTick+0x6c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d023      	beq.n	8000aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <HAL_InitTick+0x70>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <HAL_InitTick+0x6c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f91d 	bl	8000cba <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10f      	bne.n	8000aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d809      	bhi.n	8000aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f8f5 	bl	8000c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <HAL_InitTick+0x74>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e007      	b.n	8000ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e004      	b.n	8000ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e001      	b.n	8000ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	2000030c 	.word	0x2000030c

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	2000030c 	.word	0x2000030c

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	@ (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	@ 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff47 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5c 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e17f      	b.n	8000fe4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8171 	beq.w	8000fde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d118      	bne.n	8000db4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	08db      	lsrs	r3, r3, #3
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80ac 	beq.w	8000fde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b5f      	ldr	r3, [pc, #380]	@ (8001004 <HAL_GPIO_Init+0x330>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001004 <HAL_GPIO_Init+0x330>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e92:	4b5c      	ldr	r3, [pc, #368]	@ (8001004 <HAL_GPIO_Init+0x330>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001008 <HAL_GPIO_Init+0x334>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x242>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800100c <HAL_GPIO_Init+0x338>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x23e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8001010 <HAL_GPIO_Init+0x33c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x23a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4d      	ldr	r2, [pc, #308]	@ (8001014 <HAL_GPIO_Init+0x340>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x236>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	@ (8001018 <HAL_GPIO_Init+0x344>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x232>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4b      	ldr	r2, [pc, #300]	@ (800101c <HAL_GPIO_Init+0x348>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x22e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8001020 <HAL_GPIO_Init+0x34c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x22a>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f16:	2300      	movs	r3, #0
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f28:	4937      	ldr	r1, [pc, #220]	@ (8001008 <HAL_GPIO_Init+0x334>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f36:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f5a:	4a32      	ldr	r2, [pc, #200]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f60:	4b30      	ldr	r3, [pc, #192]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f84:	4a27      	ldr	r2, [pc, #156]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fae:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <HAL_GPIO_Init+0x350>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa22 f303 	lsr.w	r3, r2, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f47f ae78 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48000c00 	.word	0x48000c00
 8001018:	48001000 	.word	0x48001000
 800101c:	48001400 	.word	0x48001400
 8001020:	48001800 	.word	0x48001800
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001044:	e002      	b.n	800104c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <HAL_PWREx_GetVoltageRange+0x18>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40007000 	.word	0x40007000

08001074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001082:	d130      	bne.n	80010e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800108c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001090:	d038      	beq.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800109a:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2232      	movs	r2, #50	@ 0x32
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	0c9b      	lsrs	r3, r3, #18
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b8:	e002      	b.n	80010c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010cc:	d102      	bne.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f2      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e0:	d110      	bne.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e00f      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010f2:	d007      	beq.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010fc:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40007000 	.word	0x40007000
 8001118:	20000000 	.word	0x20000000
 800111c:	431bde83 	.word	0x431bde83

08001120 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e3ca      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001132:	4b97      	ldr	r3, [pc, #604]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113c:	4b94      	ldr	r3, [pc, #592]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80e4 	beq.w	800131c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_RCC_OscConfig+0x4a>
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b0c      	cmp	r3, #12
 800115e:	f040 808b 	bne.w	8001278 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b01      	cmp	r3, #1
 8001166:	f040 8087 	bne.w	8001278 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800116a:	4b89      	ldr	r3, [pc, #548]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x62>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e3a2      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	4b82      	ldr	r3, [pc, #520]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_RCC_OscConfig+0x7c>
 8001192:	4b7f      	ldr	r3, [pc, #508]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800119a:	e005      	b.n	80011a8 <HAL_RCC_OscConfig+0x88>
 800119c:	4b7c      	ldr	r3, [pc, #496]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800119e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d223      	bcs.n	80011f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fd55 	bl	8001c60 <RCC_SetFlashLatencyFromMSIRange>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e383      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a72      	ldr	r2, [pc, #456]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	496d      	ldr	r1, [pc, #436]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b6c      	ldr	r3, [pc, #432]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4968      	ldr	r1, [pc, #416]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
 80011f2:	e025      	b.n	8001240 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f4:	4b66      	ldr	r3, [pc, #408]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a65      	ldr	r2, [pc, #404]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b63      	ldr	r3, [pc, #396]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4960      	ldr	r1, [pc, #384]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001212:	4b5f      	ldr	r3, [pc, #380]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	495b      	ldr	r1, [pc, #364]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fd15 	bl	8001c60 <RCC_SetFlashLatencyFromMSIRange>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e343      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001240:	f000 fc4a 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001244:	4602      	mov	r2, r0
 8001246:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	4950      	ldr	r1, [pc, #320]	@ (8001394 <HAL_RCC_OscConfig+0x274>)
 8001252:	5ccb      	ldrb	r3, [r1, r3]
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	4a4e      	ldr	r2, [pc, #312]	@ (8001398 <HAL_RCC_OscConfig+0x278>)
 800125e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001260:	4b4e      	ldr	r3, [pc, #312]	@ (800139c <HAL_RCC_OscConfig+0x27c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fbf3 	bl	8000a50 <HAL_InitTick>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d052      	beq.n	800131a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	e327      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d032      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001280:	4b43      	ldr	r3, [pc, #268]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a42      	ldr	r2, [pc, #264]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc30 	bl	8000af0 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001294:	f7ff fc2c 	bl	8000af0 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e310      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a36      	ldr	r2, [pc, #216]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4931      	ldr	r1, [pc, #196]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	492c      	ldr	r1, [pc, #176]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e01a      	b.n	800131c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a29      	ldr	r2, [pc, #164]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fbfd 	bl	8000af0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fa:	f7ff fbf9 	bl	8000af0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e2dd      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_OscConfig+0x1da>
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800131a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d074      	beq.n	8001412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b08      	cmp	r3, #8
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x21a>
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d10e      	bne.n	8001352 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d064      	beq.n	8001410 <HAL_RCC_OscConfig+0x2f0>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d160      	bne.n	8001410 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e2ba      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x24a>
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e026      	b.n	80013b8 <HAL_RCC_OscConfig+0x298>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001372:	d115      	bne.n	80013a0 <HAL_RCC_OscConfig+0x280>
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 800137a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a02      	ldr	r2, [pc, #8]	@ (8001390 <HAL_RCC_OscConfig+0x270>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x298>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	08005450 	.word	0x08005450
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004
 80013a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb96 	bl	8000af0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb92 	bl	8000af0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e276      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	4b92      	ldr	r3, [pc, #584]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x2a8>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb82 	bl	8000af0 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb7e 	bl	8000af0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e262      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	4b88      	ldr	r3, [pc, #544]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x2d0>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d060      	beq.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d005      	beq.n	8001430 <HAL_RCC_OscConfig+0x310>
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	d119      	bne.n	800145e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d116      	bne.n	800145e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001430:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x328>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e23f      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b76      	ldr	r3, [pc, #472]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	4973      	ldr	r1, [pc, #460]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145c:	e040      	b.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d023      	beq.n	80014ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001466:	4b6f      	ldr	r3, [pc, #444]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6e      	ldr	r2, [pc, #440]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fb3d 	bl	8000af0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fb39 	bl	8000af0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e21d      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	4b65      	ldr	r3, [pc, #404]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b62      	ldr	r3, [pc, #392]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	495f      	ldr	r1, [pc, #380]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e018      	b.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80014b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb19 	bl	8000af0 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fb15 	bl	8000af0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1f9      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d4:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d03c      	beq.n	8001566 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01c      	beq.n	800152e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff faf4 	bl	8000af0 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff faf0 	bl	8000af0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1d4      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ef      	beq.n	800150c <HAL_RCC_OscConfig+0x3ec>
 800152c:	e01b      	b.n	8001566 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001534:	4a3b      	ldr	r2, [pc, #236]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff fad7 	bl	8000af0 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fad3 	bl	8000af0 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e1b7      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001558:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ef      	bne.n	8001546 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80a6 	beq.w	80016c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10d      	bne.n	80015a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	4a26      	ldr	r2, [pc, #152]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001590:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159c:	2301      	movs	r3, #1
 800159e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a0:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <HAL_RCC_OscConfig+0x508>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d118      	bne.n	80015de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_RCC_OscConfig+0x508>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_RCC_OscConfig+0x508>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa9a 	bl	8000af0 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c0:	f7ff fa96 	bl	8000af0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e17a      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_RCC_OscConfig+0x508>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d108      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4d8>
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015f6:	e029      	b.n	800164c <HAL_RCC_OscConfig+0x52c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d115      	bne.n	800162c <HAL_RCC_OscConfig+0x50c>
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001606:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001616:	4a03      	ldr	r2, [pc, #12]	@ (8001624 <HAL_RCC_OscConfig+0x504>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x52c>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	4b9c      	ldr	r3, [pc, #624]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001632:	4a9b      	ldr	r2, [pc, #620]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800163c:	4b98      	ldr	r3, [pc, #608]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001642:	4a97      	ldr	r2, [pc, #604]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d016      	beq.n	8001682 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fa4c 	bl	8000af0 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fa48 	bl	8000af0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e12a      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001672:	4b8b      	ldr	r3, [pc, #556]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ed      	beq.n	800165c <HAL_RCC_OscConfig+0x53c>
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fa35 	bl	8000af0 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fa31 	bl	8000af0 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e113      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a0:	4b7f      	ldr	r3, [pc, #508]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ed      	bne.n	800168a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b7a      	ldr	r3, [pc, #488]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	4a79      	ldr	r2, [pc, #484]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80016ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80fe 	beq.w	80018c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	f040 80d0 	bne.w	8001874 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016d4:	4b72      	ldr	r3, [pc, #456]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d130      	bne.n	800174a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	3b01      	subs	r3, #1
 80016f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d127      	bne.n	800174a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001704:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d11f      	bne.n	800174a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001714:	2a07      	cmp	r2, #7
 8001716:	bf14      	ite	ne
 8001718:	2201      	movne	r2, #1
 800171a:	2200      	moveq	r2, #0
 800171c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800171e:	4293      	cmp	r3, r2
 8001720:	d113      	bne.n	800174a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d109      	bne.n	800174a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d06e      	beq.n	8001828 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d069      	beq.n	8001824 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001750:	4b53      	ldr	r3, [pc, #332]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800175c:	4b50      	ldr	r3, [pc, #320]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0ad      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800176c:	4b4c      	ldr	r3, [pc, #304]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a4b      	ldr	r2, [pc, #300]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001778:	f7ff f9ba 	bl	8000af0 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff f9b6 	bl	8000af0 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e09a      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001792:	4b43      	ldr	r3, [pc, #268]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179e:	4b40      	ldr	r3, [pc, #256]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b40      	ldr	r3, [pc, #256]	@ (80018a4 <HAL_RCC_OscConfig+0x784>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017ae:	3a01      	subs	r2, #1
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017b8:	0212      	lsls	r2, r2, #8
 80017ba:	4311      	orrs	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017c0:	0852      	lsrs	r2, r2, #1
 80017c2:	3a01      	subs	r2, #1
 80017c4:	0552      	lsls	r2, r2, #21
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017cc:	0852      	lsrs	r2, r2, #1
 80017ce:	3a01      	subs	r2, #1
 80017d0:	0652      	lsls	r2, r2, #25
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017d8:	0912      	lsrs	r2, r2, #4
 80017da:	0452      	lsls	r2, r2, #17
 80017dc:	430a      	orrs	r2, r1
 80017de:	4930      	ldr	r1, [pc, #192]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2d      	ldr	r2, [pc, #180]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a2a      	ldr	r2, [pc, #168]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017fc:	f7ff f978 	bl	8000af0 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f974 	bl	8000af0 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e058      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001822:	e050      	b.n	80018c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e04f      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d148      	bne.n	80018c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800184c:	f7ff f950 	bl	8000af0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f94c 	bl	8000af0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e030      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x734>
 8001872:	e028      	b.n	80018c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d023      	beq.n	80018c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_RCC_OscConfig+0x780>)
 8001880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff f933 	bl	8000af0 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188c:	e00c      	b.n	80018a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff f92f 	bl	8000af0 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d905      	bls.n	80018a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e013      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_RCC_OscConfig+0x7b0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ec      	bne.n	800188e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_RCC_OscConfig+0x7b0>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4905      	ldr	r1, [pc, #20]	@ (80018d0 <HAL_RCC_OscConfig+0x7b0>)
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_RCC_OscConfig+0x7b4>)
 80018bc:	4013      	ands	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
 80018c0:	e001      	b.n	80018c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	feeefffc 	.word	0xfeeefffc

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0e7      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b75      	ldr	r3, [pc, #468]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d910      	bls.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b72      	ldr	r3, [pc, #456]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4970      	ldr	r1, [pc, #448]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cf      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d010      	beq.n	800194a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001934:	429a      	cmp	r2, r3
 8001936:	d908      	bls.n	800194a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4960      	ldr	r1, [pc, #384]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d04c      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d121      	bne.n	80019ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0a6      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	4b54      	ldr	r3, [pc, #336]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e09a      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800198e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e08e      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e086      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4943      	ldr	r1, [pc, #268]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c0:	f7ff f896 	bl	8000af0 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff f892 	bl	8000af0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e06e      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d208      	bcs.n	8001a1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	492b      	ldr	r1, [pc, #172]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d210      	bcs.n	8001a4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 0207 	bic.w	r2, r3, #7
 8001a34:	4923      	ldr	r1, [pc, #140]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e036      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4918      	ldr	r1, [pc, #96]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4910      	ldr	r1, [pc, #64]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8c:	f000 f824 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	490b      	ldr	r1, [pc, #44]	@ (8001acc <HAL_RCC_ClockConfig+0x1f4>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1fc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe ffcd 	bl	8000a50 <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aba:	7afb      	ldrb	r3, [r7, #11]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08005450 	.word	0x08005450
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af0:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d121      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d11e      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b0c:	4b34      	ldr	r3, [pc, #208]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b18:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e005      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b34:	4a2b      	ldr	r2, [pc, #172]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10d      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b50:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	e004      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <HAL_RCC_GetSysClockFreq+0x114>)
 8001b5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d134      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d003      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0xac>
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b80:	617b      	str	r3, [r7, #20]
      break;
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <HAL_RCC_GetSysClockFreq+0x114>)
 8001b86:	617b      	str	r3, [r7, #20]
      break;
 8001b88:	e002      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	617b      	str	r3, [r7, #20]
      break;
 8001b8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	fb03 f202 	mul.w	r2, r3, r2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	0e5b      	lsrs	r3, r3, #25
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	@ 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08005468 	.word	0x08005468
 8001be8:	00f42400 	.word	0x00f42400
 8001bec:	007a1200 	.word	0x007a1200

08001bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c0c:	f7ff fff0 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4904      	ldr	r1, [pc, #16]	@ (8001c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08005460 	.word	0x08005460

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c38:	f7ff ffda 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0adb      	lsrs	r3, r3, #11
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4904      	ldr	r1, [pc, #16]	@ (8001c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08005460 	.word	0x08005460

08001c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c78:	f7ff f9ee 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001c7c:	6178      	str	r0, [r7, #20]
 8001c7e:	e014      	b.n	8001caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	4a24      	ldr	r2, [pc, #144]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8c:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c98:	f7ff f9de 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cb0:	d10b      	bne.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b80      	cmp	r3, #128	@ 0x80
 8001cb6:	d919      	bls.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cbc:	d902      	bls.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	e013      	b.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e010      	b.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	@ 0x80
 8001cce:	d902      	bls.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e00a      	b.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b80      	cmp	r3, #128	@ 0x80
 8001cda:	d102      	bne.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cdc:	2302      	movs	r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e004      	b.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b70      	cmp	r3, #112	@ 0x70
 8001ce6:	d101      	bne.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce8:	2301      	movs	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 0207 	bic.w	r2, r3, #7
 8001cf4:	4909      	ldr	r1, [pc, #36]	@ (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d28:	2300      	movs	r3, #0
 8001d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d041      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d44:	d02a      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d4a:	d824      	bhi.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d50:	d008      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d56:	d81e      	bhi.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d60:	d010      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d62:	e018      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d64:	4b86      	ldr	r3, [pc, #536]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a85      	ldr	r2, [pc, #532]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d70:	e015      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fabb 	bl	80022f4 <RCCEx_PLLSAI1_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d82:	e00c      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3320      	adds	r3, #32
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fba6 	bl	80024dc <RCCEx_PLLSAI2_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d94:	e003      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	74fb      	strb	r3, [r7, #19]
      break;
 8001d9a:	e000      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001da4:	4b76      	ldr	r3, [pc, #472]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001db2:	4973      	ldr	r1, [pc, #460]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dba:	e001      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d041      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dd4:	d02a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dda:	d824      	bhi.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001de0:	d008      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001de2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001de6:	d81e      	bhi.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df0:	d010      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001df2:	e018      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001df4:	4b62      	ldr	r3, [pc, #392]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a61      	ldr	r2, [pc, #388]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e00:	e015      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fa73 	bl	80022f4 <RCCEx_PLLSAI1_Config>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e12:	e00c      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3320      	adds	r3, #32
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fb5e 	bl	80024dc <RCCEx_PLLSAI2_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e24:	e003      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	74fb      	strb	r3, [r7, #19]
      break;
 8001e2a:	e000      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e34:	4b52      	ldr	r3, [pc, #328]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e42:	494f      	ldr	r1, [pc, #316]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e4a:	e001      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a0 	beq.w	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e62:	4b47      	ldr	r3, [pc, #284]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e72:	2300      	movs	r3, #0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e84:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e90:	2301      	movs	r3, #1
 8001e92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e94:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ea0:	f7fe fe26 	bl	8000af0 <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ea6:	e009      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea8:	f7fe fe22 	bl	8000af0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d902      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	74fb      	strb	r3, [r7, #19]
        break;
 8001eba:	e005      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ebc:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ef      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d15c      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ece:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01f      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d019      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eec:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ef8:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	4a20      	ldr	r2, [pc, #128]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fde1 	bl	8000af0 <HAL_GetTick>
 8001f2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f30:	e00b      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fddd 	bl	8000af0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d902      	bls.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	74fb      	strb	r3, [r7, #19]
            break;
 8001f48:	e006      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ec      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f6e:	4904      	ldr	r1, [pc, #16]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f76:	e009      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	74bb      	strb	r3, [r7, #18]
 8001f7c:	e006      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8c:	7c7b      	ldrb	r3, [r7, #17]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b9e      	ldr	r3, [pc, #632]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	4a9d      	ldr	r2, [pc, #628]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001faa:	4b98      	ldr	r3, [pc, #608]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb0:	f023 0203 	bic.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	4994      	ldr	r1, [pc, #592]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f023 020c 	bic.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	498c      	ldr	r1, [pc, #560]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fee:	4b87      	ldr	r3, [pc, #540]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	4983      	ldr	r1, [pc, #524]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002010:	4b7e      	ldr	r3, [pc, #504]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	497b      	ldr	r1, [pc, #492]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002032:	4b76      	ldr	r3, [pc, #472]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002040:	4972      	ldr	r1, [pc, #456]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002054:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	496a      	ldr	r1, [pc, #424]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002076:	4b65      	ldr	r3, [pc, #404]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002084:	4961      	ldr	r1, [pc, #388]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002098:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	4959      	ldr	r1, [pc, #356]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ba:	4b54      	ldr	r3, [pc, #336]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c8:	4950      	ldr	r1, [pc, #320]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020dc:	4b4b      	ldr	r3, [pc, #300]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	4948      	ldr	r1, [pc, #288]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fe:	4b43      	ldr	r3, [pc, #268]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	493f      	ldr	r1, [pc, #252]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d028      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002120:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	4937      	ldr	r1, [pc, #220]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800213a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800213e:	d106      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002140:	4b32      	ldr	r3, [pc, #200]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a31      	ldr	r2, [pc, #196]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800214a:	60d3      	str	r3, [r2, #12]
 800214c:	e011      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002152:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002156:	d10c      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f8c8 	bl	80022f4 <RCCEx_PLLSAI1_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d028      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800217e:	4b23      	ldr	r3, [pc, #140]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218c:	491f      	ldr	r1, [pc, #124]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800219c:	d106      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219e:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a8:	60d3      	str	r3, [r2, #12]
 80021aa:	e011      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2101      	movs	r1, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f899 	bl	80022f4 <RCCEx_PLLSAI1_Config>
 80021c2:	4603      	mov	r3, r0
 80021c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02b      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ea:	4908      	ldr	r1, [pc, #32]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021fa:	d109      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a02      	ldr	r2, [pc, #8]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
 8002208:	e014      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002218:	d10c      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f867 	bl	80022f4 <RCCEx_PLLSAI1_Config>
 8002226:	4603      	mov	r3, r0
 8002228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02f      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800224e:	4928      	ldr	r1, [pc, #160]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800225a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800225e:	d10d      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	2102      	movs	r1, #2
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f844 	bl	80022f4 <RCCEx_PLLSAI1_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d014      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
 800227a:	e011      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3320      	adds	r3, #32
 800228a:	2102      	movs	r1, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f925 	bl	80024dc <RCCEx_PLLSAI2_Config>
 8002292:	4603      	mov	r3, r0
 8002294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022ac:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ba:	490d      	ldr	r1, [pc, #52]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022de:	4904      	ldr	r1, [pc, #16]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000

080022f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002302:	4b75      	ldr	r3, [pc, #468]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800230e:	4b72      	ldr	r3, [pc, #456]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0203 	and.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d10d      	bne.n	800233a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
       ||
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002326:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
       ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d047      	beq.n	80023ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e044      	b.n	80023ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d018      	beq.n	800237a <RCCEx_PLLSAI1_Config+0x86>
 8002348:	2b03      	cmp	r3, #3
 800234a:	d825      	bhi.n	8002398 <RCCEx_PLLSAI1_Config+0xa4>
 800234c:	2b01      	cmp	r3, #1
 800234e:	d002      	beq.n	8002356 <RCCEx_PLLSAI1_Config+0x62>
 8002350:	2b02      	cmp	r3, #2
 8002352:	d009      	beq.n	8002368 <RCCEx_PLLSAI1_Config+0x74>
 8002354:	e020      	b.n	8002398 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002356:	4b60      	ldr	r3, [pc, #384]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11d      	bne.n	800239e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002366:	e01a      	b.n	800239e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002368:	4b5b      	ldr	r3, [pc, #364]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d116      	bne.n	80023a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e013      	b.n	80023a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800237a:	4b57      	ldr	r3, [pc, #348]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002386:	4b54      	ldr	r3, [pc, #336]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002396:	e006      	b.n	80023a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      break;
 800239c:	e004      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	430b      	orrs	r3, r1
 80023c4:	4944      	ldr	r1, [pc, #272]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d17d      	bne.n	80024cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023d0:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a40      	ldr	r2, [pc, #256]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fb88 	bl	8000af0 <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023e2:	e009      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023e4:	f7fe fb84 	bl	8000af0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d902      	bls.n	80023f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	73fb      	strb	r3, [r7, #15]
        break;
 80023f6:	e005      	b.n	8002404 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f8:	4b37      	ldr	r3, [pc, #220]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ef      	bne.n	80023e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d160      	bne.n	80024cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002410:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6892      	ldr	r2, [r2, #8]
 8002420:	0211      	lsls	r1, r2, #8
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68d2      	ldr	r2, [r2, #12]
 8002426:	0912      	lsrs	r2, r2, #4
 8002428:	0452      	lsls	r2, r2, #17
 800242a:	430a      	orrs	r2, r1
 800242c:	492a      	ldr	r1, [pc, #168]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	610b      	str	r3, [r1, #16]
 8002432:	e027      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d112      	bne.n	8002460 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800243a:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002442:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6892      	ldr	r2, [r2, #8]
 800244a:	0211      	lsls	r1, r2, #8
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6912      	ldr	r2, [r2, #16]
 8002450:	0852      	lsrs	r2, r2, #1
 8002452:	3a01      	subs	r2, #1
 8002454:	0552      	lsls	r2, r2, #21
 8002456:	430a      	orrs	r2, r1
 8002458:	491f      	ldr	r1, [pc, #124]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	610b      	str	r3, [r1, #16]
 800245e:	e011      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002460:	4b1d      	ldr	r3, [pc, #116]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002468:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6892      	ldr	r2, [r2, #8]
 8002470:	0211      	lsls	r1, r2, #8
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6952      	ldr	r2, [r2, #20]
 8002476:	0852      	lsrs	r2, r2, #1
 8002478:	3a01      	subs	r2, #1
 800247a:	0652      	lsls	r2, r2, #25
 800247c:	430a      	orrs	r2, r1
 800247e:	4916      	ldr	r1, [pc, #88]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002484:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a13      	ldr	r2, [pc, #76]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800248e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe fb2e 	bl	8000af0 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002496:	e009      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002498:	f7fe fb2a 	bl	8000af0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d902      	bls.n	80024ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	73fb      	strb	r3, [r7, #15]
          break;
 80024aa:	e005      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ef      	beq.n	8002498 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024f6:	4b67      	ldr	r3, [pc, #412]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
       ||
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800250e:	4b61      	ldr	r3, [pc, #388]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
       ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d047      	beq.n	80025b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e044      	b.n	80025b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d018      	beq.n	8002562 <RCCEx_PLLSAI2_Config+0x86>
 8002530:	2b03      	cmp	r3, #3
 8002532:	d825      	bhi.n	8002580 <RCCEx_PLLSAI2_Config+0xa4>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d002      	beq.n	800253e <RCCEx_PLLSAI2_Config+0x62>
 8002538:	2b02      	cmp	r3, #2
 800253a:	d009      	beq.n	8002550 <RCCEx_PLLSAI2_Config+0x74>
 800253c:	e020      	b.n	8002580 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800253e:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11d      	bne.n	8002586 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e01a      	b.n	8002586 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002550:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e013      	b.n	800258a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002562:	4b4c      	ldr	r3, [pc, #304]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800256e:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800257e:	e006      	b.n	800258e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e004      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800258e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002596:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	430b      	orrs	r3, r1
 80025ac:	4939      	ldr	r1, [pc, #228]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d167      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a35      	ldr	r2, [pc, #212]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fa94 	bl	8000af0 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ca:	e009      	b.n	80025e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025cc:	f7fe fa90 	bl	8000af0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d902      	bls.n	80025e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	73fb      	strb	r3, [r7, #15]
        break;
 80025de:	e005      	b.n	80025ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ef      	bne.n	80025cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d14a      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d111      	bne.n	800261c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025f8:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	0912      	lsrs	r2, r2, #4
 8002610:	0452      	lsls	r2, r2, #17
 8002612:	430a      	orrs	r2, r1
 8002614:	491f      	ldr	r1, [pc, #124]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	614b      	str	r3, [r1, #20]
 800261a:	e011      	b.n	8002640 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002624:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6892      	ldr	r2, [r2, #8]
 800262c:	0211      	lsls	r1, r2, #8
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6912      	ldr	r2, [r2, #16]
 8002632:	0852      	lsrs	r2, r2, #1
 8002634:	3a01      	subs	r2, #1
 8002636:	0652      	lsls	r2, r2, #25
 8002638:	430a      	orrs	r2, r1
 800263a:	4916      	ldr	r1, [pc, #88]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002640:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fa50 	bl	8000af0 <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002652:	e009      	b.n	8002668 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002654:	f7fe fa4c 	bl	8000af0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	73fb      	strb	r3, [r7, #15]
          break;
 8002666:	e005      	b.n	8002674 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000

08002698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e040      	b.n	800272c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe f8e8 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2224      	movs	r2, #36	@ 0x24
 80026c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fb6a 	bl	8002db8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8af 	bl	8002848 <UART_SetConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e01b      	b.n	800272c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fbe9 	bl	8002efc <UART_CheckIdleState>
 800272a:	4603      	mov	r3, r0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002748:	2b20      	cmp	r3, #32
 800274a:	d177      	bne.n	800283c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_UART_Transmit+0x24>
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e070      	b.n	800283e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2221      	movs	r2, #33	@ 0x21
 8002768:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276a:	f7fe f9c1 	bl	8000af0 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002788:	d108      	bne.n	800279c <HAL_UART_Transmit+0x68>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d104      	bne.n	800279c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e003      	b.n	80027a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a4:	e02f      	b.n	8002806 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	@ 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fc4b 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e03b      	b.n	800283e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d8:	b292      	uxth	r2, r2
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3302      	adds	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e007      	b.n	80027f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1c9      	bne.n	80027a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	@ 0x40
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fc15 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e005      	b.n	800283e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b08a      	sub	sp, #40	@ 0x28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	431a      	orrs	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4313      	orrs	r3, r2
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4ba4      	ldr	r3, [pc, #656]	@ (8002b08 <UART_SetConfig+0x2c0>)
 8002878:	4013      	ands	r3, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002880:	430b      	orrs	r3, r1
 8002882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a99      	ldr	r2, [pc, #612]	@ (8002b0c <UART_SetConfig+0x2c4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	4313      	orrs	r3, r2
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a90      	ldr	r2, [pc, #576]	@ (8002b10 <UART_SetConfig+0x2c8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d126      	bne.n	8002920 <UART_SetConfig+0xd8>
 80028d2:	4b90      	ldr	r3, [pc, #576]	@ (8002b14 <UART_SetConfig+0x2cc>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d81b      	bhi.n	8002918 <UART_SetConfig+0xd0>
 80028e0:	a201      	add	r2, pc, #4	@ (adr r2, 80028e8 <UART_SetConfig+0xa0>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	08002909 	.word	0x08002909
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002911 	.word	0x08002911
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028fe:	e116      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002900:	2302      	movs	r3, #2
 8002902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002906:	e112      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002908:	2304      	movs	r3, #4
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290e:	e10e      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002910:	2308      	movs	r3, #8
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002916:	e10a      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002918:	2310      	movs	r3, #16
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291e:	e106      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a7c      	ldr	r2, [pc, #496]	@ (8002b18 <UART_SetConfig+0x2d0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d138      	bne.n	800299c <UART_SetConfig+0x154>
 800292a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b14 <UART_SetConfig+0x2cc>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d82d      	bhi.n	8002994 <UART_SetConfig+0x14c>
 8002938:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <UART_SetConfig+0xf8>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002975 	.word	0x08002975
 8002944:	08002995 	.word	0x08002995
 8002948:	08002995 	.word	0x08002995
 800294c:	08002995 	.word	0x08002995
 8002950:	08002985 	.word	0x08002985
 8002954:	08002995 	.word	0x08002995
 8002958:	08002995 	.word	0x08002995
 800295c:	08002995 	.word	0x08002995
 8002960:	0800297d 	.word	0x0800297d
 8002964:	08002995 	.word	0x08002995
 8002968:	08002995 	.word	0x08002995
 800296c:	08002995 	.word	0x08002995
 8002970:	0800298d 	.word	0x0800298d
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297a:	e0d8      	b.n	8002b2e <UART_SetConfig+0x2e6>
 800297c:	2302      	movs	r3, #2
 800297e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002982:	e0d4      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002984:	2304      	movs	r3, #4
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298a:	e0d0      	b.n	8002b2e <UART_SetConfig+0x2e6>
 800298c:	2308      	movs	r3, #8
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002992:	e0cc      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002994:	2310      	movs	r3, #16
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299a:	e0c8      	b.n	8002b2e <UART_SetConfig+0x2e6>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <UART_SetConfig+0x2d4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d125      	bne.n	80029f2 <UART_SetConfig+0x1aa>
 80029a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <UART_SetConfig+0x2cc>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029b0:	2b30      	cmp	r3, #48	@ 0x30
 80029b2:	d016      	beq.n	80029e2 <UART_SetConfig+0x19a>
 80029b4:	2b30      	cmp	r3, #48	@ 0x30
 80029b6:	d818      	bhi.n	80029ea <UART_SetConfig+0x1a2>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d00a      	beq.n	80029d2 <UART_SetConfig+0x18a>
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d814      	bhi.n	80029ea <UART_SetConfig+0x1a2>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <UART_SetConfig+0x182>
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d008      	beq.n	80029da <UART_SetConfig+0x192>
 80029c8:	e00f      	b.n	80029ea <UART_SetConfig+0x1a2>
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d0:	e0ad      	b.n	8002b2e <UART_SetConfig+0x2e6>
 80029d2:	2302      	movs	r3, #2
 80029d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d8:	e0a9      	b.n	8002b2e <UART_SetConfig+0x2e6>
 80029da:	2304      	movs	r3, #4
 80029dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e0:	e0a5      	b.n	8002b2e <UART_SetConfig+0x2e6>
 80029e2:	2308      	movs	r3, #8
 80029e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e8:	e0a1      	b.n	8002b2e <UART_SetConfig+0x2e6>
 80029ea:	2310      	movs	r3, #16
 80029ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f0:	e09d      	b.n	8002b2e <UART_SetConfig+0x2e6>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <UART_SetConfig+0x2d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d125      	bne.n	8002a48 <UART_SetConfig+0x200>
 80029fc:	4b45      	ldr	r3, [pc, #276]	@ (8002b14 <UART_SetConfig+0x2cc>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a08:	d016      	beq.n	8002a38 <UART_SetConfig+0x1f0>
 8002a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a0c:	d818      	bhi.n	8002a40 <UART_SetConfig+0x1f8>
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d00a      	beq.n	8002a28 <UART_SetConfig+0x1e0>
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d814      	bhi.n	8002a40 <UART_SetConfig+0x1f8>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <UART_SetConfig+0x1d8>
 8002a1a:	2b40      	cmp	r3, #64	@ 0x40
 8002a1c:	d008      	beq.n	8002a30 <UART_SetConfig+0x1e8>
 8002a1e:	e00f      	b.n	8002a40 <UART_SetConfig+0x1f8>
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a26:	e082      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2e:	e07e      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a30:	2304      	movs	r3, #4
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a36:	e07a      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a38:	2308      	movs	r3, #8
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3e:	e076      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a40:	2310      	movs	r3, #16
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a46:	e072      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	@ (8002b24 <UART_SetConfig+0x2dc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d12a      	bne.n	8002aa8 <UART_SetConfig+0x260>
 8002a52:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <UART_SetConfig+0x2cc>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a60:	d01a      	beq.n	8002a98 <UART_SetConfig+0x250>
 8002a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a66:	d81b      	bhi.n	8002aa0 <UART_SetConfig+0x258>
 8002a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a6c:	d00c      	beq.n	8002a88 <UART_SetConfig+0x240>
 8002a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a72:	d815      	bhi.n	8002aa0 <UART_SetConfig+0x258>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <UART_SetConfig+0x238>
 8002a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7c:	d008      	beq.n	8002a90 <UART_SetConfig+0x248>
 8002a7e:	e00f      	b.n	8002aa0 <UART_SetConfig+0x258>
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a86:	e052      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8e:	e04e      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a90:	2304      	movs	r3, #4
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a96:	e04a      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e046      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e042      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a17      	ldr	r2, [pc, #92]	@ (8002b0c <UART_SetConfig+0x2c4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d13a      	bne.n	8002b28 <UART_SetConfig+0x2e0>
 8002ab2:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <UART_SetConfig+0x2cc>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002abc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ac0:	d01a      	beq.n	8002af8 <UART_SetConfig+0x2b0>
 8002ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ac6:	d81b      	bhi.n	8002b00 <UART_SetConfig+0x2b8>
 8002ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002acc:	d00c      	beq.n	8002ae8 <UART_SetConfig+0x2a0>
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad2:	d815      	bhi.n	8002b00 <UART_SetConfig+0x2b8>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <UART_SetConfig+0x298>
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002adc:	d008      	beq.n	8002af0 <UART_SetConfig+0x2a8>
 8002ade:	e00f      	b.n	8002b00 <UART_SetConfig+0x2b8>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae6:	e022      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aee:	e01e      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002af0:	2304      	movs	r3, #4
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af6:	e01a      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002af8:	2308      	movs	r3, #8
 8002afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afe:	e016      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002b00:	2310      	movs	r3, #16
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e012      	b.n	8002b2e <UART_SetConfig+0x2e6>
 8002b08:	efff69f3 	.word	0xefff69f3
 8002b0c:	40008000 	.word	0x40008000
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	40004800 	.word	0x40004800
 8002b20:	40004c00 	.word	0x40004c00
 8002b24:	40005000 	.word	0x40005000
 8002b28:	2310      	movs	r3, #16
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a9f      	ldr	r2, [pc, #636]	@ (8002db0 <UART_SetConfig+0x568>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d17a      	bne.n	8002c2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d824      	bhi.n	8002b8a <UART_SetConfig+0x342>
 8002b40:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <UART_SetConfig+0x300>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002b8b 	.word	0x08002b8b
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002b8b 	.word	0x08002b8b
 8002b58:	08002b7b 	.word	0x08002b7b
 8002b5c:	08002b8b 	.word	0x08002b8b
 8002b60:	08002b8b 	.word	0x08002b8b
 8002b64:	08002b8b 	.word	0x08002b8b
 8002b68:	08002b83 	.word	0x08002b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f7ff f84c 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8002b70:	61f8      	str	r0, [r7, #28]
        break;
 8002b72:	e010      	b.n	8002b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b74:	4b8f      	ldr	r3, [pc, #572]	@ (8002db4 <UART_SetConfig+0x56c>)
 8002b76:	61fb      	str	r3, [r7, #28]
        break;
 8002b78:	e00d      	b.n	8002b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7a:	f7fe ffad 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8002b7e:	61f8      	str	r0, [r7, #28]
        break;
 8002b80:	e009      	b.n	8002b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b86:	61fb      	str	r3, [r7, #28]
        break;
 8002b88:	e005      	b.n	8002b96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80fb 	beq.w	8002d94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d305      	bcc.n	8002bba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d903      	bls.n	8002bc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bc0:	e0e8      	b.n	8002d94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	461c      	mov	r4, r3
 8002bc8:	4615      	mov	r5, r2
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	022b      	lsls	r3, r5, #8
 8002bd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bd8:	0222      	lsls	r2, r4, #8
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	6849      	ldr	r1, [r1, #4]
 8002bde:	0849      	lsrs	r1, r1, #1
 8002be0:	2000      	movs	r0, #0
 8002be2:	4688      	mov	r8, r1
 8002be4:	4681      	mov	r9, r0
 8002be6:	eb12 0a08 	adds.w	sl, r2, r8
 8002bea:	eb43 0b09 	adc.w	fp, r3, r9
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bfc:	4650      	mov	r0, sl
 8002bfe:	4659      	mov	r1, fp
 8002c00:	f7fd faee 	bl	80001e0 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c12:	d308      	bcc.n	8002c26 <UART_SetConfig+0x3de>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c1a:	d204      	bcs.n	8002c26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	e0b6      	b.n	8002d94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c2c:	e0b2      	b.n	8002d94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c36:	d15e      	bne.n	8002cf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d828      	bhi.n	8002c92 <UART_SetConfig+0x44a>
 8002c40:	a201      	add	r2, pc, #4	@ (adr r2, 8002c48 <UART_SetConfig+0x400>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c93 	.word	0x08002c93
 8002c58:	08002c83 	.word	0x08002c83
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002c93 	.word	0x08002c93
 8002c64:	08002c93 	.word	0x08002c93
 8002c68:	08002c8b 	.word	0x08002c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7fe ffcc 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8002c70:	61f8      	str	r0, [r7, #28]
        break;
 8002c72:	e014      	b.n	8002c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7fe ffde 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8002c78:	61f8      	str	r0, [r7, #28]
        break;
 8002c7a:	e010      	b.n	8002c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002db4 <UART_SetConfig+0x56c>)
 8002c7e:	61fb      	str	r3, [r7, #28]
        break;
 8002c80:	e00d      	b.n	8002c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c82:	f7fe ff29 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8002c86:	61f8      	str	r0, [r7, #28]
        break;
 8002c88:	e009      	b.n	8002c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c8e:	61fb      	str	r3, [r7, #28]
        break;
 8002c90:	e005      	b.n	8002c9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d077      	beq.n	8002d94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005a      	lsls	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	441a      	add	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d916      	bls.n	8002cee <UART_SetConfig+0x4a6>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc6:	d212      	bcs.n	8002cee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f023 030f 	bic.w	r3, r3, #15
 8002cd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	8afb      	ldrh	r3, [r7, #22]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	8afa      	ldrh	r2, [r7, #22]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	e052      	b.n	8002d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cf4:	e04e      	b.n	8002d94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d827      	bhi.n	8002d4e <UART_SetConfig+0x506>
 8002cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0x4bc>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d4f 	.word	0x08002d4f
 8002d14:	08002d3f 	.word	0x08002d3f
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d47 	.word	0x08002d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7fe ff6e 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	61f8      	str	r0, [r7, #28]
        break;
 8002d2e:	e014      	b.n	8002d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7fe ff80 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8002d34:	61f8      	str	r0, [r7, #28]
        break;
 8002d36:	e010      	b.n	8002d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d38:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <UART_SetConfig+0x56c>)
 8002d3a:	61fb      	str	r3, [r7, #28]
        break;
 8002d3c:	e00d      	b.n	8002d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3e:	f7fe fecb 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8002d42:	61f8      	str	r0, [r7, #28]
        break;
 8002d44:	e009      	b.n	8002d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d4a:	61fb      	str	r3, [r7, #28]
        break;
 8002d4c:	e005      	b.n	8002d5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d58:	bf00      	nop
    }

    if (pclk != 0U)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d019      	beq.n	8002d94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	085a      	lsrs	r2, r3, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	d909      	bls.n	8002d8e <UART_SetConfig+0x546>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d80:	d205      	bcs.n	8002d8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	e002      	b.n	8002d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002da0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3728      	adds	r7, #40	@ 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40008000 	.word	0x40008000
 8002db4:	00f42400 	.word	0x00f42400

08002db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01a      	beq.n	8002ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb6:	d10a      	bne.n	8002ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b098      	sub	sp, #96	@ 0x60
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f0c:	f7fd fdf0 	bl	8000af0 <HAL_GetTick>
 8002f10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d12e      	bne.n	8002f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f88c 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d021      	beq.n	8002f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e6      	bne.n	8002f3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e062      	b.n	8003044 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d149      	bne.n	8003020 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f94:	2200      	movs	r2, #0
 8002f96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f856 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03c      	beq.n	8003020 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e6      	bne.n	8002fa6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ff8:	61fa      	str	r2, [r7, #28]
 8002ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	69b9      	ldr	r1, [r7, #24]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	617b      	str	r3, [r7, #20]
   return(result);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e5      	bne.n	8002fd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e011      	b.n	8003044 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3758      	adds	r7, #88	@ 0x58
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	e04f      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d04b      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fd fd43 	bl	8000af0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <UART_WaitOnFlagUntilTimeout+0x30>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e04e      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d037      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b80      	cmp	r3, #128	@ 0x80
 8003092:	d034      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b40      	cmp	r3, #64	@ 0x40
 8003098:	d031      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d110      	bne.n	80030ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f838 	bl	8003126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2208      	movs	r2, #8
 80030ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e029      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d8:	d111      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f81e 	bl	8003126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e00f      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	429a      	cmp	r2, r3
 800311a:	d0a0      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003126:	b480      	push	{r7}
 8003128:	b095      	sub	sp, #84	@ 0x54
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800314c:	643b      	str	r3, [r7, #64]	@ 0x40
 800314e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e6      	bne.n	800312e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3308      	adds	r3, #8
 8003166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3308      	adds	r3, #8
 800317e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e5      	bne.n	8003160 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	2b01      	cmp	r3, #1
 800319a:	d118      	bne.n	80031ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	613b      	str	r3, [r7, #16]
   return(result);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e6      	bne.n	800319c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031e2:	bf00      	nop
 80031e4:	3754      	adds	r7, #84	@ 0x54
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031f2:	f000 fe8f 	bl	8003f14 <vTaskStartScheduler>
  
  return osOK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}

080031fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f103 0208 	add.w	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f103 0208 	add.w	r2, r3, #8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f103 0208 	add.w	r2, r3, #8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d103      	bne.n	80032be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e00c      	b.n	80032d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3308      	adds	r3, #8
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e002      	b.n	80032cc <vListInsert+0x2e>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d2f6      	bcs.n	80032c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6852      	ldr	r2, [r2, #4]
 8003330:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d103      	bne.n	8003344 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	1e5a      	subs	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003390:	f001 fd22 	bl	8004dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	3b01      	subs	r3, #1
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	22ff      	movs	r2, #255	@ 0xff
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	22ff      	movs	r2, #255	@ 0xff
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d114      	bne.n	8003410 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01a      	beq.n	8003424 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3310      	adds	r3, #16
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 ffd8 	bl	80043a8 <xTaskRemoveFromEventList>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <xQueueGenericReset+0xd0>)
 8003400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	e009      	b.n	8003424 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3310      	adds	r3, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fef1 	bl	80031fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3324      	adds	r3, #36	@ 0x24
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff feec 	bl	80031fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003424:	f001 fd0a 	bl	8004e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003428:	2301      	movs	r3, #1
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10b      	bne.n	8003464 <xQueueGenericCreate+0x2c>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	613b      	str	r3, [r7, #16]
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3348      	adds	r3, #72	@ 0x48
 8003472:	4618      	mov	r0, r3
 8003474:	f001 fd90 	bl	8004f98 <pvPortMalloc>
 8003478:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d011      	beq.n	80034a4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3348      	adds	r3, #72	@ 0x48
 8003488:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003492:	79fa      	ldrb	r2, [r7, #7]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f805 	bl	80034ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034a4:	69bb      	ldr	r3, [r7, #24]
	}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e002      	b.n	80034d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034dc:	2101      	movs	r1, #1
 80034de:	69b8      	ldr	r0, [r7, #24]
 80034e0:	f7ff ff40 	bl	8003364 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800350c:	2300      	movs	r3, #0
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f81c 	bl	8003550 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	461a      	mov	r2, r3
 8003536:	6939      	ldr	r1, [r7, #16]
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7ff ff7d 	bl	8003438 <xQueueGenericCreate>
 800353e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff ffd3 	bl	80034ec <prvInitialiseMutex>

		return xNewQueue;
 8003546:	68fb      	ldr	r3, [r7, #12]
	}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	@ 0x38
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800355e:	2300      	movs	r3, #0
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <xQueueGenericSend+0x34>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <xQueueGenericSend+0x42>
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <xQueueGenericSend+0x46>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <xQueueGenericSend+0x48>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <xQueueGenericSend+0x64>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d103      	bne.n	80035c2 <xQueueGenericSend+0x72>
 80035ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <xQueueGenericSend+0x76>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <xQueueGenericSend+0x78>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <xQueueGenericSend+0x94>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	623b      	str	r3, [r7, #32]
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035e4:	f001 f8a0 	bl	8004728 <xTaskGetSchedulerState>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <xQueueGenericSend+0xa4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <xQueueGenericSend+0xa8>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <xQueueGenericSend+0xaa>
 80035f8:	2300      	movs	r3, #0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <xQueueGenericSend+0xc6>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	61fb      	str	r3, [r7, #28]
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	e7fd      	b.n	8003612 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003616:	f001 fbdf 	bl	8004dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <xQueueGenericSend+0xdc>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d129      	bne.n	8003680 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003632:	f000 f9b7 	bl	80039a4 <prvCopyDataToQueue>
 8003636:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	3324      	adds	r3, #36	@ 0x24
 8003644:	4618      	mov	r0, r3
 8003646:	f000 feaf 	bl	80043a8 <xTaskRemoveFromEventList>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d013      	beq.n	8003678 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003650:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <xQueueGenericSend+0x200>)
 8003652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	e00a      	b.n	8003678 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003668:	4b39      	ldr	r3, [pc, #228]	@ (8003750 <xQueueGenericSend+0x200>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003678:	f001 fbe0 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 800367c:	2301      	movs	r3, #1
 800367e:	e063      	b.n	8003748 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003686:	f001 fbd9 	bl	8004e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800368a:	2300      	movs	r3, #0
 800368c:	e05c      	b.n	8003748 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800368e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fee9 	bl	8004470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800369e:	2301      	movs	r3, #1
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a2:	f001 fbcb 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036a6:	f000 fc97 	bl	8003fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036aa:	f001 fb95 	bl	8004dd8 <vPortEnterCritical>
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d103      	bne.n	80036c4 <xQueueGenericSend+0x174>
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d103      	bne.n	80036da <xQueueGenericSend+0x18a>
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036da:	f001 fbaf 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036de:	1d3a      	adds	r2, r7, #4
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fed8 	bl	800449c <xTaskCheckForTimeOut>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d124      	bne.n	800373c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f4:	f000 fa28 	bl	8003b48 <prvIsQueueFull>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	3310      	adds	r3, #16
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fe28 	bl	800435c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800370c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800370e:	f000 f9b3 	bl	8003a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003712:	f000 fc6f 	bl	8003ff4 <xTaskResumeAll>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f af7c 	bne.w	8003616 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800371e:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <xQueueGenericSend+0x200>)
 8003720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	e772      	b.n	8003616 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003732:	f000 f9a1 	bl	8003a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003736:	f000 fc5d 	bl	8003ff4 <xTaskResumeAll>
 800373a:	e76c      	b.n	8003616 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800373c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800373e:	f000 f99b 	bl	8003a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003742:	f000 fc57 	bl	8003ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003746:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003748:	4618      	mov	r0, r3
 800374a:	3738      	adds	r7, #56	@ 0x38
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	@ 0x38
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	623b      	str	r3, [r7, #32]
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61fb      	str	r3, [r7, #28]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037a8:	f000 ffbe 	bl	8004728 <xTaskGetSchedulerState>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <xQueueSemaphoreTake+0x64>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <xQueueSemaphoreTake+0x68>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <xQueueSemaphoreTake+0x6a>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <xQueueSemaphoreTake+0x86>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	61bb      	str	r3, [r7, #24]
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	e7fd      	b.n	80037d6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037da:	f001 fafd 	bl	8004dd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d024      	beq.n	8003834 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80037fa:	f001 f941 	bl	8004a80 <pvTaskIncrementMutexHeldCount>
 80037fe:	4602      	mov	r2, r0
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00f      	beq.n	800382c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fdc9 	bl	80043a8 <xTaskRemoveFromEventList>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800381c:	4b54      	ldr	r3, [pc, #336]	@ (8003970 <xQueueSemaphoreTake+0x21c>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800382c:	f001 fb06 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	e098      	b.n	8003966 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d112      	bne.n	8003860 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	617b      	str	r3, [r7, #20]
}
 8003852:	bf00      	nop
 8003854:	bf00      	nop
 8003856:	e7fd      	b.n	8003854 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003858:	f001 faf0 	bl	8004e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800385c:	2300      	movs	r3, #0
 800385e:	e082      	b.n	8003966 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fe00 	bl	8004470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003874:	f001 fae2 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003878:	f000 fbae 	bl	8003fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800387c:	f001 faac 	bl	8004dd8 <vPortEnterCritical>
 8003880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003882:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003886:	b25b      	sxtb	r3, r3
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d103      	bne.n	8003896 <xQueueSemaphoreTake+0x142>
 800388e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800389c:	b25b      	sxtb	r3, r3
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d103      	bne.n	80038ac <xQueueSemaphoreTake+0x158>
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038ac:	f001 fac6 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038b0:	463a      	mov	r2, r7
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fdef 	bl	800449c <xTaskCheckForTimeOut>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d132      	bne.n	800392a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038c6:	f000 f929 	bl	8003b1c <prvIsQueueEmpty>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d026      	beq.n	800391e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80038d8:	f001 fa7e 	bl	8004dd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 ff3f 	bl	8004764 <xTaskPriorityInherit>
 80038e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80038e8:	f001 faa8 	bl	8004e3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	3324      	adds	r3, #36	@ 0x24
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd31 	bl	800435c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038fc:	f000 f8bc 	bl	8003a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003900:	f000 fb78 	bl	8003ff4 <xTaskResumeAll>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f47f af67 	bne.w	80037da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800390c:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <xQueueSemaphoreTake+0x21c>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	e75d      	b.n	80037da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800391e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003920:	f000 f8aa 	bl	8003a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003924:	f000 fb66 	bl	8003ff4 <xTaskResumeAll>
 8003928:	e757      	b.n	80037da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800392a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800392c:	f000 f8a4 	bl	8003a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003930:	f000 fb60 	bl	8003ff4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003936:	f000 f8f1 	bl	8003b1c <prvIsQueueEmpty>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f43f af4c 	beq.w	80037da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003948:	f001 fa46 	bl	8004dd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800394c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800394e:	f000 f811 	bl	8003974 <prvGetDisinheritPriorityAfterTimeout>
 8003952:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800395a:	4618      	mov	r0, r3
 800395c:	f001 f800 	bl	8004960 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003960:	f001 fa6c 	bl	8004e3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003964:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003966:	4618      	mov	r0, r3
 8003968:	3738      	adds	r7, #56	@ 0x38
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1c3 0307 	rsb	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e001      	b.n	8003996 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003996:	68fb      	ldr	r3, [r7, #12]
	}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d14d      	bne.n	8003a66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 ff3e 	bl	8004850 <xTaskPriorityDisinherit>
 80039d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	e043      	b.n	8003a66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d119      	bne.n	8003a18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6858      	ldr	r0, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	461a      	mov	r2, r3
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	f001 fcec 	bl	80053cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d32b      	bcc.n	8003a66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e026      	b.n	8003a66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68d8      	ldr	r0, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	461a      	mov	r2, r3
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	f001 fcd2 	bl	80053cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	425b      	negs	r3, r3
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d105      	bne.n	8003a66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a80:	f001 f9aa 	bl	8004dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a8c:	e011      	b.n	8003ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3324      	adds	r3, #36	@ 0x24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fc84 	bl	80043a8 <xTaskRemoveFromEventList>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003aa6:	f000 fd5d 	bl	8004564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	dce9      	bgt.n	8003a8e <prvUnlockQueue+0x16>
 8003aba:	e000      	b.n	8003abe <prvUnlockQueue+0x46>
					break;
 8003abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	22ff      	movs	r2, #255	@ 0xff
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ac6:	f001 f9b9 	bl	8004e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003aca:	f001 f985 	bl	8004dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ad6:	e011      	b.n	8003afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3310      	adds	r3, #16
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fc5f 	bl	80043a8 <xTaskRemoveFromEventList>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003af0:	f000 fd38 	bl	8004564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	dce9      	bgt.n	8003ad8 <prvUnlockQueue+0x60>
 8003b04:	e000      	b.n	8003b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	22ff      	movs	r2, #255	@ 0xff
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b10:	f001 f994 	bl	8004e3c <vPortExitCritical>
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b24:	f001 f958 	bl	8004dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e001      	b.n	8003b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b3a:	f001 f97f 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b50:	f001 f942 	bl	8004dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d102      	bne.n	8003b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e001      	b.n	8003b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b6a:	f001 f967 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	@ 0x38
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	623b      	str	r3, [r7, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	61fb      	str	r3, [r7, #28]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bc2:	2354      	movs	r3, #84	@ 0x54
 8003bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b54      	cmp	r3, #84	@ 0x54
 8003bca:	d00b      	beq.n	8003be4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	61bb      	str	r3, [r7, #24]
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003be4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01e      	beq.n	8003c2a <xTaskCreateStatic+0xb2>
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01b      	beq.n	8003c2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c04:	2300      	movs	r3, #0
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f850 	bl	8003cc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c24:	f000 f8d6 	bl	8003dd4 <prvAddNewTaskToReadyList>
 8003c28:	e001      	b.n	8003c2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c2e:	697b      	ldr	r3, [r7, #20]
	}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	@ 0x30
 8003c3c:	af04      	add	r7, sp, #16
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 f9a3 	bl	8004f98 <pvPortMalloc>
 8003c52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00e      	beq.n	8003c78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c5a:	2054      	movs	r0, #84	@ 0x54
 8003c5c:	f001 f99c 	bl	8004f98 <pvPortMalloc>
 8003c60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c6e:	e005      	b.n	8003c7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c70:	6978      	ldr	r0, [r7, #20]
 8003c72:	f001 fa5f 	bl	8005134 <vPortFree>
 8003c76:	e001      	b.n	8003c7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9303      	str	r3, [sp, #12]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	9302      	str	r3, [sp, #8]
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f80e 	bl	8003cc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca6:	69f8      	ldr	r0, [r7, #28]
 8003ca8:	f000 f894 	bl	8003dd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cac:	2301      	movs	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e002      	b.n	8003cb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b088      	sub	sp, #32
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f023 0307 	bic.w	r3, r3, #7
 8003ce8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	617b      	str	r3, [r7, #20]
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01f      	beq.n	8003d52 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e012      	b.n	8003d3e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	7819      	ldrb	r1, [r3, #0]
 8003d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	3334      	adds	r3, #52	@ 0x34
 8003d28:	460a      	mov	r2, r1
 8003d2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b0f      	cmp	r3, #15
 8003d42:	d9e9      	bls.n	8003d18 <prvInitialiseNewTask+0x56>
 8003d44:	e000      	b.n	8003d48 <prvInitialiseNewTask+0x86>
			{
				break;
 8003d46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d50:	e003      	b.n	8003d5a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d901      	bls.n	8003d64 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d60:	2306      	movs	r3, #6
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d6e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	2200      	movs	r2, #0
 8003d74:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fa5e 	bl	800323c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	3318      	adds	r3, #24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fa59 	bl	800323c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	f1c3 0207 	rsb	r2, r3, #7
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	2200      	movs	r2, #0
 8003da4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	69b8      	ldr	r0, [r7, #24]
 8003db4:	f000 fede 	bl	8004b74 <pxPortInitialiseStack>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dca:	bf00      	nop
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ddc:	f000 fffc 	bl	8004dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003de0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e8c <prvAddNewTaskToReadyList+0xb8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a29      	ldr	r2, [pc, #164]	@ (8003e8c <prvAddNewTaskToReadyList+0xb8>)
 8003de8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dea:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <prvAddNewTaskToReadyList+0xbc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003df2:	4a27      	ldr	r2, [pc, #156]	@ (8003e90 <prvAddNewTaskToReadyList+0xbc>)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003df8:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <prvAddNewTaskToReadyList+0xb8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d110      	bne.n	8003e22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e00:	f000 fbd4 	bl	80045ac <prvInitialiseTaskLists>
 8003e04:	e00d      	b.n	8003e22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e06:	4b23      	ldr	r3, [pc, #140]	@ (8003e94 <prvAddNewTaskToReadyList+0xc0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e0e:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <prvAddNewTaskToReadyList+0xbc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d802      	bhi.n	8003e22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <prvAddNewTaskToReadyList+0xbc>)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e22:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <prvAddNewTaskToReadyList+0xc4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <prvAddNewTaskToReadyList+0xc4>)
 8003e2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	2201      	movs	r2, #1
 8003e32:	409a      	lsls	r2, r3
 8003e34:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <prvAddNewTaskToReadyList+0xc8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <prvAddNewTaskToReadyList+0xc8>)
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <prvAddNewTaskToReadyList+0xcc>)
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7ff f9fe 	bl	8003256 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e5a:	f000 ffef 	bl	8004e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <prvAddNewTaskToReadyList+0xc0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00e      	beq.n	8003e84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <prvAddNewTaskToReadyList+0xbc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d207      	bcs.n	8003e84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <prvAddNewTaskToReadyList+0xd0>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000410 	.word	0x20000410
 8003e90:	20000310 	.word	0x20000310
 8003e94:	2000041c 	.word	0x2000041c
 8003e98:	2000042c 	.word	0x2000042c
 8003e9c:	20000418 	.word	0x20000418
 8003ea0:	20000314 	.word	0x20000314
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eba:	4b14      	ldr	r3, [pc, #80]	@ (8003f0c <vTaskDelay+0x64>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <vTaskDelay+0x32>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60bb      	str	r3, [r7, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003eda:	f000 f87d 	bl	8003fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ede:	2100      	movs	r1, #0
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fde1 	bl	8004aa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ee6:	f000 f885 	bl	8003ff4 <xTaskResumeAll>
 8003eea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <vTaskDelay+0x68>)
 8003ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000438 	.word	0x20000438
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	@ 0x28
 8003f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f22:	463a      	mov	r2, r7
 8003f24:	1d39      	adds	r1, r7, #4
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc faee 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	9202      	str	r2, [sp, #8]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	460a      	mov	r2, r1
 8003f42:	491f      	ldr	r1, [pc, #124]	@ (8003fc0 <vTaskStartScheduler+0xac>)
 8003f44:	481f      	ldr	r0, [pc, #124]	@ (8003fc4 <vTaskStartScheduler+0xb0>)
 8003f46:	f7ff fe17 	bl	8003b78 <xTaskCreateStatic>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc8 <vTaskStartScheduler+0xb4>)
 8003f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f50:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <vTaskStartScheduler+0xb4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e001      	b.n	8003f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d116      	bne.n	8003f96 <vTaskStartScheduler+0x82>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	613b      	str	r3, [r7, #16]
}
 8003f7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <vTaskStartScheduler+0xb8>)
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f84:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <vTaskStartScheduler+0xbc>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f8a:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <vTaskStartScheduler+0xc0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f90:	f000 fe7e 	bl	8004c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f94:	e00f      	b.n	8003fb6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d10b      	bne.n	8003fb6 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60fb      	str	r3, [r7, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <vTaskStartScheduler+0x9e>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08005448 	.word	0x08005448
 8003fc4:	0800457d 	.word	0x0800457d
 8003fc8:	20000434 	.word	0x20000434
 8003fcc:	20000430 	.word	0x20000430
 8003fd0:	2000041c 	.word	0x2000041c
 8003fd4:	20000414 	.word	0x20000414

08003fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	@ (8003ff0 <vTaskSuspendAll+0x18>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4a03      	ldr	r2, [pc, #12]	@ (8003ff0 <vTaskSuspendAll+0x18>)
 8003fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000438 	.word	0x20000438

08003ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004002:	4b42      	ldr	r3, [pc, #264]	@ (800410c <xTaskResumeAll+0x118>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <xTaskResumeAll+0x2e>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	603b      	str	r3, [r7, #0]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004022:	f000 fed9 	bl	8004dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004026:	4b39      	ldr	r3, [pc, #228]	@ (800410c <xTaskResumeAll+0x118>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3b01      	subs	r3, #1
 800402c:	4a37      	ldr	r2, [pc, #220]	@ (800410c <xTaskResumeAll+0x118>)
 800402e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004030:	4b36      	ldr	r3, [pc, #216]	@ (800410c <xTaskResumeAll+0x118>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d161      	bne.n	80040fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004038:	4b35      	ldr	r3, [pc, #212]	@ (8004110 <xTaskResumeAll+0x11c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05d      	beq.n	80040fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004040:	e02e      	b.n	80040a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004042:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <xTaskResumeAll+0x120>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3318      	adds	r3, #24
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f95e 	bl	8003310 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3304      	adds	r3, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f959 	bl	8003310 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	2201      	movs	r2, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	4b2c      	ldr	r3, [pc, #176]	@ (8004118 <xTaskResumeAll+0x124>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <xTaskResumeAll+0x124>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4a27      	ldr	r2, [pc, #156]	@ (800411c <xTaskResumeAll+0x128>)
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7ff f8e5 	bl	8003256 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <xTaskResumeAll+0x12c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800409a:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <xTaskResumeAll+0x130>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004114 <xTaskResumeAll+0x120>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1cc      	bne.n	8004042 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040ae:	f000 fb1b 	bl	80046e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <xTaskResumeAll+0x134>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040be:	f000 f837 	bl	8004130 <xTaskIncrementTick>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <xTaskResumeAll+0x130>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f1      	bne.n	80040be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <xTaskResumeAll+0x134>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <xTaskResumeAll+0x130>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <xTaskResumeAll+0x138>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040fc:	f000 fe9e 	bl	8004e3c <vPortExitCritical>

	return xAlreadyYielded;
 8004100:	68bb      	ldr	r3, [r7, #8]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000438 	.word	0x20000438
 8004110:	20000410 	.word	0x20000410
 8004114:	200003d0 	.word	0x200003d0
 8004118:	20000418 	.word	0x20000418
 800411c:	20000314 	.word	0x20000314
 8004120:	20000310 	.word	0x20000310
 8004124:	20000424 	.word	0x20000424
 8004128:	20000420 	.word	0x20000420
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413a:	4b4f      	ldr	r3, [pc, #316]	@ (8004278 <xTaskIncrementTick+0x148>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 808f 	bne.w	8004262 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004144:	4b4d      	ldr	r3, [pc, #308]	@ (800427c <xTaskIncrementTick+0x14c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800414c:	4a4b      	ldr	r2, [pc, #300]	@ (800427c <xTaskIncrementTick+0x14c>)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d121      	bne.n	800419c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004158:	4b49      	ldr	r3, [pc, #292]	@ (8004280 <xTaskIncrementTick+0x150>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	603b      	str	r3, [r7, #0]
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	e7fd      	b.n	8004176 <xTaskIncrementTick+0x46>
 800417a:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <xTaskIncrementTick+0x150>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	4b40      	ldr	r3, [pc, #256]	@ (8004284 <xTaskIncrementTick+0x154>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3e      	ldr	r2, [pc, #248]	@ (8004280 <xTaskIncrementTick+0x150>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	4a3e      	ldr	r2, [pc, #248]	@ (8004284 <xTaskIncrementTick+0x154>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b3e      	ldr	r3, [pc, #248]	@ (8004288 <xTaskIncrementTick+0x158>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	4a3c      	ldr	r2, [pc, #240]	@ (8004288 <xTaskIncrementTick+0x158>)
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	f000 faa6 	bl	80046e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800419c:	4b3b      	ldr	r3, [pc, #236]	@ (800428c <xTaskIncrementTick+0x15c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d348      	bcc.n	8004238 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a6:	4b36      	ldr	r3, [pc, #216]	@ (8004280 <xTaskIncrementTick+0x150>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d104      	bne.n	80041ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b0:	4b36      	ldr	r3, [pc, #216]	@ (800428c <xTaskIncrementTick+0x15c>)
 80041b2:	f04f 32ff 	mov.w	r2, #4294967295
 80041b6:	601a      	str	r2, [r3, #0]
					break;
 80041b8:	e03e      	b.n	8004238 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ba:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <xTaskIncrementTick+0x150>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d203      	bcs.n	80041da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041d2:	4a2e      	ldr	r2, [pc, #184]	@ (800428c <xTaskIncrementTick+0x15c>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041d8:	e02e      	b.n	8004238 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	3304      	adds	r3, #4
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff f896 	bl	8003310 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3318      	adds	r3, #24
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff f88d 	bl	8003310 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	2201      	movs	r2, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <xTaskIncrementTick+0x160>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	4a22      	ldr	r2, [pc, #136]	@ (8004290 <xTaskIncrementTick+0x160>)
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <xTaskIncrementTick+0x164>)
 8004216:	441a      	add	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f7ff f819 	bl	8003256 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004228:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <xTaskIncrementTick+0x168>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	429a      	cmp	r2, r3
 8004230:	d3b9      	bcc.n	80041a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004232:	2301      	movs	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004236:	e7b6      	b.n	80041a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004238:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <xTaskIncrementTick+0x168>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423e:	4915      	ldr	r1, [pc, #84]	@ (8004294 <xTaskIncrementTick+0x164>)
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d901      	bls.n	8004254 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004250:	2301      	movs	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <xTaskIncrementTick+0x16c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e004      	b.n	800426c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004262:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <xTaskIncrementTick+0x170>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <xTaskIncrementTick+0x170>)
 800426a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800426c:	697b      	ldr	r3, [r7, #20]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000438 	.word	0x20000438
 800427c:	20000414 	.word	0x20000414
 8004280:	200003c8 	.word	0x200003c8
 8004284:	200003cc 	.word	0x200003cc
 8004288:	20000428 	.word	0x20000428
 800428c:	20000430 	.word	0x20000430
 8004290:	20000418 	.word	0x20000418
 8004294:	20000314 	.word	0x20000314
 8004298:	20000310 	.word	0x20000310
 800429c:	20000424 	.word	0x20000424
 80042a0:	20000420 	.word	0x20000420

080042a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042aa:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <vTaskSwitchContext+0xa4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042b2:	4b26      	ldr	r3, [pc, #152]	@ (800434c <vTaskSwitchContext+0xa8>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042b8:	e040      	b.n	800433c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <vTaskSwitchContext+0xa8>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c0:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <vTaskSwitchContext+0xac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	f1c3 031f 	rsb	r3, r3, #31
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	491f      	ldr	r1, [pc, #124]	@ (8004354 <vTaskSwitchContext+0xb0>)
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <vTaskSwitchContext+0x5e>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <vTaskSwitchContext+0x5a>
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a11      	ldr	r2, [pc, #68]	@ (8004354 <vTaskSwitchContext+0xb0>)
 800430e:	4413      	add	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3308      	adds	r3, #8
 8004324:	429a      	cmp	r2, r3
 8004326:	d104      	bne.n	8004332 <vTaskSwitchContext+0x8e>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a07      	ldr	r2, [pc, #28]	@ (8004358 <vTaskSwitchContext+0xb4>)
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	20000438 	.word	0x20000438
 800434c:	20000424 	.word	0x20000424
 8004350:	20000418 	.word	0x20000418
 8004354:	20000314 	.word	0x20000314
 8004358:	20000310 	.word	0x20000310

0800435c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <vTaskPlaceOnEventList+0x48>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3318      	adds	r3, #24
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe ff86 	bl	800329e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004392:	2101      	movs	r1, #1
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f000 fb87 	bl	8004aa8 <prvAddCurrentTaskToDelayedList>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000310 	.word	0x20000310

080043a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3318      	adds	r3, #24
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe ff98 	bl	8003310 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <xTaskRemoveFromEventList+0xb0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11c      	bne.n	8004422 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe ff8f 	bl	8003310 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	4b18      	ldr	r3, [pc, #96]	@ (800445c <xTaskRemoveFromEventList+0xb4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	4a16      	ldr	r2, [pc, #88]	@ (800445c <xTaskRemoveFromEventList+0xb4>)
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4a13      	ldr	r2, [pc, #76]	@ (8004460 <xTaskRemoveFromEventList+0xb8>)
 8004412:	441a      	add	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7fe ff1b 	bl	8003256 <vListInsertEnd>
 8004420:	e005      	b.n	800442e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3318      	adds	r3, #24
 8004426:	4619      	mov	r1, r3
 8004428:	480e      	ldr	r0, [pc, #56]	@ (8004464 <xTaskRemoveFromEventList+0xbc>)
 800442a:	f7fe ff14 	bl	8003256 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <xTaskRemoveFromEventList+0xc0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	429a      	cmp	r2, r3
 800443a:	d905      	bls.n	8004448 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004440:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <xTaskRemoveFromEventList+0xc4>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e001      	b.n	800444c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800444c:	697b      	ldr	r3, [r7, #20]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000438 	.word	0x20000438
 800445c:	20000418 	.word	0x20000418
 8004460:	20000314 	.word	0x20000314
 8004464:	200003d0 	.word	0x200003d0
 8004468:	20000310 	.word	0x20000310
 800446c:	20000424 	.word	0x20000424

08004470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004478:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <vTaskInternalSetTimeOutState+0x24>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <vTaskInternalSetTimeOutState+0x28>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	20000428 	.word	0x20000428
 8004498:	20000414 	.word	0x20000414

0800449c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	613b      	str	r3, [r7, #16]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60fb      	str	r3, [r7, #12]
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80044e2:	f000 fc79 	bl	8004dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044e6:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <xTaskCheckForTimeOut+0xc0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d102      	bne.n	8004506 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	e023      	b.n	800454e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <xTaskCheckForTimeOut+0xc4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d007      	beq.n	8004522 <xTaskCheckForTimeOut+0x86>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	d302      	bcc.n	8004522 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e015      	b.n	800454e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d20b      	bcs.n	8004544 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	1ad2      	subs	r2, r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff99 	bl	8004470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e004      	b.n	800454e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800454a:	2301      	movs	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800454e:	f000 fc75 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 8004552:	69fb      	ldr	r3, [r7, #28]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000414 	.word	0x20000414
 8004560:	20000428 	.word	0x20000428

08004564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <vTaskMissedYield+0x14>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	20000424 	.word	0x20000424

0800457c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004584:	f000 f852 	bl	800462c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <prvIdleTask+0x28>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d9f9      	bls.n	8004584 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <prvIdleTask+0x2c>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045a0:	e7f0      	b.n	8004584 <prvIdleTask+0x8>
 80045a2:	bf00      	nop
 80045a4:	20000314 	.word	0x20000314
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	e00c      	b.n	80045d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4a12      	ldr	r2, [pc, #72]	@ (800460c <prvInitialiseTaskLists+0x60>)
 80045c4:	4413      	add	r3, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fe18 	bl	80031fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3301      	adds	r3, #1
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	d9ef      	bls.n	80045b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045d8:	480d      	ldr	r0, [pc, #52]	@ (8004610 <prvInitialiseTaskLists+0x64>)
 80045da:	f7fe fe0f 	bl	80031fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045de:	480d      	ldr	r0, [pc, #52]	@ (8004614 <prvInitialiseTaskLists+0x68>)
 80045e0:	f7fe fe0c 	bl	80031fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045e4:	480c      	ldr	r0, [pc, #48]	@ (8004618 <prvInitialiseTaskLists+0x6c>)
 80045e6:	f7fe fe09 	bl	80031fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ea:	480c      	ldr	r0, [pc, #48]	@ (800461c <prvInitialiseTaskLists+0x70>)
 80045ec:	f7fe fe06 	bl	80031fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045f0:	480b      	ldr	r0, [pc, #44]	@ (8004620 <prvInitialiseTaskLists+0x74>)
 80045f2:	f7fe fe03 	bl	80031fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <prvInitialiseTaskLists+0x78>)
 80045f8:	4a05      	ldr	r2, [pc, #20]	@ (8004610 <prvInitialiseTaskLists+0x64>)
 80045fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <prvInitialiseTaskLists+0x7c>)
 80045fe:	4a05      	ldr	r2, [pc, #20]	@ (8004614 <prvInitialiseTaskLists+0x68>)
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000314 	.word	0x20000314
 8004610:	200003a0 	.word	0x200003a0
 8004614:	200003b4 	.word	0x200003b4
 8004618:	200003d0 	.word	0x200003d0
 800461c:	200003e4 	.word	0x200003e4
 8004620:	200003fc 	.word	0x200003fc
 8004624:	200003c8 	.word	0x200003c8
 8004628:	200003cc 	.word	0x200003cc

0800462c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004632:	e019      	b.n	8004668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004634:	f000 fbd0 	bl	8004dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004638:	4b10      	ldr	r3, [pc, #64]	@ (800467c <prvCheckTasksWaitingTermination+0x50>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe fe63 	bl	8003310 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <prvCheckTasksWaitingTermination+0x54>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3b01      	subs	r3, #1
 8004650:	4a0b      	ldr	r2, [pc, #44]	@ (8004680 <prvCheckTasksWaitingTermination+0x54>)
 8004652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <prvCheckTasksWaitingTermination+0x58>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3b01      	subs	r3, #1
 800465a:	4a0a      	ldr	r2, [pc, #40]	@ (8004684 <prvCheckTasksWaitingTermination+0x58>)
 800465c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800465e:	f000 fbed 	bl	8004e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f810 	bl	8004688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <prvCheckTasksWaitingTermination+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e1      	bne.n	8004634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200003e4 	.word	0x200003e4
 8004680:	20000410 	.word	0x20000410
 8004684:	200003f8 	.word	0x200003f8

08004688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fd48 	bl	8005134 <vPortFree>
				vPortFree( pxTCB );
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fd45 	bl	8005134 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046aa:	e019      	b.n	80046e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d103      	bne.n	80046be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fd3c 	bl	8005134 <vPortFree>
	}
 80046bc:	e010      	b.n	80046e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d00b      	beq.n	80046e0 <prvDeleteTCB+0x58>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	60fb      	str	r3, [r7, #12]
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <prvDeleteTCB+0x54>
	}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <prvResetNextTaskUnblockTime+0x38>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <prvResetNextTaskUnblockTime+0x3c>)
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004700:	e008      	b.n	8004714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004702:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <prvResetNextTaskUnblockTime+0x38>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <prvResetNextTaskUnblockTime+0x3c>)
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	200003c8 	.word	0x200003c8
 8004724:	20000430 	.word	0x20000430

08004728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800472e:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <xTaskGetSchedulerState+0x34>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004736:	2301      	movs	r3, #1
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	e008      	b.n	800474e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473c:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <xTaskGetSchedulerState+0x38>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004744:	2302      	movs	r3, #2
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	e001      	b.n	800474e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800474e:	687b      	ldr	r3, [r7, #4]
	}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	2000041c 	.word	0x2000041c
 8004760:	20000438 	.word	0x20000438

08004764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d05e      	beq.n	8004838 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <xTaskPriorityInherit+0xe0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	429a      	cmp	r2, r3
 8004786:	d24e      	bcs.n	8004826 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	db06      	blt.n	800479e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004790:	4b2c      	ldr	r3, [pc, #176]	@ (8004844 <xTaskPriorityInherit+0xe0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	f1c3 0207 	rsb	r2, r3, #7
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6959      	ldr	r1, [r3, #20]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a26      	ldr	r2, [pc, #152]	@ (8004848 <xTaskPriorityInherit+0xe4>)
 80047b0:	4413      	add	r3, r2
 80047b2:	4299      	cmp	r1, r3
 80047b4:	d12f      	bne.n	8004816 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fda8 	bl	8003310 <uxListRemove>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	2201      	movs	r2, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43da      	mvns	r2, r3
 80047d2:	4b1e      	ldr	r3, [pc, #120]	@ (800484c <xTaskPriorityInherit+0xe8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4013      	ands	r3, r2
 80047d8:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <xTaskPriorityInherit+0xe8>)
 80047da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047dc:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <xTaskPriorityInherit+0xe0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	2201      	movs	r2, #1
 80047ec:	409a      	lsls	r2, r3
 80047ee:	4b17      	ldr	r3, [pc, #92]	@ (800484c <xTaskPriorityInherit+0xe8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	4a15      	ldr	r2, [pc, #84]	@ (800484c <xTaskPriorityInherit+0xe8>)
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4a10      	ldr	r2, [pc, #64]	@ (8004848 <xTaskPriorityInherit+0xe4>)
 8004806:	441a      	add	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7fe fd21 	bl	8003256 <vListInsertEnd>
 8004814:	e004      	b.n	8004820 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004816:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <xTaskPriorityInherit+0xe0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e008      	b.n	8004838 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <xTaskPriorityInherit+0xe0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	429a      	cmp	r2, r3
 8004832:	d201      	bcs.n	8004838 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004838:	68fb      	ldr	r3, [r7, #12]
	}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000310 	.word	0x20000310
 8004848:	20000314 	.word	0x20000314
 800484c:	20000418 	.word	0x20000418

08004850 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d070      	beq.n	8004948 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <xTaskPriorityDisinherit+0x104>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	429a      	cmp	r2, r3
 800486e:	d00b      	beq.n	8004888 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60bb      	str	r3, [r7, #8]
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ac:	1e5a      	subs	r2, r3, #1
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d044      	beq.n	8004948 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d140      	bne.n	8004948 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fd20 	bl	8003310 <uxListRemove>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	491f      	ldr	r1, [pc, #124]	@ (8004958 <xTaskPriorityDisinherit+0x108>)
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTaskPriorityDisinherit+0xb2>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	4b18      	ldr	r3, [pc, #96]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4013      	ands	r3, r2
 80048fe:	4a17      	ldr	r2, [pc, #92]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 8004900:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	f1c3 0207 	rsb	r2, r3, #7
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	2201      	movs	r2, #1
 800491c:	409a      	lsls	r2, r3
 800491e:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a08      	ldr	r2, [pc, #32]	@ (8004958 <xTaskPriorityDisinherit+0x108>)
 8004936:	441a      	add	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fc89 	bl	8003256 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004948:	697b      	ldr	r3, [r7, #20]
	}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000310 	.word	0x20000310
 8004958:	20000314 	.word	0x20000314
 800495c:	20000418 	.word	0x20000418

08004960 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800496e:	2301      	movs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d079      	beq.n	8004a6c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d902      	bls.n	80049a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	e002      	b.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d059      	beq.n	8004a6c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d154      	bne.n	8004a6c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d10b      	bne.n	80049e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60bb      	str	r3, [r7, #8]
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	db04      	blt.n	8004a02 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f1c3 0207 	rsb	r2, r3, #7
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4a19      	ldr	r2, [pc, #100]	@ (8004a78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a12:	4413      	add	r3, r2
 8004a14:	4299      	cmp	r1, r3
 8004a16:	d129      	bne.n	8004a6c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fc77 	bl	8003310 <uxListRemove>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43da      	mvns	r2, r3
 8004a34:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	4a10      	ldr	r2, [pc, #64]	@ (8004a7c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a3c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a7c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4a06      	ldr	r2, [pc, #24]	@ (8004a78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a5e:	441a      	add	r2, r3
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f7fe fbf5 	bl	8003256 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a6c:	bf00      	nop
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000310 	.word	0x20000310
 8004a78:	20000314 	.word	0x20000314
 8004a7c:	20000418 	.word	0x20000418

08004a80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a84:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a92:	3201      	adds	r2, #1
 8004a94:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004a96:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a98:	681b      	ldr	r3, [r3, #0]
	}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	20000310 	.word	0x20000310

08004aa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ab2:	4b29      	ldr	r3, [pc, #164]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab8:	4b28      	ldr	r3, [pc, #160]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fc26 	bl	8003310 <uxListRemove>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004aca:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	4b21      	ldr	r3, [pc, #132]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4013      	ands	r3, r2
 8004ade:	4a20      	ldr	r2, [pc, #128]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ae0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d10a      	bne.n	8004b00 <prvAddCurrentTaskToDelayedList+0x58>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	481a      	ldr	r0, [pc, #104]	@ (8004b64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004afa:	f7fe fbac 	bl	8003256 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004afe:	e026      	b.n	8004b4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b08:	4b14      	ldr	r3, [pc, #80]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d209      	bcs.n	8004b2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fe fbba 	bl	800329e <vListInsert>
}
 8004b2a:	e010      	b.n	8004b4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fe fbb0 	bl	800329e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d202      	bcs.n	8004b4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b48:	4a09      	ldr	r2, [pc, #36]	@ (8004b70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6013      	str	r3, [r2, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000414 	.word	0x20000414
 8004b5c:	20000310 	.word	0x20000310
 8004b60:	20000418 	.word	0x20000418
 8004b64:	200003fc 	.word	0x200003fc
 8004b68:	200003cc 	.word	0x200003cc
 8004b6c:	200003c8 	.word	0x200003c8
 8004b70:	20000430 	.word	0x20000430

08004b74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3b04      	subs	r3, #4
 8004b84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b04      	subs	r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd8 <pxPortInitialiseStack+0x64>)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3b14      	subs	r3, #20
 8004bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3b04      	subs	r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f06f 0202 	mvn.w	r2, #2
 8004bc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3b20      	subs	r3, #32
 8004bc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	08004bdd 	.word	0x08004bdd

08004bdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004be6:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <prvTaskExitError+0x58>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d00b      	beq.n	8004c08 <prvTaskExitError+0x2c>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <prvTaskExitError+0x28>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60bb      	str	r3, [r7, #8]
}
 8004c1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c1c:	bf00      	nop
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0fc      	beq.n	8004c1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c
	...

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	4770      	bx	lr
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst2>:
 8004c60:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c68:	4808      	ldr	r0, [pc, #32]	@ (8004c8c <prvPortStartFirstTask+0x24>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8814 	msr	CONTROL, r0
 8004c7a:	b662      	cpsie	i
 8004c7c:	b661      	cpsie	f
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	df00      	svc	0
 8004c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed08 	.word	0xe000ed08

08004c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c96:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <xPortStartScheduler+0x124>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a47      	ldr	r2, [pc, #284]	@ (8004db8 <xPortStartScheduler+0x128>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10b      	bne.n	8004cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <xPortStartScheduler+0x124>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8004dbc <xPortStartScheduler+0x12c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10b      	bne.n	8004cda <xPortStartScheduler+0x4a>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	613b      	str	r3, [r7, #16]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cda:	4b39      	ldr	r3, [pc, #228]	@ (8004dc0 <xPortStartScheduler+0x130>)
 8004cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	22ff      	movs	r2, #255	@ 0xff
 8004cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <xPortStartScheduler+0x134>)
 8004d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d02:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d04:	2207      	movs	r2, #7
 8004d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d08:	e009      	b.n	8004d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d0ef      	beq.n	8004d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d2a:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1c3 0307 	rsb	r3, r3, #7
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d00b      	beq.n	8004d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60bb      	str	r3, [r7, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d60:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d84:	f000 f8da 	bl	8004f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <xPortStartScheduler+0x140>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d8e:	f000 f8f9 	bl	8004f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <xPortStartScheduler+0x144>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd4 <xPortStartScheduler+0x144>)
 8004d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d9e:	f7ff ff63 	bl	8004c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004da2:	f7ff fa7f 	bl	80042a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004da6:	f7ff ff19 	bl	8004bdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	e000ed00 	.word	0xe000ed00
 8004db8:	410fc271 	.word	0x410fc271
 8004dbc:	410fc270 	.word	0x410fc270
 8004dc0:	e000e400 	.word	0xe000e400
 8004dc4:	2000043c 	.word	0x2000043c
 8004dc8:	20000440 	.word	0x20000440
 8004dcc:	e000ed20 	.word	0xe000ed20
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	e000ef34 	.word	0xe000ef34

08004dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004df2:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <vPortEnterCritical+0x60>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	603b      	str	r3, [r7, #0]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <vPortEnterCritical+0x4a>
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e42:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <vPortExitCritical+0x26>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	607b      	str	r3, [r7, #4]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <vPortExitCritical+0x44>
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f01e 0f10 	tst.w	lr, #16
 8004ea0:	bf08      	it	eq
 8004ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004eb4:	f380 8811 	msr	BASEPRI, r0
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f7ff f9f0 	bl	80042a4 <vTaskSwitchContext>
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f380 8811 	msr	BASEPRI, r0
 8004ecc:	bc09      	pop	{r0, r3}
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed6:	f01e 0f10 	tst.w	lr, #16
 8004eda:	bf08      	it	eq
 8004edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ee0:	f380 8809 	msr	PSP, r0
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst>:
 8004ef0:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f12:	f7ff f90d 	bl	8004130 <xTaskIncrementTick>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <xPortSysTickHandler+0x40>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <vPortSetupTimerInterrupt+0x38>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <vPortSetupTimerInterrupt+0x3c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	@ (8004f7c <vPortSetupTimerInterrupt+0x40>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <vPortSetupTimerInterrupt+0x44>)
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f5e:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f60:	2207      	movs	r2, #7
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000e010 	.word	0xe000e010
 8004f74:	e000e018 	.word	0xe000e018
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	10624dd3 	.word	0x10624dd3
 8004f80:	e000e014 	.word	0xe000e014

08004f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f94 <vPortEnableVFP+0x10>
 8004f88:	6801      	ldr	r1, [r0, #0]
 8004f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f8e:	6001      	str	r1, [r0, #0]
 8004f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f92:	bf00      	nop
 8004f94:	e000ed88 	.word	0xe000ed88

08004f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	@ 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fa4:	f7ff f818 	bl	8003fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800511c <pvPortMalloc+0x184>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fb0:	f000 f924 	bl	80051fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8005120 <pvPortMalloc+0x188>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8095 	bne.w	80050ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fc8:	2208      	movs	r2, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <pvPortMalloc+0x6e>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	617b      	str	r3, [r7, #20]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d06f      	beq.n	80050ec <pvPortMalloc+0x154>
 800500c:	4b45      	ldr	r3, [pc, #276]	@ (8005124 <pvPortMalloc+0x18c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d86a      	bhi.n	80050ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005016:	4b44      	ldr	r3, [pc, #272]	@ (8005128 <pvPortMalloc+0x190>)
 8005018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800501a:	4b43      	ldr	r3, [pc, #268]	@ (8005128 <pvPortMalloc+0x190>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005020:	e004      	b.n	800502c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d903      	bls.n	800503e <pvPortMalloc+0xa6>
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f1      	bne.n	8005022 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800503e:	4b37      	ldr	r3, [pc, #220]	@ (800511c <pvPortMalloc+0x184>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	429a      	cmp	r2, r3
 8005046:	d051      	beq.n	80050ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2208      	movs	r2, #8
 800504e:	4413      	add	r3, r2
 8005050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	2308      	movs	r3, #8
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	429a      	cmp	r2, r3
 8005068:	d920      	bls.n	80050ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <pvPortMalloc+0xfc>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	613b      	str	r3, [r7, #16]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f000 f90a 	bl	80052c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <pvPortMalloc+0x18c>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005124 <pvPortMalloc+0x18c>)
 80050b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <pvPortMalloc+0x18c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <pvPortMalloc+0x194>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d203      	bcs.n	80050ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050c6:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <pvPortMalloc+0x18c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a18      	ldr	r2, [pc, #96]	@ (800512c <pvPortMalloc+0x194>)
 80050cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4b13      	ldr	r3, [pc, #76]	@ (8005120 <pvPortMalloc+0x188>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050e2:	4b13      	ldr	r3, [pc, #76]	@ (8005130 <pvPortMalloc+0x198>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <pvPortMalloc+0x198>)
 80050ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050ec:	f7fe ff82 	bl	8003ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <pvPortMalloc+0x17a>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60fb      	str	r3, [r7, #12]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <pvPortMalloc+0x176>
	return pvReturn;
 8005112:	69fb      	ldr	r3, [r7, #28]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	@ 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20001004 	.word	0x20001004
 8005120:	20001018 	.word	0x20001018
 8005124:	20001008 	.word	0x20001008
 8005128:	20000ffc 	.word	0x20000ffc
 800512c:	2000100c 	.word	0x2000100c
 8005130:	20001010 	.word	0x20001010

08005134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d04f      	beq.n	80051e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005146:	2308      	movs	r3, #8
 8005148:	425b      	negs	r3, r3
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	4b25      	ldr	r3, [pc, #148]	@ (80051f0 <vPortFree+0xbc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <vPortFree+0x46>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	60fb      	str	r3, [r7, #12]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <vPortFree+0x66>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	60bb      	str	r3, [r7, #8]
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4b14      	ldr	r3, [pc, #80]	@ (80051f0 <vPortFree+0xbc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01e      	beq.n	80051e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11a      	bne.n	80051e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4b0e      	ldr	r3, [pc, #56]	@ (80051f0 <vPortFree+0xbc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051c0:	f7fe ff0a 	bl	8003fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <vPortFree+0xc0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <vPortFree+0xc0>)
 80051d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051d2:	6938      	ldr	r0, [r7, #16]
 80051d4:	f000 f874 	bl	80052c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051d8:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <vPortFree+0xc4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	4a06      	ldr	r2, [pc, #24]	@ (80051f8 <vPortFree+0xc4>)
 80051e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051e2:	f7fe ff07 	bl	8003ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051e6:	bf00      	nop
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20001018 	.word	0x20001018
 80051f4:	20001008 	.word	0x20001008
 80051f8:	20001014 	.word	0x20001014

080051fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005202:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005206:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005208:	4b27      	ldr	r3, [pc, #156]	@ (80052a8 <prvHeapInit+0xac>)
 800520a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3307      	adds	r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0307 	bic.w	r3, r3, #7
 8005222:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4a1f      	ldr	r2, [pc, #124]	@ (80052a8 <prvHeapInit+0xac>)
 800522c:	4413      	add	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005234:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <prvHeapInit+0xb0>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800523a:	4b1c      	ldr	r3, [pc, #112]	@ (80052ac <prvHeapInit+0xb0>)
 800523c:	2200      	movs	r2, #0
 800523e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005248:	2208      	movs	r2, #8
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <prvHeapInit+0xb4>)
 800525c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800525e:	4b14      	ldr	r3, [pc, #80]	@ (80052b0 <prvHeapInit+0xb4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005266:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <prvHeapInit+0xb4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800527c:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <prvHeapInit+0xb4>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a0a      	ldr	r2, [pc, #40]	@ (80052b4 <prvHeapInit+0xb8>)
 800528a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <prvHeapInit+0xbc>)
 8005292:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005294:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <prvHeapInit+0xc0>)
 8005296:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800529a:	601a      	str	r2, [r3, #0]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	20000444 	.word	0x20000444
 80052ac:	20000ffc 	.word	0x20000ffc
 80052b0:	20001004 	.word	0x20001004
 80052b4:	2000100c 	.word	0x2000100c
 80052b8:	20001008 	.word	0x20001008
 80052bc:	20001018 	.word	0x20001018

080052c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052c8:	4b28      	ldr	r3, [pc, #160]	@ (800536c <prvInsertBlockIntoFreeList+0xac>)
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e002      	b.n	80052d4 <prvInsertBlockIntoFreeList+0x14>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d8f7      	bhi.n	80052ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	4413      	add	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d108      	bne.n	8005302 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	441a      	add	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d118      	bne.n	8005348 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b15      	ldr	r3, [pc, #84]	@ (8005370 <prvInsertBlockIntoFreeList+0xb0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d00d      	beq.n	800533e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e008      	b.n	8005350 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800533e:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <prvInsertBlockIntoFreeList+0xb0>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e003      	b.n	8005350 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d002      	beq.n	800535e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000ffc 	.word	0x20000ffc
 8005370:	20001004 	.word	0x20001004

08005374 <memset>:
 8005374:	4402      	add	r2, r0
 8005376:	4603      	mov	r3, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <__libc_init_array>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4d0d      	ldr	r5, [pc, #52]	@ (80053bc <__libc_init_array+0x38>)
 8005388:	4c0d      	ldr	r4, [pc, #52]	@ (80053c0 <__libc_init_array+0x3c>)
 800538a:	1b64      	subs	r4, r4, r5
 800538c:	10a4      	asrs	r4, r4, #2
 800538e:	2600      	movs	r6, #0
 8005390:	42a6      	cmp	r6, r4
 8005392:	d109      	bne.n	80053a8 <__libc_init_array+0x24>
 8005394:	4d0b      	ldr	r5, [pc, #44]	@ (80053c4 <__libc_init_array+0x40>)
 8005396:	4c0c      	ldr	r4, [pc, #48]	@ (80053c8 <__libc_init_array+0x44>)
 8005398:	f000 f826 	bl	80053e8 <_init>
 800539c:	1b64      	subs	r4, r4, r5
 800539e:	10a4      	asrs	r4, r4, #2
 80053a0:	2600      	movs	r6, #0
 80053a2:	42a6      	cmp	r6, r4
 80053a4:	d105      	bne.n	80053b2 <__libc_init_array+0x2e>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ac:	4798      	blx	r3
 80053ae:	3601      	adds	r6, #1
 80053b0:	e7ee      	b.n	8005390 <__libc_init_array+0xc>
 80053b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b6:	4798      	blx	r3
 80053b8:	3601      	adds	r6, #1
 80053ba:	e7f2      	b.n	80053a2 <__libc_init_array+0x1e>
 80053bc:	080054a0 	.word	0x080054a0
 80053c0:	080054a0 	.word	0x080054a0
 80053c4:	080054a0 	.word	0x080054a0
 80053c8:	080054a4 	.word	0x080054a4

080053cc <memcpy>:
 80053cc:	440a      	add	r2, r1
 80053ce:	4291      	cmp	r1, r2
 80053d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d4:	d100      	bne.n	80053d8 <memcpy+0xc>
 80053d6:	4770      	bx	lr
 80053d8:	b510      	push	{r4, lr}
 80053da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e2:	4291      	cmp	r1, r2
 80053e4:	d1f9      	bne.n	80053da <memcpy+0xe>
 80053e6:	bd10      	pop	{r4, pc}

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
