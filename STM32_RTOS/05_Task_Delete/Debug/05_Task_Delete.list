
05_Task_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004924  08004924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a38  08004a38  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a38  08004a38  00005a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a40  08004a40  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004a48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000010  08004a58  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08004a58  00006024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb5  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002521  00000000  00000000  00014ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00017518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a54  00000000  00000000  00018298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fc  00000000  00000000  00018cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f439  00000000  00000000  0003fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0016  00000000  00000000  0004f321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0013f37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001429c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800490c 	.word	0x0800490c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800490c 	.word	0x0800490c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <uart_msg>:

/* ---------- User Functions ---------- */

/* Function to send a string via UART2 */
void uart_msg(char *s)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    // Send string data to serial port
    HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 1000);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <uart_msg+0x28>)
 800055a:	f002 f93d 	bl	80027d8 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000280 	.word	0x20000280

0800056c <task1>:

/* Task 1: Blink LED periodically */
void task1(void *p)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    uart_msg("TASK-1 EXECUTING\r\n");  // Print start message
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <task1+0x24>)
 8000576:	f7ff ffe3 	bl	8000540 <uart_msg>

    while(1)   // Infinite loop
    {
        vTaskDelay(250);                        // Delay for 250 ticks
 800057a:	20fa      	movs	r0, #250	@ 0xfa
 800057c:	f003 f9e4 	bl	8003948 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED on pin PA5
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fd9f 	bl	80010c8 <HAL_GPIO_TogglePin>
        vTaskDelay(250);                        // Delay for 250 ticks
 800058a:	bf00      	nop
 800058c:	e7f5      	b.n	800057a <task1+0xe>
 800058e:	bf00      	nop
 8000590:	08004924 	.word	0x08004924

08000594 <task2>:
    }
}

/* Task 2: Monitor button and delete itself when pressed */
void task2(void *p)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    uart_msg("TASK-2 EXECUTING\r\n");  // Print start message
 800059c:	4810      	ldr	r0, [pc, #64]	@ (80005e0 <task2+0x4c>)
 800059e:	f7ff ffcf 	bl	8000540 <uart_msg>

    while(1)   // Infinite loop
    {
        // Read button state (connected to PC13)
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // Button not pressed (logic HIGH)
 80005a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a6:	480f      	ldr	r0, [pc, #60]	@ (80005e4 <task2+0x50>)
 80005a8:	f000 fd76 	bl	8001098 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d009      	beq.n	80005c6 <task2+0x32>
        {
            HAL_Delay(1000);                       // Delay 1 second (blocking delay)
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 fabb 	bl	8000b30 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 80005ba:	2120      	movs	r1, #32
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fd82 	bl	80010c8 <HAL_GPIO_TogglePin>
 80005c4:	e7ed      	b.n	80005a2 <task2+0xe>
        }
        else // Button pressed (logic LOW)
        {
            uart_msg("BUTTON press detected!\r\n");
 80005c6:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <task2+0x54>)
 80005c8:	f7ff ffba 	bl	8000540 <uart_msg>
            uart_msg("TASK-2 going to be deleted\r\n");
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <task2+0x58>)
 80005ce:	f7ff ffb7 	bl	8000540 <uart_msg>

            vTaskDelete(NULL);  // Delete this task itself
 80005d2:	2000      	movs	r0, #0
 80005d4:	f003 f928 	bl	8003828 <vTaskDelete>

            // Below line will never execute (task already deleted)
            uart_msg("TASK-2 DELETED\r\n");
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <task2+0x5c>)
 80005da:	f7ff ffb1 	bl	8000540 <uart_msg>
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // Button not pressed (logic HIGH)
 80005de:	e7e0      	b.n	80005a2 <task2+0xe>
 80005e0:	08004938 	.word	0x08004938
 80005e4:	48000800 	.word	0x48000800
 80005e8:	0800494c 	.word	0x0800494c
 80005ec:	08004968 	.word	0x08004968
 80005f0:	08004988 	.word	0x08004988

080005f4 <main>:
    }
}

/* ---------- Main Function ---------- */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af02      	add	r7, sp, #8
    HAL_Init();              // Initialize HAL library
 80005fa:	f000 fa1d 	bl	8000a38 <HAL_Init>
    SystemClock_Config();    // Configure system clock
 80005fe:	f000 f843 	bl	8000688 <SystemClock_Config>
    MX_GPIO_Init();          // Initialize GPIO pins
 8000602:	f000 f8c3 	bl	800078c <MX_GPIO_Init>
    MX_USART2_UART_Init();   // Initialize UART2
 8000606:	f000 f891 	bl	800072c <MX_USART2_UART_Init>

    uart_msg("TASK DELETE DEMO\r\n");  // Print demo start message
 800060a:	4816      	ldr	r0, [pc, #88]	@ (8000664 <main+0x70>)
 800060c:	f7ff ff98 	bl	8000540 <uart_msg>

    // Create FreeRTOS tasks
    xTaskCreate(task1, "TASK1", 128, NULL, 1, &xTaskHandle1);  // Create Task 1
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <main+0x74>)
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	4913      	ldr	r1, [pc, #76]	@ (800066c <main+0x78>)
 800061e:	4814      	ldr	r0, [pc, #80]	@ (8000670 <main+0x7c>)
 8000620:	f002 ffca 	bl	80035b8 <xTaskCreate>
    xTaskCreate(task2, "TASK2", 256, NULL, 2, &xTaskHandle2);  // Create Task 2
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <main+0x80>)
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2302      	movs	r3, #2
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000632:	4911      	ldr	r1, [pc, #68]	@ (8000678 <main+0x84>)
 8000634:	4811      	ldr	r0, [pc, #68]	@ (800067c <main+0x88>)
 8000636:	f002 ffbf 	bl	80035b8 <xTaskCreate>

    // Create default task (CubeMX auto-generated)
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <main+0x8c>)
 800063c:	1d3c      	adds	r4, r7, #4
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fe3d 	bl	80032d0 <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <main+0x90>)
 800065a:	6013      	str	r3, [r2, #0]

    osKernelStart();   // Start FreeRTOS scheduler (never returns)
 800065c:	f002 fe31 	bl	80032c2 <osKernelStart>

    // Should never reach here
    while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x6c>
 8000664:	0800499c 	.word	0x0800499c
 8000668:	2000030c 	.word	0x2000030c
 800066c:	080049b0 	.word	0x080049b0
 8000670:	0800056d 	.word	0x0800056d
 8000674:	20000310 	.word	0x20000310
 8000678:	080049b8 	.word	0x080049b8
 800067c:	08000595 	.word	0x08000595
 8000680:	080049cc 	.word	0x080049cc
 8000684:	20000308 	.word	0x20000308

08000688 <SystemClock_Config>:
    }
}

/* ---------- System Clock Configuration ---------- */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};  // Clock settings structure
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	@ 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f90c 	bl	80048b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};  // Bus clock settings
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

    // Configure voltage regulator
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f000 fd33 	bl	8001118 <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
        Error_Handler();
 80006b8:	f000 f8d0 	bl	800085c <Error_Handler>

    // Configure HSI (High Speed Internal) oscillator and PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c4:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2310      	movs	r3, #16
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 80006d6:	230a      	movs	r3, #10
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fd6a 	bl	80011c4 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x72>
        Error_Handler();
 80006f6:	f000 f8b1 	bl	800085c <Error_Handler>

    // Configure bus clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	2104      	movs	r1, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f932 	bl	800197c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9a>
        Error_Handler();
 800071e:	f000 f89d 	bl	800085c <Error_Handler>
}
 8000722:	bf00      	nop
 8000724:	3758      	adds	r7, #88	@ 0x58
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_USART2_UART_Init>:

/* ---------- UART2 Initialization ---------- */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;                          // Use USART2
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_USART2_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;                     // Baud rate
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;       // 8-bit data
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;            // 1 stop bit
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;             // No parity
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;                // Enable TX and RX
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;       // No hardware flow control
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;   // Oversampling
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_UART_Init(&huart2) != HAL_OK)              // Initialize UART
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000770:	f001 ffe4 	bl	800273c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x52>
        Error_Handler();
 800077a:	f000 f86f 	bl	800085c <Error_Handler>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000280 	.word	0x20000280
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:

/* ---------- GPIO Initialization ---------- */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Structure for GPIO config
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();   // Enable clock for GPIOC
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a27      	ldr	r2, [pc, #156]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();   // Enable clock for GPIOH
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();   // Enable clock for GPIOA
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();   // Enable clock for GPIOB
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_GPIO_Init+0xb8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

    // Configure LED pin (PA5) as output
    GPIO_InitStruct.Pin = LD2_Pin;
 8000802:	2320      	movs	r3, #32
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081c:	f000 fa92 	bl	8000d44 <HAL_GPIO_Init>

    // Configure button pin (PC13) as input with falling edge interrupt
    GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0xbc>)
 8000838:	f000 fa84 	bl	8000d44 <HAL_GPIO_Init>
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	48000800 	.word	0x48000800

0800084c <StartDefaultTask>:

/* ---------- Default RTOS Task ---------- */
void StartDefaultTask(void const * argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    while(1)
    {
        osDelay(1);   // Small delay
 8000854:	2001      	movs	r0, #1
 8000856:	f002 fd87 	bl	8003368 <osDelay>
 800085a:	e7fb      	b.n	8000854 <StartDefaultTask+0x8>

0800085c <Error_Handler>:
    }
}

/* ---------- Error Handler ---------- */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
    __disable_irq();   // Disable all interrupts
    while (1) {}       // Stay here forever
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	@ 0x60
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_MspInit+0x4c>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	@ 0x58
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fa24 	bl	8000cf2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0ac      	sub	sp, #176	@ 0xb0
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2288      	movs	r2, #136	@ 0x88
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 ffeb 	bl	80048b4 <memset>
  if(huart->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <HAL_UART_MspInit+0xb0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d13b      	bne.n	8000960 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fa65 	bl	8001dc4 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000900:	f7ff ffac 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_UART_MspInit+0xb4>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000908:	4a18      	ldr	r2, [pc, #96]	@ (800096c <HAL_UART_MspInit+0xb4>)
 800090a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <HAL_UART_MspInit+0xb4>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <HAL_UART_MspInit+0xb4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000920:	4a12      	ldr	r2, [pc, #72]	@ (800096c <HAL_UART_MspInit+0xb4>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000928:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_UART_MspInit+0xb4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000934:	230c      	movs	r3, #12
 8000936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094c:	2307      	movs	r3, #7
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f000 f9f2 	bl	8000d44 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000960:	bf00      	nop
 8000962:	37b0      	adds	r7, #176	@ 0xb0
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f8a1 	bl	8000af0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ae:	f003 fafb 	bl	8003fa8 <xTaskGetSchedulerState>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d001      	beq.n	80009bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009b8:	f003 fd3e 	bl	8004438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f003 ff57 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fded 	bl	80005f4 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a28:	08004a48 	.word	0x08004a48
  ldr r2, =_sbss
 8000a2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a30:	20001024 	.word	0x20001024

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_Init+0x3c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <HAL_Init+0x3c>)
 8000a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f000 f944 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a54:	200f      	movs	r0, #15
 8000a56:	f000 f80f 	bl	8000a78 <HAL_InitTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	e001      	b.n	8000a6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a66:	f7ff feff 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d023      	beq.n	8000ad4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <HAL_InitTick+0x70>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_InitTick+0x6c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f941 	bl	8000d2a <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10f      	bne.n	8000ace <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d809      	bhi.n	8000ac8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 f919 	bl	8000cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_InitTick+0x74>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e007      	b.n	8000ad8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e004      	b.n	8000ad8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	e001      	b.n	8000ad8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000314 	.word	0x20000314

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	@ (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000314 	.word	0x20000314

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	@ (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	@ (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	@ 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff47 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5c 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e17f      	b.n	8001054 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8171 	beq.w	800104e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 0201 	and.w	r2, r3, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d118      	bne.n	8000e24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	6939      	ldr	r1, [r7, #16]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80ac 	beq.w	800104e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	4a5e      	ldr	r2, [pc, #376]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f02:	4b5c      	ldr	r3, [pc, #368]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x242>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <HAL_GPIO_Init+0x338>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x23e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	@ (8001080 <HAL_GPIO_Init+0x33c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x23a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <HAL_GPIO_Init+0x340>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x236>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x344>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x232>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <HAL_GPIO_Init+0x348>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x22e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_GPIO_Init+0x34c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x22a>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f6e:	2307      	movs	r3, #7
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f86:	2300      	movs	r3, #0
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f98:	4937      	ldr	r1, [pc, #220]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fca:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800101e:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_GPIO_Init+0x350>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_GPIO_Init+0x350>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f ae78 	bne.w	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	48001000 	.word	0x48001000
 800108c:	48001400 	.word	0x48001400
 8001090:	48001800 	.word	0x48001800
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e001      	b.n	80010ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4013      	ands	r3, r2
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43d9      	mvns	r1, r3
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	400b      	ands	r3, r1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <HAL_PWREx_GetVoltageRange+0x18>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40007000 	.word	0x40007000

08001118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001126:	d130      	bne.n	800118a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001134:	d038      	beq.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800113e:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001144:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2232      	movs	r2, #50	@ 0x32
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9b      	lsrs	r3, r3, #18
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115c:	e002      	b.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3b01      	subs	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800116c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001170:	d102      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f2      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001184:	d110      	bne.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e00f      	b.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001196:	d007      	beq.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40007000 	.word	0x40007000
 80011bc:	20000000 	.word	0x20000000
 80011c0:	431bde83 	.word	0x431bde83

080011c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e3ca      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d6:	4b97      	ldr	r3, [pc, #604]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e0:	4b94      	ldr	r3, [pc, #592]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80e4 	beq.w	80013c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_RCC_OscConfig+0x4a>
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	f040 808b 	bne.w	800131c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2b01      	cmp	r3, #1
 800120a:	f040 8087 	bne.w	800131c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120e:	4b89      	ldr	r3, [pc, #548]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x62>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e3a2      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1a      	ldr	r2, [r3, #32]
 800122a:	4b82      	ldr	r3, [pc, #520]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_RCC_OscConfig+0x7c>
 8001236:	4b7f      	ldr	r3, [pc, #508]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800123e:	e005      	b.n	800124c <HAL_RCC_OscConfig+0x88>
 8001240:	4b7c      	ldr	r3, [pc, #496]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800124c:	4293      	cmp	r3, r2
 800124e:	d223      	bcs.n	8001298 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fd55 	bl	8001d04 <RCC_SetFlashLatencyFromMSIRange>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e383      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001264:	4b73      	ldr	r3, [pc, #460]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a72      	ldr	r2, [pc, #456]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b70      	ldr	r3, [pc, #448]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	496d      	ldr	r1, [pc, #436]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001282:	4b6c      	ldr	r3, [pc, #432]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	4968      	ldr	r1, [pc, #416]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
 8001296:	e025      	b.n	80012e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001298:	4b66      	ldr	r3, [pc, #408]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a65      	ldr	r2, [pc, #404]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4960      	ldr	r1, [pc, #384]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	495b      	ldr	r1, [pc, #364]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd15 	bl	8001d04 <RCC_SetFlashLatencyFromMSIRange>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e343      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012e4:	f000 fc4a 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	4950      	ldr	r1, [pc, #320]	@ (8001438 <HAL_RCC_OscConfig+0x274>)
 80012f6:	5ccb      	ldrb	r3, [r1, r3]
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_RCC_OscConfig+0x278>)
 8001302:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001304:	4b4e      	ldr	r3, [pc, #312]	@ (8001440 <HAL_RCC_OscConfig+0x27c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fbb5 	bl	8000a78 <HAL_InitTick>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d052      	beq.n	80013be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	e327      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d032      	beq.n	800138a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001324:	4b43      	ldr	r3, [pc, #268]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a42      	ldr	r2, [pc, #264]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001330:	f7ff fbf2 	bl	8000b18 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001338:	f7ff fbee 	bl	8000b18 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e310      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001356:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a36      	ldr	r2, [pc, #216]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4931      	ldr	r1, [pc, #196]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	492c      	ldr	r1, [pc, #176]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
 8001388:	e01a      	b.n	80013c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001396:	f7ff fbbf 	bl	8000b18 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139e:	f7ff fbbb 	bl	8000b18 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e2dd      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x1da>
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d074      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x21a>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d10e      	bne.n	80013f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d064      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d160      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e2ba      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x24a>
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e026      	b.n	800145c <HAL_RCC_OscConfig+0x298>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001416:	d115      	bne.n	8001444 <HAL_RCC_OscConfig+0x280>
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800141e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a02      	ldr	r2, [pc, #8]	@ (8001434 <HAL_RCC_OscConfig+0x270>)
 800142a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x298>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	080049f0 	.word	0x080049f0
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004
 8001444:	4ba0      	ldr	r3, [pc, #640]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a9f      	ldr	r2, [pc, #636]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b9d      	ldr	r3, [pc, #628]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a9c      	ldr	r2, [pc, #624]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fb58 	bl	8000b18 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fb54 	bl	8000b18 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e276      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147e:	4b92      	ldr	r3, [pc, #584]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x2a8>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fb44 	bl	8000b18 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fb40 	bl	8000b18 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	@ 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e262      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a6:	4b88      	ldr	r3, [pc, #544]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x2d0>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d060      	beq.n	8001584 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_OscConfig+0x310>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d119      	bne.n	8001502 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d116      	bne.n	8001502 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d4:	4b7c      	ldr	r3, [pc, #496]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x328>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e23f      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b76      	ldr	r3, [pc, #472]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	4973      	ldr	r1, [pc, #460]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001500:	e040      	b.n	8001584 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d023      	beq.n	8001552 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150a:	4b6f      	ldr	r3, [pc, #444]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6e      	ldr	r2, [pc, #440]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff faff 	bl	8000b18 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fafb 	bl	8000b18 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e21d      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001530:	4b65      	ldr	r3, [pc, #404]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b62      	ldr	r3, [pc, #392]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	495f      	ldr	r1, [pc, #380]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	e018      	b.n	8001584 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001552:	4b5d      	ldr	r3, [pc, #372]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a5c      	ldr	r2, [pc, #368]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800155c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fadb 	bl	8000b18 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fad7 	bl	8000b18 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1f9      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001578:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03c      	beq.n	800160a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001598:	4b4b      	ldr	r3, [pc, #300]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800159a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159e:	4a4a      	ldr	r2, [pc, #296]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fab6 	bl	8000b18 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fab2 	bl	8000b18 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1d4      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c2:	4b41      	ldr	r3, [pc, #260]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80015c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ef      	beq.n	80015b0 <HAL_RCC_OscConfig+0x3ec>
 80015d0:	e01b      	b.n	800160a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d8:	4a3b      	ldr	r2, [pc, #236]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff fa99 	bl	8000b18 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fa95 	bl	8000b18 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1b7      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fc:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ef      	bne.n	80015ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80a6 	beq.w	8001764 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800161c:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10d      	bne.n	8001644 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	4a26      	ldr	r2, [pc, #152]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800162e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001632:	6593      	str	r3, [r2, #88]	@ 0x58
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001640:	2301      	movs	r3, #1
 8001642:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <HAL_RCC_OscConfig+0x508>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d118      	bne.n	8001682 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001650:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_RCC_OscConfig+0x508>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1d      	ldr	r2, [pc, #116]	@ (80016cc <HAL_RCC_OscConfig+0x508>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa5c 	bl	8000b18 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001664:	f7ff fa58 	bl	8000b18 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e17a      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_RCC_OscConfig+0x508>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_RCC_OscConfig+0x4d8>
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800169a:	e029      	b.n	80016f0 <HAL_RCC_OscConfig+0x52c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d115      	bne.n	80016d0 <HAL_RCC_OscConfig+0x50c>
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016aa:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ba:	4a03      	ldr	r2, [pc, #12]	@ (80016c8 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x52c>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40007000 	.word	0x40007000
 80016d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	4a9b      	ldr	r2, [pc, #620]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e0:	4b98      	ldr	r3, [pc, #608]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a97      	ldr	r2, [pc, #604]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d016      	beq.n	8001726 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fa0e 	bl	8000b18 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff fa0a 	bl	8000b18 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e12a      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001716:	4b8b      	ldr	r3, [pc, #556]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0ed      	beq.n	8001700 <HAL_RCC_OscConfig+0x53c>
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff f9f7 	bl	8000b18 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f9f3 	bl	8000b18 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e113      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001744:	4b7f      	ldr	r3, [pc, #508]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ed      	bne.n	800172e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001752:	7ffb      	ldrb	r3, [r7, #31]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b7a      	ldr	r3, [pc, #488]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	4a79      	ldr	r2, [pc, #484]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001762:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80fe 	beq.w	800196a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001772:	2b02      	cmp	r3, #2
 8001774:	f040 80d0 	bne.w	8001918 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001778:	4b72      	ldr	r3, [pc, #456]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	429a      	cmp	r2, r3
 800178a:	d130      	bne.n	80017ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	3b01      	subs	r3, #1
 8001798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d127      	bne.n	80017ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d11f      	bne.n	80017ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017b8:	2a07      	cmp	r2, #7
 80017ba:	bf14      	ite	ne
 80017bc:	2201      	movne	r2, #1
 80017be:	2200      	moveq	r2, #0
 80017c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d113      	bne.n	80017ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	3b01      	subs	r3, #1
 80017d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d06e      	beq.n	80018cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d069      	beq.n	80018c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001800:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0ad      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001810:	4b4c      	ldr	r3, [pc, #304]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a4b      	ldr	r2, [pc, #300]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800181c:	f7ff f97c 	bl	8000b18 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f978 	bl	8000b18 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e09a      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001836:	4b43      	ldr	r3, [pc, #268]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001842:	4b40      	ldr	r3, [pc, #256]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	4b40      	ldr	r3, [pc, #256]	@ (8001948 <HAL_RCC_OscConfig+0x784>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001852:	3a01      	subs	r2, #1
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800185c:	0212      	lsls	r2, r2, #8
 800185e:	4311      	orrs	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001864:	0852      	lsrs	r2, r2, #1
 8001866:	3a01      	subs	r2, #1
 8001868:	0552      	lsls	r2, r2, #21
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001870:	0852      	lsrs	r2, r2, #1
 8001872:	3a01      	subs	r2, #1
 8001874:	0652      	lsls	r2, r2, #25
 8001876:	4311      	orrs	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800187c:	0912      	lsrs	r2, r2, #4
 800187e:	0452      	lsls	r2, r2, #17
 8001880:	430a      	orrs	r2, r1
 8001882:	4930      	ldr	r1, [pc, #192]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001884:	4313      	orrs	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001888:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2d      	ldr	r2, [pc, #180]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a2a      	ldr	r2, [pc, #168]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a0:	f7ff f93a 	bl	8000b18 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f936 	bl	8000b18 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e058      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c6:	e050      	b.n	800196a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e04f      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d148      	bne.n	800196a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a16      	ldr	r2, [pc, #88]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018f0:	f7ff f912 	bl	8000b18 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f90e 	bl	8000b18 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e030      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x734>
 8001916:	e028      	b.n	800196a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d023      	beq.n	8001966 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_RCC_OscConfig+0x780>)
 8001924:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f8f5 	bl	8000b18 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	e00c      	b.n	800194c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f8f1 	bl	8000b18 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d905      	bls.n	800194c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e013      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
 8001944:	40021000 	.word	0x40021000
 8001948:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x7b0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ec      	bne.n	8001932 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_RCC_OscConfig+0x7b0>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4905      	ldr	r1, [pc, #20]	@ (8001974 <HAL_RCC_OscConfig+0x7b0>)
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_RCC_OscConfig+0x7b4>)
 8001960:	4013      	ands	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
 8001964:	e001      	b.n	800196a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	feeefffc 	.word	0xfeeefffc

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0e7      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b75      	ldr	r3, [pc, #468]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d910      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b72      	ldr	r3, [pc, #456]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0207 	bic.w	r2, r3, #7
 80019a6:	4970      	ldr	r1, [pc, #448]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cf      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b66      	ldr	r3, [pc, #408]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d8:	429a      	cmp	r2, r3
 80019da:	d908      	bls.n	80019ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4960      	ldr	r1, [pc, #384]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d04c      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b5a      	ldr	r3, [pc, #360]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d121      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0a6      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1a:	4b54      	ldr	r3, [pc, #336]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e09a      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a32:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e08e      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e086      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4943      	ldr	r1, [pc, #268]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a64:	f7ff f858 	bl	8000b18 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff f854 	bl	8000b18 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e06e      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d208      	bcs.n	8001ac2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	492b      	ldr	r1, [pc, #172]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac2:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d210      	bcs.n	8001af2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad0:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 0207 	bic.w	r2, r3, #7
 8001ad8:	4923      	ldr	r1, [pc, #140]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e036      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4910      	ldr	r1, [pc, #64]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b30:	f000 f824 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	490b      	ldr	r1, [pc, #44]	@ (8001b70 <HAL_RCC_ClockConfig+0x1f4>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_ClockConfig+0x1fc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe ff8f 	bl	8000a78 <HAL_InitTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	080049f0 	.word	0x080049f0
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b94:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11e      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bb0:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e005      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	e004      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c00:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d134      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d003      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0xac>
 8001c20:	e005      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c24:	617b      	str	r3, [r7, #20]
      break;
 8001c26:	e005      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c2a:	617b      	str	r3, [r7, #20]
      break;
 8001c2c:	e002      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	617b      	str	r3, [r7, #20]
      break;
 8001c32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	3301      	adds	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	fb03 f202 	mul.w	r2, r3, r2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	0e5b      	lsrs	r3, r3, #25
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	3301      	adds	r3, #1
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c74:	69bb      	ldr	r3, [r7, #24]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08004a08 	.word	0x08004a08
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4904      	ldr	r1, [pc, #16]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08004a00 	.word	0x08004a00

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cdc:	f7ff ffda 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0adb      	lsrs	r3, r3, #11
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4904      	ldr	r1, [pc, #16]	@ (8001d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08004a00 	.word	0x08004a00

08001d04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d1c:	f7ff f9ee 	bl	80010fc <HAL_PWREx_GetVoltageRange>
 8001d20:	6178      	str	r0, [r7, #20]
 8001d22:	e014      	b.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a24      	ldr	r2, [pc, #144]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d3c:	f7ff f9de 	bl	80010fc <HAL_PWREx_GetVoltageRange>
 8001d40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d54:	d10b      	bne.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b80      	cmp	r3, #128	@ 0x80
 8001d5a:	d919      	bls.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d60:	d902      	bls.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d62:	2302      	movs	r3, #2
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	e013      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	e010      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b80      	cmp	r3, #128	@ 0x80
 8001d72:	d902      	bls.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d74:	2303      	movs	r3, #3
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e00a      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b80      	cmp	r3, #128	@ 0x80
 8001d7e:	d102      	bne.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	e004      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b70      	cmp	r3, #112	@ 0x70
 8001d8a:	d101      	bne.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 0207 	bic.w	r2, r3, #7
 8001d98:	4909      	ldr	r1, [pc, #36]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d041      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001de4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001de8:	d02a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dee:	d824      	bhi.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001df0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001df4:	d008      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001df6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dfa:	d81e      	bhi.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e04:	d010      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e06:	e018      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e08:	4b86      	ldr	r3, [pc, #536]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a85      	ldr	r2, [pc, #532]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e14:	e015      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fabb 	bl	8002398 <RCCEx_PLLSAI1_Config>
 8001e22:	4603      	mov	r3, r0
 8001e24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e26:	e00c      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fba6 	bl	8002580 <RCCEx_PLLSAI2_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e38:	e003      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e3e:	e000      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e48:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e56:	4973      	ldr	r1, [pc, #460]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e5e:	e001      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d041      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e78:	d02a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e7e:	d824      	bhi.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e84:	d008      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e8a:	d81e      	bhi.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e96:	e018      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e98:	4b62      	ldr	r3, [pc, #392]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a61      	ldr	r2, [pc, #388]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fa73 	bl	8002398 <RCCEx_PLLSAI1_Config>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb6:	e00c      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3320      	adds	r3, #32
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fb5e 	bl	8002580 <RCCEx_PLLSAI2_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec8:	e003      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ece:	e000      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ed8:	4b52      	ldr	r3, [pc, #328]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ee6:	494f      	ldr	r1, [pc, #316]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eee:	e001      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a0 	beq.w	8002042 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f06:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00d      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f28:	4b3e      	ldr	r3, [pc, #248]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f44:	f7fe fde8 	bl	8000b18 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f4a:	e009      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4c:	f7fe fde4 	bl	8000b18 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d902      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f5e:	e005      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f60:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ef      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d15c      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f72:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01f      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d019      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f9c:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	4a20      	ldr	r2, [pc, #128]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7fe fda3 	bl	8000b18 <HAL_GetTick>
 8001fd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	e00b      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fd9f 	bl	8000b18 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d902      	bls.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	74fb      	strb	r3, [r7, #19]
            break;
 8001fec:	e006      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ec      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002012:	4904      	ldr	r1, [pc, #16]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800201a:	e009      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	74bb      	strb	r3, [r7, #18]
 8002020:	e006      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002030:	7c7b      	ldrb	r3, [r7, #17]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002036:	4b9e      	ldr	r3, [pc, #632]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	4a9d      	ldr	r2, [pc, #628]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800204e:	4b98      	ldr	r3, [pc, #608]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002054:	f023 0203 	bic.w	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205c:	4994      	ldr	r1, [pc, #592]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002070:	4b8f      	ldr	r3, [pc, #572]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	f023 020c 	bic.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207e:	498c      	ldr	r1, [pc, #560]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002092:	4b87      	ldr	r3, [pc, #540]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002098:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	4983      	ldr	r1, [pc, #524]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020b4:	4b7e      	ldr	r3, [pc, #504]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	497b      	ldr	r1, [pc, #492]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020d6:	4b76      	ldr	r3, [pc, #472]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e4:	4972      	ldr	r1, [pc, #456]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f8:	4b6d      	ldr	r3, [pc, #436]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	496a      	ldr	r1, [pc, #424]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800211a:	4b65      	ldr	r3, [pc, #404]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002120:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002128:	4961      	ldr	r1, [pc, #388]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800213c:	4b5c      	ldr	r3, [pc, #368]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214a:	4959      	ldr	r1, [pc, #356]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800215e:	4b54      	ldr	r3, [pc, #336]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002164:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216c:	4950      	ldr	r1, [pc, #320]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002180:	4b4b      	ldr	r3, [pc, #300]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218e:	4948      	ldr	r1, [pc, #288]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021a2:	4b43      	ldr	r3, [pc, #268]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	493f      	ldr	r1, [pc, #252]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d028      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021c4:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d2:	4937      	ldr	r1, [pc, #220]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e4:	4b32      	ldr	r3, [pc, #200]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a31      	ldr	r2, [pc, #196]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ee:	60d3      	str	r3, [r2, #12]
 80021f0:	e011      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021fa:	d10c      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f8c8 	bl	8002398 <RCCEx_PLLSAI1_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d028      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002222:	4b23      	ldr	r3, [pc, #140]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002228:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	491f      	ldr	r1, [pc, #124]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002240:	d106      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a1a      	ldr	r2, [pc, #104]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800224c:	60d3      	str	r3, [r2, #12]
 800224e:	e011      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002258:	d10c      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f899 	bl	8002398 <RCCEx_PLLSAI1_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d02b      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800229e:	d109      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a02      	ldr	r2, [pc, #8]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
 80022ac:	e014      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2101      	movs	r1, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f867 	bl	8002398 <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02f      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022f2:	4928      	ldr	r1, [pc, #160]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002302:	d10d      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2102      	movs	r1, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f844 	bl	8002398 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d014      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	74bb      	strb	r3, [r7, #18]
 800231e:	e011      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002328:	d10c      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3320      	adds	r3, #32
 800232e:	2102      	movs	r1, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f925 	bl	8002580 <RCCEx_PLLSAI2_Config>
 8002336:	4603      	mov	r3, r0
 8002338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800235e:	490d      	ldr	r1, [pc, #52]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002378:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002382:	4904      	ldr	r1, [pc, #16]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800238a:	7cbb      	ldrb	r3, [r7, #18]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023a6:	4b75      	ldr	r3, [pc, #468]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d018      	beq.n	80023e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023b2:	4b72      	ldr	r3, [pc, #456]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0203 	and.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d10d      	bne.n	80023de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
       ||
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ca:	4b6c      	ldr	r3, [pc, #432]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
       ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d047      	beq.n	800246e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e044      	b.n	800246e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d018      	beq.n	800241e <RCCEx_PLLSAI1_Config+0x86>
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d825      	bhi.n	800243c <RCCEx_PLLSAI1_Config+0xa4>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d002      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x62>
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d009      	beq.n	800240c <RCCEx_PLLSAI1_Config+0x74>
 80023f8:	e020      	b.n	800243c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023fa:	4b60      	ldr	r3, [pc, #384]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240a:	e01a      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800240c:	4b5b      	ldr	r3, [pc, #364]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d116      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241c:	e013      	b.n	8002446 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800241e:	4b57      	ldr	r3, [pc, #348]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800243a:	e006      	b.n	800244a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e004      	b.n	800244c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002442:	bf00      	nop
 8002444:	e002      	b.n	800244c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800244a:	bf00      	nop
    }

    if(status == HAL_OK)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10d      	bne.n	800246e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002452:	4b4a      	ldr	r3, [pc, #296]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	430b      	orrs	r3, r1
 8002468:	4944      	ldr	r1, [pc, #272]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d17d      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002474:	4b41      	ldr	r3, [pc, #260]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a40      	ldr	r2, [pc, #256]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800247e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fb4a 	bl	8000b18 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002486:	e009      	b.n	800249c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002488:	f7fe fb46 	bl	8000b18 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d902      	bls.n	800249c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	73fb      	strb	r3, [r7, #15]
        break;
 800249a:	e005      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800249c:	4b37      	ldr	r3, [pc, #220]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ef      	bne.n	8002488 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d160      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b4:	4b31      	ldr	r3, [pc, #196]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6892      	ldr	r2, [r2, #8]
 80024c4:	0211      	lsls	r1, r2, #8
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68d2      	ldr	r2, [r2, #12]
 80024ca:	0912      	lsrs	r2, r2, #4
 80024cc:	0452      	lsls	r2, r2, #17
 80024ce:	430a      	orrs	r2, r1
 80024d0:	492a      	ldr	r1, [pc, #168]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
 80024d6:	e027      	b.n	8002528 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d112      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024de:	4b27      	ldr	r3, [pc, #156]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	0211      	lsls	r1, r2, #8
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6912      	ldr	r2, [r2, #16]
 80024f4:	0852      	lsrs	r2, r2, #1
 80024f6:	3a01      	subs	r2, #1
 80024f8:	0552      	lsls	r2, r2, #21
 80024fa:	430a      	orrs	r2, r1
 80024fc:	491f      	ldr	r1, [pc, #124]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	610b      	str	r3, [r1, #16]
 8002502:	e011      	b.n	8002528 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800250c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6892      	ldr	r2, [r2, #8]
 8002514:	0211      	lsls	r1, r2, #8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6952      	ldr	r2, [r2, #20]
 800251a:	0852      	lsrs	r2, r2, #1
 800251c:	3a01      	subs	r2, #1
 800251e:	0652      	lsls	r2, r2, #25
 8002520:	430a      	orrs	r2, r1
 8002522:	4916      	ldr	r1, [pc, #88]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a13      	ldr	r2, [pc, #76]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe faf0 	bl	8000b18 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800253a:	e009      	b.n	8002550 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800253c:	f7fe faec 	bl	8000b18 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d902      	bls.n	8002550 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	73fb      	strb	r3, [r7, #15]
          break;
 800254e:	e005      	b.n	800255c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4904      	ldr	r1, [pc, #16]	@ (800257c <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000

08002580 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800258e:	4b6a      	ldr	r3, [pc, #424]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d018      	beq.n	80025cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800259a:	4b67      	ldr	r3, [pc, #412]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d10d      	bne.n	80025c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
       ||
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025b2:	4b61      	ldr	r3, [pc, #388]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
       ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d047      	beq.n	8002656 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e044      	b.n	8002656 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d018      	beq.n	8002606 <RCCEx_PLLSAI2_Config+0x86>
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d825      	bhi.n	8002624 <RCCEx_PLLSAI2_Config+0xa4>
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d002      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0x62>
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d009      	beq.n	80025f4 <RCCEx_PLLSAI2_Config+0x74>
 80025e0:	e020      	b.n	8002624 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e2:	4b55      	ldr	r3, [pc, #340]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f2:	e01a      	b.n	800262a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f4:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e013      	b.n	800262e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002606:	4b4c      	ldr	r3, [pc, #304]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002612:	4b49      	ldr	r3, [pc, #292]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002622:	e006      	b.n	8002632 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e004      	b.n	8002634 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002632:	bf00      	nop
    }

    if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800263a:	4b3f      	ldr	r3, [pc, #252]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	430b      	orrs	r3, r1
 8002650:	4939      	ldr	r1, [pc, #228]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d167      	bne.n	800272c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800265c:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a35      	ldr	r2, [pc, #212]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fa56 	bl	8000b18 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800266e:	e009      	b.n	8002684 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002670:	f7fe fa52 	bl	8000b18 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	73fb      	strb	r3, [r7, #15]
        break;
 8002682:	e005      	b.n	8002690 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002684:	4b2c      	ldr	r3, [pc, #176]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ef      	bne.n	8002670 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d14a      	bne.n	800272c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800269c:	4b26      	ldr	r3, [pc, #152]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0912      	lsrs	r2, r2, #4
 80026b4:	0452      	lsls	r2, r2, #17
 80026b6:	430a      	orrs	r2, r1
 80026b8:	491f      	ldr	r1, [pc, #124]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	614b      	str	r3, [r1, #20]
 80026be:	e011      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6892      	ldr	r2, [r2, #8]
 80026d0:	0211      	lsls	r1, r2, #8
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6912      	ldr	r2, [r2, #16]
 80026d6:	0852      	lsrs	r2, r2, #1
 80026d8:	3a01      	subs	r2, #1
 80026da:	0652      	lsls	r2, r2, #25
 80026dc:	430a      	orrs	r2, r1
 80026de:	4916      	ldr	r1, [pc, #88]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a13      	ldr	r2, [pc, #76]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fa12 	bl	8000b18 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026f6:	e009      	b.n	800270c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026f8:	f7fe fa0e 	bl	8000b18 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d902      	bls.n	800270c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
          break;
 800270a:	e005      	b.n	8002718 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ef      	beq.n	80026f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4904      	ldr	r1, [pc, #16]	@ (8002738 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e040      	b.n	80027d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f8aa 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb6a 	bl	8002e5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8af 	bl	80028ec <UART_SetConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01b      	b.n	80027d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fbe9 	bl	8002fa0 <UART_CheckIdleState>
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d177      	bne.n	80028e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Transmit+0x24>
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e070      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2221      	movs	r2, #33	@ 0x21
 800280c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800280e:	f7fe f983 	bl	8000b18 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282c:	d108      	bne.n	8002840 <HAL_UART_Transmit+0x68>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e003      	b.n	8002848 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002848:	e02f      	b.n	80028aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2200      	movs	r2, #0
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fc4b 	bl	80030f0 <UART_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e03b      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	b292      	uxth	r2, r2
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	3302      	adds	r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e007      	b.n	8002898 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1c9      	bne.n	800284a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2140      	movs	r1, #64	@ 0x40
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fc15 	bl	80030f0 <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e005      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f0:	b08a      	sub	sp, #40	@ 0x28
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4313      	orrs	r3, r2
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4ba4      	ldr	r3, [pc, #656]	@ (8002bac <UART_SetConfig+0x2c0>)
 800291c:	4013      	ands	r3, r2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002924:	430b      	orrs	r3, r1
 8002926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a99      	ldr	r2, [pc, #612]	@ (8002bb0 <UART_SetConfig+0x2c4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	4313      	orrs	r3, r2
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a90      	ldr	r2, [pc, #576]	@ (8002bb4 <UART_SetConfig+0x2c8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d126      	bne.n	80029c4 <UART_SetConfig+0xd8>
 8002976:	4b90      	ldr	r3, [pc, #576]	@ (8002bb8 <UART_SetConfig+0x2cc>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b03      	cmp	r3, #3
 8002982:	d81b      	bhi.n	80029bc <UART_SetConfig+0xd0>
 8002984:	a201      	add	r2, pc, #4	@ (adr r2, 800298c <UART_SetConfig+0xa0>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029ad 	.word	0x080029ad
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b5 	.word	0x080029b5
 800299c:	2301      	movs	r3, #1
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e116      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 80029a4:	2302      	movs	r3, #2
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029aa:	e112      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 80029ac:	2304      	movs	r3, #4
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b2:	e10e      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 80029b4:	2308      	movs	r3, #8
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ba:	e10a      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 80029bc:	2310      	movs	r3, #16
 80029be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029c2:	e106      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7c      	ldr	r2, [pc, #496]	@ (8002bbc <UART_SetConfig+0x2d0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d138      	bne.n	8002a40 <UART_SetConfig+0x154>
 80029ce:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb8 <UART_SetConfig+0x2cc>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d82d      	bhi.n	8002a38 <UART_SetConfig+0x14c>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <UART_SetConfig+0xf8>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	08002a19 	.word	0x08002a19
 80029e8:	08002a39 	.word	0x08002a39
 80029ec:	08002a39 	.word	0x08002a39
 80029f0:	08002a39 	.word	0x08002a39
 80029f4:	08002a29 	.word	0x08002a29
 80029f8:	08002a39 	.word	0x08002a39
 80029fc:	08002a39 	.word	0x08002a39
 8002a00:	08002a39 	.word	0x08002a39
 8002a04:	08002a21 	.word	0x08002a21
 8002a08:	08002a39 	.word	0x08002a39
 8002a0c:	08002a39 	.word	0x08002a39
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	08002a31 	.word	0x08002a31
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1e:	e0d8      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a20:	2302      	movs	r3, #2
 8002a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a26:	e0d4      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2e:	e0d0      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a30:	2308      	movs	r3, #8
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a36:	e0cc      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a38:	2310      	movs	r3, #16
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3e:	e0c8      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc0 <UART_SetConfig+0x2d4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d125      	bne.n	8002a96 <UART_SetConfig+0x1aa>
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <UART_SetConfig+0x2cc>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a54:	2b30      	cmp	r3, #48	@ 0x30
 8002a56:	d016      	beq.n	8002a86 <UART_SetConfig+0x19a>
 8002a58:	2b30      	cmp	r3, #48	@ 0x30
 8002a5a:	d818      	bhi.n	8002a8e <UART_SetConfig+0x1a2>
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d00a      	beq.n	8002a76 <UART_SetConfig+0x18a>
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d814      	bhi.n	8002a8e <UART_SetConfig+0x1a2>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <UART_SetConfig+0x182>
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d008      	beq.n	8002a7e <UART_SetConfig+0x192>
 8002a6c:	e00f      	b.n	8002a8e <UART_SetConfig+0x1a2>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a74:	e0ad      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a76:	2302      	movs	r3, #2
 8002a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7c:	e0a9      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a84:	e0a5      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a86:	2308      	movs	r3, #8
 8002a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8c:	e0a1      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a8e:	2310      	movs	r3, #16
 8002a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a94:	e09d      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc4 <UART_SetConfig+0x2d8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d125      	bne.n	8002aec <UART_SetConfig+0x200>
 8002aa0:	4b45      	ldr	r3, [pc, #276]	@ (8002bb8 <UART_SetConfig+0x2cc>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002aac:	d016      	beq.n	8002adc <UART_SetConfig+0x1f0>
 8002aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ab0:	d818      	bhi.n	8002ae4 <UART_SetConfig+0x1f8>
 8002ab2:	2b80      	cmp	r3, #128	@ 0x80
 8002ab4:	d00a      	beq.n	8002acc <UART_SetConfig+0x1e0>
 8002ab6:	2b80      	cmp	r3, #128	@ 0x80
 8002ab8:	d814      	bhi.n	8002ae4 <UART_SetConfig+0x1f8>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <UART_SetConfig+0x1d8>
 8002abe:	2b40      	cmp	r3, #64	@ 0x40
 8002ac0:	d008      	beq.n	8002ad4 <UART_SetConfig+0x1e8>
 8002ac2:	e00f      	b.n	8002ae4 <UART_SetConfig+0x1f8>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aca:	e082      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad2:	e07e      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ada:	e07a      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002adc:	2308      	movs	r3, #8
 8002ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae2:	e076      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aea:	e072      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a35      	ldr	r2, [pc, #212]	@ (8002bc8 <UART_SetConfig+0x2dc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d12a      	bne.n	8002b4c <UART_SetConfig+0x260>
 8002af6:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <UART_SetConfig+0x2cc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b04:	d01a      	beq.n	8002b3c <UART_SetConfig+0x250>
 8002b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b0a:	d81b      	bhi.n	8002b44 <UART_SetConfig+0x258>
 8002b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b10:	d00c      	beq.n	8002b2c <UART_SetConfig+0x240>
 8002b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b16:	d815      	bhi.n	8002b44 <UART_SetConfig+0x258>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <UART_SetConfig+0x238>
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b20:	d008      	beq.n	8002b34 <UART_SetConfig+0x248>
 8002b22:	e00f      	b.n	8002b44 <UART_SetConfig+0x258>
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2a:	e052      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b32:	e04e      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b34:	2304      	movs	r3, #4
 8002b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b3a:	e04a      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b42:	e046      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b44:	2310      	movs	r3, #16
 8002b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4a:	e042      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <UART_SetConfig+0x2c4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d13a      	bne.n	8002bcc <UART_SetConfig+0x2e0>
 8002b56:	4b18      	ldr	r3, [pc, #96]	@ (8002bb8 <UART_SetConfig+0x2cc>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b64:	d01a      	beq.n	8002b9c <UART_SetConfig+0x2b0>
 8002b66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b6a:	d81b      	bhi.n	8002ba4 <UART_SetConfig+0x2b8>
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b70:	d00c      	beq.n	8002b8c <UART_SetConfig+0x2a0>
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b76:	d815      	bhi.n	8002ba4 <UART_SetConfig+0x2b8>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <UART_SetConfig+0x298>
 8002b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b80:	d008      	beq.n	8002b94 <UART_SetConfig+0x2a8>
 8002b82:	e00f      	b.n	8002ba4 <UART_SetConfig+0x2b8>
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b8a:	e022      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b92:	e01e      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b94:	2304      	movs	r3, #4
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b9a:	e01a      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ba2:	e016      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002baa:	e012      	b.n	8002bd2 <UART_SetConfig+0x2e6>
 8002bac:	efff69f3 	.word	0xefff69f3
 8002bb0:	40008000 	.word	0x40008000
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40004400 	.word	0x40004400
 8002bc0:	40004800 	.word	0x40004800
 8002bc4:	40004c00 	.word	0x40004c00
 8002bc8:	40005000 	.word	0x40005000
 8002bcc:	2310      	movs	r3, #16
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a9f      	ldr	r2, [pc, #636]	@ (8002e54 <UART_SetConfig+0x568>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d17a      	bne.n	8002cd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d824      	bhi.n	8002c2e <UART_SetConfig+0x342>
 8002be4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <UART_SetConfig+0x300>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c2f 	.word	0x08002c2f
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c2f 	.word	0x08002c2f
 8002bfc:	08002c1f 	.word	0x08002c1f
 8002c00:	08002c2f 	.word	0x08002c2f
 8002c04:	08002c2f 	.word	0x08002c2f
 8002c08:	08002c2f 	.word	0x08002c2f
 8002c0c:	08002c27 	.word	0x08002c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff f84c 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002c14:	61f8      	str	r0, [r7, #28]
        break;
 8002c16:	e010      	b.n	8002c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c18:	4b8f      	ldr	r3, [pc, #572]	@ (8002e58 <UART_SetConfig+0x56c>)
 8002c1a:	61fb      	str	r3, [r7, #28]
        break;
 8002c1c:	e00d      	b.n	8002c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1e:	f7fe ffad 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8002c22:	61f8      	str	r0, [r7, #28]
        break;
 8002c24:	e009      	b.n	8002c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c2a:	61fb      	str	r3, [r7, #28]
        break;
 8002c2c:	e005      	b.n	8002c3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80fb 	beq.w	8002e38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d305      	bcc.n	8002c5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d903      	bls.n	8002c66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c64:	e0e8      	b.n	8002e38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	461c      	mov	r4, r3
 8002c6c:	4615      	mov	r5, r2
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	022b      	lsls	r3, r5, #8
 8002c78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c7c:	0222      	lsls	r2, r4, #8
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	6849      	ldr	r1, [r1, #4]
 8002c82:	0849      	lsrs	r1, r1, #1
 8002c84:	2000      	movs	r0, #0
 8002c86:	4688      	mov	r8, r1
 8002c88:	4681      	mov	r9, r0
 8002c8a:	eb12 0a08 	adds.w	sl, r2, r8
 8002c8e:	eb43 0b09 	adc.w	fp, r3, r9
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ca0:	4650      	mov	r0, sl
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	f7fd fa9c 	bl	80001e0 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4613      	mov	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cb6:	d308      	bcc.n	8002cca <UART_SetConfig+0x3de>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cbe:	d204      	bcs.n	8002cca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	e0b6      	b.n	8002e38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cd0:	e0b2      	b.n	8002e38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cda:	d15e      	bne.n	8002d9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d828      	bhi.n	8002d36 <UART_SetConfig+0x44a>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <UART_SetConfig+0x400>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d21 	.word	0x08002d21
 8002cf8:	08002d37 	.word	0x08002d37
 8002cfc:	08002d27 	.word	0x08002d27
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	08002d37 	.word	0x08002d37
 8002d08:	08002d37 	.word	0x08002d37
 8002d0c:	08002d2f 	.word	0x08002d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d10:	f7fe ffcc 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002d14:	61f8      	str	r0, [r7, #28]
        break;
 8002d16:	e014      	b.n	8002d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d18:	f7fe ffde 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8002d1c:	61f8      	str	r0, [r7, #28]
        break;
 8002d1e:	e010      	b.n	8002d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d20:	4b4d      	ldr	r3, [pc, #308]	@ (8002e58 <UART_SetConfig+0x56c>)
 8002d22:	61fb      	str	r3, [r7, #28]
        break;
 8002d24:	e00d      	b.n	8002d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d26:	f7fe ff29 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8002d2a:	61f8      	str	r0, [r7, #28]
        break;
 8002d2c:	e009      	b.n	8002d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d32:	61fb      	str	r3, [r7, #28]
        break;
 8002d34:	e005      	b.n	8002d42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d077      	beq.n	8002e38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005a      	lsls	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	441a      	add	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d916      	bls.n	8002d92 <UART_SetConfig+0x4a6>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6a:	d212      	bcs.n	8002d92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f023 030f 	bic.w	r3, r3, #15
 8002d74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	8afa      	ldrh	r2, [r7, #22]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	e052      	b.n	8002e38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d98:	e04e      	b.n	8002e38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d827      	bhi.n	8002df2 <UART_SetConfig+0x506>
 8002da2:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <UART_SetConfig+0x4bc>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002dd5 	.word	0x08002dd5
 8002db0:	08002ddd 	.word	0x08002ddd
 8002db4:	08002df3 	.word	0x08002df3
 8002db8:	08002de3 	.word	0x08002de3
 8002dbc:	08002df3 	.word	0x08002df3
 8002dc0:	08002df3 	.word	0x08002df3
 8002dc4:	08002df3 	.word	0x08002df3
 8002dc8:	08002deb 	.word	0x08002deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f7fe ff6e 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002dd0:	61f8      	str	r0, [r7, #28]
        break;
 8002dd2:	e014      	b.n	8002dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7fe ff80 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8002dd8:	61f8      	str	r0, [r7, #28]
        break;
 8002dda:	e010      	b.n	8002dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <UART_SetConfig+0x56c>)
 8002dde:	61fb      	str	r3, [r7, #28]
        break;
 8002de0:	e00d      	b.n	8002dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de2:	f7fe fecb 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8002de6:	61f8      	str	r0, [r7, #28]
        break;
 8002de8:	e009      	b.n	8002dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dee:	61fb      	str	r3, [r7, #28]
        break;
 8002df0:	e005      	b.n	8002dfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	085a      	lsrs	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d909      	bls.n	8002e32 <UART_SetConfig+0x546>
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e24:	d205      	bcs.n	8002e32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
 8002e30:	e002      	b.n	8002e38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3728      	adds	r7, #40	@ 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40008000 	.word	0x40008000
 8002e58:	00f42400 	.word	0x00f42400

08002e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01a      	beq.n	8002f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5a:	d10a      	bne.n	8002f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b098      	sub	sp, #96	@ 0x60
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb0:	f7fd fdb2 	bl	8000b18 <HAL_GetTick>
 8002fb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d12e      	bne.n	8003022 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f88c 	bl	80030f0 <UART_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d021      	beq.n	8003022 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ffe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800300a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e6      	bne.n	8002fde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e062      	b.n	80030e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d149      	bne.n	80030c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003038:	2200      	movs	r2, #0
 800303a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f856 	bl	80030f0 <UART_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03c      	beq.n	80030c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	623b      	str	r3, [r7, #32]
   return(result);
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800305e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30
 800306a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800306e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e6      	bne.n	800304a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3308      	adds	r3, #8
 8003082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	60fb      	str	r3, [r7, #12]
   return(result);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800309c:	61fa      	str	r2, [r7, #28]
 800309e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	69b9      	ldr	r1, [r7, #24]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	617b      	str	r3, [r7, #20]
   return(result);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e011      	b.n	80030e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3758      	adds	r7, #88	@ 0x58
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003100:	e04f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d04b      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fd fd05 	bl	8000b18 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <UART_WaitOnFlagUntilTimeout+0x30>
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e04e      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d037      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b80      	cmp	r3, #128	@ 0x80
 8003136:	d034      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b40      	cmp	r3, #64	@ 0x40
 800313c:	d031      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d110      	bne.n	800316e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2208      	movs	r2, #8
 8003152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f838 	bl	80031ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2208      	movs	r2, #8
 800315e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e029      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800317c:	d111      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f81e 	bl	80031ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e00f      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0a0      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b095      	sub	sp, #84	@ 0x54
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e6      	bne.n	80031d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3308      	adds	r3, #8
 800320a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	61fb      	str	r3, [r7, #28]
   return(result);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3308      	adds	r3, #8
 8003222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800322a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	2b01      	cmp	r3, #1
 800323e:	d118      	bne.n	8003272 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	60bb      	str	r3, [r7, #8]
   return(result);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f023 0310 	bic.w	r3, r3, #16
 8003254:	647b      	str	r3, [r7, #68]	@ 0x44
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	613b      	str	r3, [r7, #16]
   return(result);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e6      	bne.n	8003240 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003286:	bf00      	nop
 8003288:	3754      	adds	r7, #84	@ 0x54
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a4:	2b84      	cmp	r3, #132	@ 0x84
 80032a6:	d005      	beq.n	80032b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	3303      	adds	r3, #3
 80032b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032b4:	68fb      	ldr	r3, [r7, #12]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032c6:	f000 fb75 	bl	80039b4 <vTaskStartScheduler>
  
  return osOK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af04      	add	r7, sp, #16
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d020      	beq.n	8003324 <osThreadCreate+0x54>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01c      	beq.n	8003324 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685c      	ldr	r4, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691e      	ldr	r6, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ffc8 	bl	8003292 <makeFreeRtosPriority>
 8003302:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800330c:	9202      	str	r2, [sp, #8]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	9100      	str	r1, [sp, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	4632      	mov	r2, r6
 8003316:	4629      	mov	r1, r5
 8003318:	4620      	mov	r0, r4
 800331a:	f000 f8ed 	bl	80034f8 <xTaskCreateStatic>
 800331e:	4603      	mov	r3, r0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e01c      	b.n	800335e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685c      	ldr	r4, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003330:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ffaa 	bl	8003292 <makeFreeRtosPriority>
 800333e:	4602      	mov	r2, r0
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	9200      	str	r2, [sp, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4632      	mov	r2, r6
 800334c:	4629      	mov	r1, r5
 800334e:	4620      	mov	r0, r4
 8003350:	f000 f932 	bl	80035b8 <xTaskCreate>
 8003354:	4603      	mov	r3, r0
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800335e:	68fb      	ldr	r3, [r7, #12]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003368 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <osDelay+0x16>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	e000      	b.n	8003380 <osDelay+0x18>
 800337e:	2301      	movs	r3, #1
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fae1 	bl	8003948 <vTaskDelay>
  
  return osOK;
 8003386:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f103 0208 	add.w	r2, r3, #8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f04f 32ff 	mov.w	r2, #4294967295
 80033a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 0208 	add.w	r2, r3, #8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f103 0208 	add.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d103      	bne.n	8003452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e00c      	b.n	800346c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3308      	adds	r3, #8
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e002      	b.n	8003460 <vListInsert+0x2e>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	429a      	cmp	r2, r3
 800346a:	d2f6      	bcs.n	800345a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6852      	ldr	r2, [r2, #4]
 80034c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d103      	bne.n	80034d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08e      	sub	sp, #56	@ 0x38
 80034fc:	af04      	add	r7, sp, #16
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <xTaskCreateStatic+0x4a>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	61fb      	str	r3, [r7, #28]
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	e7fd      	b.n	800353e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003542:	2354      	movs	r3, #84	@ 0x54
 8003544:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b54      	cmp	r3, #84	@ 0x54
 800354a:	d00b      	beq.n	8003564 <xTaskCreateStatic+0x6c>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61bb      	str	r3, [r7, #24]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003564:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01e      	beq.n	80035aa <xTaskCreateStatic+0xb2>
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01b      	beq.n	80035aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003584:	2300      	movs	r3, #0
 8003586:	9303      	str	r3, [sp, #12]
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	9302      	str	r3, [sp, #8]
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f850 	bl	8003642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035a4:	f000 f8d6 	bl	8003754 <prvAddNewTaskToReadyList>
 80035a8:	e001      	b.n	80035ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ae:	697b      	ldr	r3, [r7, #20]
	}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3728      	adds	r7, #40	@ 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	@ 0x30
 80035bc:	af04      	add	r7, sp, #16
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 ff83 	bl	80044d8 <pvPortMalloc>
 80035d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035da:	2054      	movs	r0, #84	@ 0x54
 80035dc:	f000 ff7c 	bl	80044d8 <pvPortMalloc>
 80035e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ee:	e005      	b.n	80035fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f001 f83f 	bl	8004674 <vPortFree>
 80035f6:	e001      	b.n	80035fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	2300      	movs	r3, #0
 800360e:	9303      	str	r3, [sp, #12]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	9302      	str	r3, [sp, #8]
 8003614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f80e 	bl	8003642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003626:	69f8      	ldr	r0, [r7, #28]
 8003628:	f000 f894 	bl	8003754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800362c:	2301      	movs	r3, #1
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	e002      	b.n	8003638 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003638:	69bb      	ldr	r3, [r7, #24]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b088      	sub	sp, #32
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800365a:	3b01      	subs	r3, #1
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f023 0307 	bic.w	r3, r3, #7
 8003668:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	617b      	str	r3, [r7, #20]
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01f      	beq.n	80036d2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	e012      	b.n	80036be <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	7819      	ldrb	r1, [r3, #0]
 80036a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	3334      	adds	r3, #52	@ 0x34
 80036a8:	460a      	mov	r2, r1
 80036aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d9e9      	bls.n	8003698 <prvInitialiseNewTask+0x56>
 80036c4:	e000      	b.n	80036c8 <prvInitialiseNewTask+0x86>
			{
				break;
 80036c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036d0:	e003      	b.n	80036da <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d901      	bls.n	80036e4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e0:	2306      	movs	r3, #6
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	2200      	movs	r2, #0
 80036f4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fe68 	bl	80033d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	3318      	adds	r3, #24
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fe63 	bl	80033d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	f1c3 0207 	rsb	r2, r3, #7
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	2200      	movs	r2, #0
 8003724:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	69b8      	ldr	r0, [r7, #24]
 8003734:	f000 fcbc 	bl	80040b0 <pxPortInitialiseStack>
 8003738:	4602      	mov	r2, r0
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800373e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800375c:	f000 fddc 	bl	8004318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003760:	4b2a      	ldr	r3, [pc, #168]	@ (800380c <prvAddNewTaskToReadyList+0xb8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a29      	ldr	r2, [pc, #164]	@ (800380c <prvAddNewTaskToReadyList+0xb8>)
 8003768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800376a:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <prvAddNewTaskToReadyList+0xbc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003772:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <prvAddNewTaskToReadyList+0xbc>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003778:	4b24      	ldr	r3, [pc, #144]	@ (800380c <prvAddNewTaskToReadyList+0xb8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d110      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003780:	f000 fb54 	bl	8003e2c <prvInitialiseTaskLists>
 8003784:	e00d      	b.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003786:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <prvAddNewTaskToReadyList+0xc0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <prvAddNewTaskToReadyList+0xbc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	429a      	cmp	r2, r3
 800379a:	d802      	bhi.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800379c:	4a1c      	ldr	r2, [pc, #112]	@ (8003810 <prvAddNewTaskToReadyList+0xbc>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <prvAddNewTaskToReadyList+0xc4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <prvAddNewTaskToReadyList+0xc4>)
 80037aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	4b19      	ldr	r3, [pc, #100]	@ (800381c <prvAddNewTaskToReadyList+0xc8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	4a18      	ldr	r2, [pc, #96]	@ (800381c <prvAddNewTaskToReadyList+0xc8>)
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4a15      	ldr	r2, [pc, #84]	@ (8003820 <prvAddNewTaskToReadyList+0xcc>)
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff fe08 	bl	80033ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037da:	f000 fdcf 	bl	800437c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <prvAddNewTaskToReadyList+0xc0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <prvAddNewTaskToReadyList+0xbc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d207      	bcs.n	8003804 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <prvAddNewTaskToReadyList+0xd0>)
 80037f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000418 	.word	0x20000418
 8003810:	20000318 	.word	0x20000318
 8003814:	20000424 	.word	0x20000424
 8003818:	20000434 	.word	0x20000434
 800381c:	20000420 	.word	0x20000420
 8003820:	2000031c 	.word	0x2000031c
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003830:	f000 fd72 	bl	8004318 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <vTaskDelete+0x18>
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <vTaskDelete+0xf8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e000      	b.n	8003842 <vTaskDelete+0x1a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3304      	adds	r3, #4
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fe2b 	bl	80034a4 <uxListRemove>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d115      	bne.n	8003880 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003858:	4932      	ldr	r1, [pc, #200]	@ (8003924 <vTaskDelete+0xfc>)
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <vTaskDelete+0x58>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43da      	mvns	r2, r3
 8003876:	4b2c      	ldr	r3, [pc, #176]	@ (8003928 <vTaskDelete+0x100>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4013      	ands	r3, r2
 800387c:	4a2a      	ldr	r2, [pc, #168]	@ (8003928 <vTaskDelete+0x100>)
 800387e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3318      	adds	r3, #24
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fe09 	bl	80034a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003892:	4b26      	ldr	r3, [pc, #152]	@ (800392c <vTaskDelete+0x104>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a24      	ldr	r2, [pc, #144]	@ (800392c <vTaskDelete+0x104>)
 800389a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <vTaskDelete+0xf8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10b      	bne.n	80038be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4820      	ldr	r0, [pc, #128]	@ (8003930 <vTaskDelete+0x108>)
 80038ae:	f7ff fd9c 	bl	80033ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <vTaskDelete+0x10c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <vTaskDelete+0x10c>)
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e009      	b.n	80038d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <vTaskDelete+0x110>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <vTaskDelete+0x110>)
 80038c6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fb1d 	bl	8003f08 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80038ce:	f000 fb4b 	bl	8003f68 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80038d2:	f000 fd53 	bl	800437c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80038d6:	4b19      	ldr	r3, [pc, #100]	@ (800393c <vTaskDelete+0x114>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01c      	beq.n	8003918 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <vTaskDelete+0xf8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d117      	bne.n	8003918 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80038e8:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <vTaskDelete+0x118>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <vTaskDelete+0xe0>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	60bb      	str	r3, [r7, #8]
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003908:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <vTaskDelete+0x11c>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000318 	.word	0x20000318
 8003924:	2000031c 	.word	0x2000031c
 8003928:	20000420 	.word	0x20000420
 800392c:	20000434 	.word	0x20000434
 8003930:	200003ec 	.word	0x200003ec
 8003934:	20000400 	.word	0x20000400
 8003938:	20000418 	.word	0x20000418
 800393c:	20000424 	.word	0x20000424
 8003940:	20000440 	.word	0x20000440
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800395a:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <vTaskDelay+0x64>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <vTaskDelay+0x32>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60bb      	str	r3, [r7, #8]
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800397a:	f000 f87d 	bl	8003a78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800397e:	2100      	movs	r1, #0
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fb2f 	bl	8003fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003986:	f000 f885 	bl	8003a94 <xTaskResumeAll>
 800398a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <vTaskDelay+0x68>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000440 	.word	0x20000440
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	@ 0x28
 80039b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039c2:	463a      	mov	r2, r7
 80039c4:	1d39      	adds	r1, r7, #4
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fc fd9e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	9202      	str	r2, [sp, #8]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	460a      	mov	r2, r1
 80039e2:	491f      	ldr	r1, [pc, #124]	@ (8003a60 <vTaskStartScheduler+0xac>)
 80039e4:	481f      	ldr	r0, [pc, #124]	@ (8003a64 <vTaskStartScheduler+0xb0>)
 80039e6:	f7ff fd87 	bl	80034f8 <xTaskCreateStatic>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <vTaskStartScheduler+0xb4>)
 80039ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <vTaskStartScheduler+0xb4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039f8:	2301      	movs	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e001      	b.n	8003a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d116      	bne.n	8003a36 <vTaskStartScheduler+0x82>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	613b      	str	r3, [r7, #16]
}
 8003a1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a1c:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <vTaskStartScheduler+0xb8>)
 8003a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a24:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <vTaskStartScheduler+0xbc>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a2a:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <vTaskStartScheduler+0xc0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a30:	f000 fbce 	bl	80041d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a34:	e00f      	b.n	8003a56 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d10b      	bne.n	8003a56 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	60fb      	str	r3, [r7, #12]
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	e7fd      	b.n	8003a52 <vTaskStartScheduler+0x9e>
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	080049e8 	.word	0x080049e8
 8003a64:	08003dfd 	.word	0x08003dfd
 8003a68:	2000043c 	.word	0x2000043c
 8003a6c:	20000438 	.word	0x20000438
 8003a70:	20000424 	.word	0x20000424
 8003a74:	2000041c 	.word	0x2000041c

08003a78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a7c:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <vTaskSuspendAll+0x18>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	4a03      	ldr	r2, [pc, #12]	@ (8003a90 <vTaskSuspendAll+0x18>)
 8003a84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000440 	.word	0x20000440

08003a94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aa2:	4b42      	ldr	r3, [pc, #264]	@ (8003bac <xTaskResumeAll+0x118>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	603b      	str	r3, [r7, #0]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ac2:	f000 fc29 	bl	8004318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ac6:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <xTaskResumeAll+0x118>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	4a37      	ldr	r2, [pc, #220]	@ (8003bac <xTaskResumeAll+0x118>)
 8003ace:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad0:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <xTaskResumeAll+0x118>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d161      	bne.n	8003b9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad8:	4b35      	ldr	r3, [pc, #212]	@ (8003bb0 <xTaskResumeAll+0x11c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05d      	beq.n	8003b9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae0:	e02e      	b.n	8003b40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b34      	ldr	r3, [pc, #208]	@ (8003bb4 <xTaskResumeAll+0x120>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3318      	adds	r3, #24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fcd8 	bl	80034a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fcd3 	bl	80034a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	2201      	movs	r2, #1
 8003b04:	409a      	lsls	r2, r3
 8003b06:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb8 <xTaskResumeAll+0x124>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb8 <xTaskResumeAll+0x124>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a27      	ldr	r2, [pc, #156]	@ (8003bbc <xTaskResumeAll+0x128>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7ff fc5f 	bl	80033ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b30:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <xTaskResumeAll+0x12c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	@ (8003bc4 <xTaskResumeAll+0x130>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b40:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb4 <xTaskResumeAll+0x120>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1cc      	bne.n	8003ae2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b4e:	f000 fa0b 	bl	8003f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b52:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <xTaskResumeAll+0x134>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b5e:	f000 f837 	bl	8003bd0 <xTaskIncrementTick>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b68:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <xTaskResumeAll+0x130>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f1      	bne.n	8003b5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <xTaskResumeAll+0x134>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b80:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <xTaskResumeAll+0x130>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <xTaskResumeAll+0x138>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b9c:	f000 fbee 	bl	800437c <vPortExitCritical>

	return xAlreadyYielded;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000440 	.word	0x20000440
 8003bb0:	20000418 	.word	0x20000418
 8003bb4:	200003d8 	.word	0x200003d8
 8003bb8:	20000420 	.word	0x20000420
 8003bbc:	2000031c 	.word	0x2000031c
 8003bc0:	20000318 	.word	0x20000318
 8003bc4:	2000042c 	.word	0x2000042c
 8003bc8:	20000428 	.word	0x20000428
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bda:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <xTaskIncrementTick+0x148>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 808f 	bne.w	8003d02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d1c <xTaskIncrementTick+0x14c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bec:	4a4b      	ldr	r2, [pc, #300]	@ (8003d1c <xTaskIncrementTick+0x14c>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d121      	bne.n	8003c3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf8:	4b49      	ldr	r3, [pc, #292]	@ (8003d20 <xTaskIncrementTick+0x150>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	603b      	str	r3, [r7, #0]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <xTaskIncrementTick+0x46>
 8003c1a:	4b41      	ldr	r3, [pc, #260]	@ (8003d20 <xTaskIncrementTick+0x150>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	4b40      	ldr	r3, [pc, #256]	@ (8003d24 <xTaskIncrementTick+0x154>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3e      	ldr	r2, [pc, #248]	@ (8003d20 <xTaskIncrementTick+0x150>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4a3e      	ldr	r2, [pc, #248]	@ (8003d24 <xTaskIncrementTick+0x154>)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d28 <xTaskIncrementTick+0x158>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a3c      	ldr	r2, [pc, #240]	@ (8003d28 <xTaskIncrementTick+0x158>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	f000 f996 	bl	8003f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d2c <xTaskIncrementTick+0x15c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d348      	bcc.n	8003cd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c46:	4b36      	ldr	r3, [pc, #216]	@ (8003d20 <xTaskIncrementTick+0x150>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c50:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <xTaskIncrementTick+0x15c>)
 8003c52:	f04f 32ff 	mov.w	r2, #4294967295
 8003c56:	601a      	str	r2, [r3, #0]
					break;
 8003c58:	e03e      	b.n	8003cd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5a:	4b31      	ldr	r3, [pc, #196]	@ (8003d20 <xTaskIncrementTick+0x150>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d203      	bcs.n	8003c7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c72:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <xTaskIncrementTick+0x15c>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c78:	e02e      	b.n	8003cd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fc10 	bl	80034a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	3318      	adds	r3, #24
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fc07 	bl	80034a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	4b24      	ldr	r3, [pc, #144]	@ (8003d30 <xTaskIncrementTick+0x160>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <xTaskIncrementTick+0x160>)
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <xTaskIncrementTick+0x164>)
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7ff fb93 	bl	80033ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <xTaskIncrementTick+0x168>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d3b9      	bcc.n	8003c46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd6:	e7b6      	b.n	8003c46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd8:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <xTaskIncrementTick+0x168>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cde:	4915      	ldr	r1, [pc, #84]	@ (8003d34 <xTaskIncrementTick+0x164>)
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d901      	bls.n	8003cf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <xTaskIncrementTick+0x16c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e004      	b.n	8003d0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d02:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <xTaskIncrementTick+0x170>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3301      	adds	r3, #1
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <xTaskIncrementTick+0x170>)
 8003d0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d0c:	697b      	ldr	r3, [r7, #20]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000440 	.word	0x20000440
 8003d1c:	2000041c 	.word	0x2000041c
 8003d20:	200003d0 	.word	0x200003d0
 8003d24:	200003d4 	.word	0x200003d4
 8003d28:	20000430 	.word	0x20000430
 8003d2c:	20000438 	.word	0x20000438
 8003d30:	20000420 	.word	0x20000420
 8003d34:	2000031c 	.word	0x2000031c
 8003d38:	20000318 	.word	0x20000318
 8003d3c:	2000042c 	.word	0x2000042c
 8003d40:	20000428 	.word	0x20000428

08003d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d4a:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <vTaskSwitchContext+0xa4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d52:	4b26      	ldr	r3, [pc, #152]	@ (8003dec <vTaskSwitchContext+0xa8>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d58:	e040      	b.n	8003ddc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003d5a:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <vTaskSwitchContext+0xa8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d60:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <vTaskSwitchContext+0xac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	f1c3 031f 	rsb	r3, r3, #31
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	491f      	ldr	r1, [pc, #124]	@ (8003df4 <vTaskSwitchContext+0xb0>)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <vTaskSwitchContext+0x5a>
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a11      	ldr	r2, [pc, #68]	@ (8003df4 <vTaskSwitchContext+0xb0>)
 8003dae:	4413      	add	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d104      	bne.n	8003dd2 <vTaskSwitchContext+0x8e>
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <vTaskSwitchContext+0xb4>)
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	20000440 	.word	0x20000440
 8003dec:	2000042c 	.word	0x2000042c
 8003df0:	20000420 	.word	0x20000420
 8003df4:	2000031c 	.word	0x2000031c
 8003df8:	20000318 	.word	0x20000318

08003dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e04:	f000 f852 	bl	8003eac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <prvIdleTask+0x28>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d9f9      	bls.n	8003e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <prvIdleTask+0x2c>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e20:	e7f0      	b.n	8003e04 <prvIdleTask+0x8>
 8003e22:	bf00      	nop
 8003e24:	2000031c 	.word	0x2000031c
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	e00c      	b.n	8003e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4a12      	ldr	r2, [pc, #72]	@ (8003e8c <prvInitialiseTaskLists+0x60>)
 8003e44:	4413      	add	r3, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff faa2 	bl	8003390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d9ef      	bls.n	8003e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e58:	480d      	ldr	r0, [pc, #52]	@ (8003e90 <prvInitialiseTaskLists+0x64>)
 8003e5a:	f7ff fa99 	bl	8003390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e5e:	480d      	ldr	r0, [pc, #52]	@ (8003e94 <prvInitialiseTaskLists+0x68>)
 8003e60:	f7ff fa96 	bl	8003390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e64:	480c      	ldr	r0, [pc, #48]	@ (8003e98 <prvInitialiseTaskLists+0x6c>)
 8003e66:	f7ff fa93 	bl	8003390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e6a:	480c      	ldr	r0, [pc, #48]	@ (8003e9c <prvInitialiseTaskLists+0x70>)
 8003e6c:	f7ff fa90 	bl	8003390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e70:	480b      	ldr	r0, [pc, #44]	@ (8003ea0 <prvInitialiseTaskLists+0x74>)
 8003e72:	f7ff fa8d 	bl	8003390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <prvInitialiseTaskLists+0x78>)
 8003e78:	4a05      	ldr	r2, [pc, #20]	@ (8003e90 <prvInitialiseTaskLists+0x64>)
 8003e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <prvInitialiseTaskLists+0x7c>)
 8003e7e:	4a05      	ldr	r2, [pc, #20]	@ (8003e94 <prvInitialiseTaskLists+0x68>)
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	2000031c 	.word	0x2000031c
 8003e90:	200003a8 	.word	0x200003a8
 8003e94:	200003bc 	.word	0x200003bc
 8003e98:	200003d8 	.word	0x200003d8
 8003e9c:	200003ec 	.word	0x200003ec
 8003ea0:	20000404 	.word	0x20000404
 8003ea4:	200003d0 	.word	0x200003d0
 8003ea8:	200003d4 	.word	0x200003d4

08003eac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb2:	e019      	b.n	8003ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003eb4:	f000 fa30 	bl	8004318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <prvCheckTasksWaitingTermination+0x50>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff faed 	bl	80034a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <prvCheckTasksWaitingTermination+0x54>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8003f00 <prvCheckTasksWaitingTermination+0x54>)
 8003ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <prvCheckTasksWaitingTermination+0x58>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <prvCheckTasksWaitingTermination+0x58>)
 8003edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ede:	f000 fa4d 	bl	800437c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f810 	bl	8003f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <prvCheckTasksWaitingTermination+0x58>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e1      	bne.n	8003eb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200003ec 	.word	0x200003ec
 8003f00:	20000418 	.word	0x20000418
 8003f04:	20000400 	.word	0x20000400

08003f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fba8 	bl	8004674 <vPortFree>
				vPortFree( pxTCB );
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fba5 	bl	8004674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f2a:	e019      	b.n	8003f60 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d103      	bne.n	8003f3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb9c 	bl	8004674 <vPortFree>
	}
 8003f3c:	e010      	b.n	8003f60 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d00b      	beq.n	8003f60 <prvDeleteTCB+0x58>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60fb      	str	r3, [r7, #12]
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <prvDeleteTCB+0x54>
	}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <prvResetNextTaskUnblockTime+0x38>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f80:	e008      	b.n	8003f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <prvResetNextTaskUnblockTime+0x38>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a04      	ldr	r2, [pc, #16]	@ (8003fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	200003d0 	.word	0x200003d0
 8003fa4:	20000438 	.word	0x20000438

08003fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fae:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <xTaskGetSchedulerState+0x34>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	e008      	b.n	8003fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fbc:	4b08      	ldr	r3, [pc, #32]	@ (8003fe0 <xTaskGetSchedulerState+0x38>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	e001      	b.n	8003fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fce:	687b      	ldr	r3, [r7, #4]
	}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20000424 	.word	0x20000424
 8003fe0:	20000440 	.word	0x20000440

08003fe4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fee:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ff4:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fa52 	bl	80034a4 <uxListRemove>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004006:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	2201      	movs	r2, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	4b21      	ldr	r3, [pc, #132]	@ (800409c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4013      	ands	r3, r2
 800401a:	4a20      	ldr	r2, [pc, #128]	@ (800409c <prvAddCurrentTaskToDelayedList+0xb8>)
 800401c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d10a      	bne.n	800403c <prvAddCurrentTaskToDelayedList+0x58>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800402c:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	481a      	ldr	r0, [pc, #104]	@ (80040a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004036:	f7ff f9d8 	bl	80033ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800403a:	e026      	b.n	800408a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004044:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d209      	bcs.n	8004068 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004054:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b0f      	ldr	r3, [pc, #60]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7ff f9e6 	bl	8003432 <vListInsert>
}
 8004066:	e010      	b.n	800408a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004068:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3304      	adds	r3, #4
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7ff f9dc 	bl	8003432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800407a:	4b0c      	ldr	r3, [pc, #48]	@ (80040ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d202      	bcs.n	800408a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004084:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000041c 	.word	0x2000041c
 8004098:	20000318 	.word	0x20000318
 800409c:	20000420 	.word	0x20000420
 80040a0:	20000404 	.word	0x20000404
 80040a4:	200003d4 	.word	0x200003d4
 80040a8:	200003d0 	.word	0x200003d0
 80040ac:	20000438 	.word	0x20000438

080040b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b04      	subs	r3, #4
 80040c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b04      	subs	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004114 <pxPortInitialiseStack+0x64>)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b14      	subs	r3, #20
 80040ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3b04      	subs	r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f06f 0202 	mvn.w	r2, #2
 80040fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b20      	subs	r3, #32
 8004104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	08004119 	.word	0x08004119

08004118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004122:	4b13      	ldr	r3, [pc, #76]	@ (8004170 <prvTaskExitError+0x58>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d00b      	beq.n	8004144 <prvTaskExitError+0x2c>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <prvTaskExitError+0x28>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60bb      	str	r3, [r7, #8]
}
 8004156:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004158:	bf00      	nop
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0fc      	beq.n	800415a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000000c 	.word	0x2000000c
	...

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	@ (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041a8:	4808      	ldr	r0, [pc, #32]	@ (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ca:	bf00      	nop
 80041cc:	e000ed08 	.word	0xe000ed08

080041d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041d6:	4b47      	ldr	r3, [pc, #284]	@ (80042f4 <xPortStartScheduler+0x124>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a47      	ldr	r2, [pc, #284]	@ (80042f8 <xPortStartScheduler+0x128>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10b      	bne.n	80041f8 <xPortStartScheduler+0x28>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041f8:	4b3e      	ldr	r3, [pc, #248]	@ (80042f4 <xPortStartScheduler+0x124>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a3f      	ldr	r2, [pc, #252]	@ (80042fc <xPortStartScheduler+0x12c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10b      	bne.n	800421a <xPortStartScheduler+0x4a>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	613b      	str	r3, [r7, #16]
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	e7fd      	b.n	8004216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800421a:	4b39      	ldr	r3, [pc, #228]	@ (8004300 <xPortStartScheduler+0x130>)
 800421c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	22ff      	movs	r2, #255	@ 0xff
 800422a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b31      	ldr	r3, [pc, #196]	@ (8004304 <xPortStartScheduler+0x134>)
 8004240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004242:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <xPortStartScheduler+0x138>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004248:	e009      	b.n	800425e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800424a:	4b2f      	ldr	r3, [pc, #188]	@ (8004308 <xPortStartScheduler+0x138>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3b01      	subs	r3, #1
 8004250:	4a2d      	ldr	r2, [pc, #180]	@ (8004308 <xPortStartScheduler+0x138>)
 8004252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d0ef      	beq.n	800424a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <xPortStartScheduler+0x138>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00b      	beq.n	800428e <xPortStartScheduler+0xbe>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	60bb      	str	r3, [r7, #8]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800428e:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <xPortStartScheduler+0x138>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <xPortStartScheduler+0x138>)
 8004296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004298:	4b1b      	ldr	r3, [pc, #108]	@ (8004308 <xPortStartScheduler+0x138>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042a0:	4a19      	ldr	r2, [pc, #100]	@ (8004308 <xPortStartScheduler+0x138>)
 80042a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042ac:	4b17      	ldr	r3, [pc, #92]	@ (800430c <xPortStartScheduler+0x13c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a16      	ldr	r2, [pc, #88]	@ (800430c <xPortStartScheduler+0x13c>)
 80042b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042b8:	4b14      	ldr	r3, [pc, #80]	@ (800430c <xPortStartScheduler+0x13c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a13      	ldr	r2, [pc, #76]	@ (800430c <xPortStartScheduler+0x13c>)
 80042be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042c4:	f000 f8da 	bl	800447c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <xPortStartScheduler+0x140>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042ce:	f000 f8f9 	bl	80044c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042d2:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <xPortStartScheduler+0x144>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <xPortStartScheduler+0x144>)
 80042d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042de:	f7ff ff63 	bl	80041a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042e2:	f7ff fd2f 	bl	8003d44 <vTaskSwitchContext>
	prvTaskExitError();
 80042e6:	f7ff ff17 	bl	8004118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	410fc271 	.word	0x410fc271
 80042fc:	410fc270 	.word	0x410fc270
 8004300:	e000e400 	.word	0xe000e400
 8004304:	20000444 	.word	0x20000444
 8004308:	20000448 	.word	0x20000448
 800430c:	e000ed20 	.word	0xe000ed20
 8004310:	2000000c 	.word	0x2000000c
 8004314:	e000ef34 	.word	0xe000ef34

08004318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
}
 8004330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <vPortEnterCritical+0x5c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	4a0e      	ldr	r2, [pc, #56]	@ (8004374 <vPortEnterCritical+0x5c>)
 800433a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800433c:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <vPortEnterCritical+0x5c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d110      	bne.n	8004366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <vPortEnterCritical+0x60>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <vPortEnterCritical+0x4e>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	603b      	str	r3, [r7, #0]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <vPortEnterCritical+0x4a>
	}
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2000000c 	.word	0x2000000c
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004382:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <vPortExitCritical+0x50>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <vPortExitCritical+0x26>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <vPortExitCritical+0x50>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <vPortExitCritical+0x50>)
 80043aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <vPortExitCritical+0x50>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <vPortExitCritical+0x44>
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	2000000c 	.word	0x2000000c

080043d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043d0:	f3ef 8009 	mrs	r0, PSP
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <pxCurrentTCBConst>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f01e 0f10 	tst.w	lr, #16
 80043e0:	bf08      	it	eq
 80043e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043f4:	f380 8811 	msr	BASEPRI, r0
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f7ff fca0 	bl	8003d44 <vTaskSwitchContext>
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f380 8811 	msr	BASEPRI, r0
 800440c:	bc09      	pop	{r0, r3}
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6808      	ldr	r0, [r1, #0]
 8004412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004416:	f01e 0f10 	tst.w	lr, #16
 800441a:	bf08      	it	eq
 800441c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004420:	f380 8809 	msr	PSP, r0
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst>:
 8004430:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004452:	f7ff fbbd 	bl	8003bd0 <xTaskIncrementTick>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800445c:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <xPortSysTickHandler+0x40>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f383 8811 	msr	BASEPRI, r3
}
 800446e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <vPortSetupTimerInterrupt+0x34>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004486:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <vPortSetupTimerInterrupt+0x38>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800448c:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <vPortSetupTimerInterrupt+0x3c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <vPortSetupTimerInterrupt+0x40>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a09      	ldr	r2, [pc, #36]	@ (80044c0 <vPortSetupTimerInterrupt+0x44>)
 800449a:	3b01      	subs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800449e:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <vPortSetupTimerInterrupt+0x34>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010
 80044b4:	e000e018 	.word	0xe000e018
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80044d4 <vPortEnableVFP+0x10>
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044ce:	6001      	str	r1, [r0, #0]
 80044d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e000ed88 	.word	0xe000ed88

080044d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044e4:	f7ff fac8 	bl	8003a78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044e8:	4b5c      	ldr	r3, [pc, #368]	@ (800465c <pvPortMalloc+0x184>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044f0:	f000 f924 	bl	800473c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004660 <pvPortMalloc+0x188>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8095 	bne.w	800462c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01e      	beq.n	8004546 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004508:	2208      	movs	r2, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d015      	beq.n	8004546 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f023 0307 	bic.w	r3, r3, #7
 8004520:	3308      	adds	r3, #8
 8004522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <pvPortMalloc+0x6e>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	617b      	str	r3, [r7, #20]
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	e7fd      	b.n	8004542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d06f      	beq.n	800462c <pvPortMalloc+0x154>
 800454c:	4b45      	ldr	r3, [pc, #276]	@ (8004664 <pvPortMalloc+0x18c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d86a      	bhi.n	800462c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004556:	4b44      	ldr	r3, [pc, #272]	@ (8004668 <pvPortMalloc+0x190>)
 8004558:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800455a:	4b43      	ldr	r3, [pc, #268]	@ (8004668 <pvPortMalloc+0x190>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004560:	e004      	b.n	800456c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d903      	bls.n	800457e <pvPortMalloc+0xa6>
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f1      	bne.n	8004562 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800457e:	4b37      	ldr	r3, [pc, #220]	@ (800465c <pvPortMalloc+0x184>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	429a      	cmp	r2, r3
 8004586:	d051      	beq.n	800462c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2208      	movs	r2, #8
 800458e:	4413      	add	r3, r2
 8004590:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	2308      	movs	r3, #8
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d920      	bls.n	80045ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4413      	add	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <pvPortMalloc+0xfc>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	613b      	str	r3, [r7, #16]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045e6:	69b8      	ldr	r0, [r7, #24]
 80045e8:	f000 f90a 	bl	8004800 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <pvPortMalloc+0x18c>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004664 <pvPortMalloc+0x18c>)
 80045f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <pvPortMalloc+0x18c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <pvPortMalloc+0x194>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d203      	bcs.n	800460e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004606:	4b17      	ldr	r3, [pc, #92]	@ (8004664 <pvPortMalloc+0x18c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a18      	ldr	r2, [pc, #96]	@ (800466c <pvPortMalloc+0x194>)
 800460c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <pvPortMalloc+0x188>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	431a      	orrs	r2, r3
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004622:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <pvPortMalloc+0x198>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <pvPortMalloc+0x198>)
 800462a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800462c:	f7ff fa32 	bl	8003a94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <pvPortMalloc+0x17a>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	60fb      	str	r3, [r7, #12]
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	e7fd      	b.n	800464e <pvPortMalloc+0x176>
	return pvReturn;
 8004652:	69fb      	ldr	r3, [r7, #28]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	@ 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	2000100c 	.word	0x2000100c
 8004660:	20001020 	.word	0x20001020
 8004664:	20001010 	.word	0x20001010
 8004668:	20001004 	.word	0x20001004
 800466c:	20001014 	.word	0x20001014
 8004670:	20001018 	.word	0x20001018

08004674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04f      	beq.n	8004726 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004686:	2308      	movs	r3, #8
 8004688:	425b      	negs	r3, r3
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4413      	add	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	4b25      	ldr	r3, [pc, #148]	@ (8004730 <vPortFree+0xbc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <vPortFree+0x46>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60fb      	str	r3, [r7, #12]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <vPortFree+0x66>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60bb      	str	r3, [r7, #8]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <vPortFree+0xbc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01e      	beq.n	8004726 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11a      	bne.n	8004726 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <vPortFree+0xbc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	401a      	ands	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004700:	f7ff f9ba 	bl	8003a78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <vPortFree+0xc0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4413      	add	r3, r2
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <vPortFree+0xc0>)
 8004710:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004712:	6938      	ldr	r0, [r7, #16]
 8004714:	f000 f874 	bl	8004800 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004718:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <vPortFree+0xc4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	4a06      	ldr	r2, [pc, #24]	@ (8004738 <vPortFree+0xc4>)
 8004720:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004722:	f7ff f9b7 	bl	8003a94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20001020 	.word	0x20001020
 8004734:	20001010 	.word	0x20001010
 8004738:	2000101c 	.word	0x2000101c

0800473c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004742:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004746:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004748:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <prvHeapInit+0xac>)
 800474a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3307      	adds	r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <prvHeapInit+0xac>)
 800476c:	4413      	add	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004774:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <prvHeapInit+0xb0>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800477a:	4b1c      	ldr	r3, [pc, #112]	@ (80047ec <prvHeapInit+0xb0>)
 800477c:	2200      	movs	r2, #0
 800477e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	4413      	add	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004788:	2208      	movs	r2, #8
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0307 	bic.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <prvHeapInit+0xb4>)
 800479c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800479e:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <prvHeapInit+0xb4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047a6:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <prvHeapInit+0xb4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	1ad2      	subs	r2, r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <prvHeapInit+0xb4>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <prvHeapInit+0xb8>)
 80047ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a09      	ldr	r2, [pc, #36]	@ (80047f8 <prvHeapInit+0xbc>)
 80047d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047d4:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <prvHeapInit+0xc0>)
 80047d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047da:	601a      	str	r2, [r3, #0]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	2000044c 	.word	0x2000044c
 80047ec:	20001004 	.word	0x20001004
 80047f0:	2000100c 	.word	0x2000100c
 80047f4:	20001014 	.word	0x20001014
 80047f8:	20001010 	.word	0x20001010
 80047fc:	20001020 	.word	0x20001020

08004800 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <prvInsertBlockIntoFreeList+0xac>)
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e002      	b.n	8004814 <prvInsertBlockIntoFreeList+0x14>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d8f7      	bhi.n	800480e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d108      	bne.n	8004842 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	441a      	add	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d118      	bne.n	8004888 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <prvInsertBlockIntoFreeList+0xb0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d00d      	beq.n	800487e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e008      	b.n	8004890 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800487e:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e003      	b.n	8004890 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d002      	beq.n	800489e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20001004 	.word	0x20001004
 80048b0:	2000100c 	.word	0x2000100c

080048b4 <memset>:
 80048b4:	4402      	add	r2, r0
 80048b6:	4603      	mov	r3, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d100      	bne.n	80048be <memset+0xa>
 80048bc:	4770      	bx	lr
 80048be:	f803 1b01 	strb.w	r1, [r3], #1
 80048c2:	e7f9      	b.n	80048b8 <memset+0x4>

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4d0d      	ldr	r5, [pc, #52]	@ (80048fc <__libc_init_array+0x38>)
 80048c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004900 <__libc_init_array+0x3c>)
 80048ca:	1b64      	subs	r4, r4, r5
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	2600      	movs	r6, #0
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004904 <__libc_init_array+0x40>)
 80048d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004908 <__libc_init_array+0x44>)
 80048d8:	f000 f818 	bl	800490c <_init>
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	2600      	movs	r6, #0
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	08004a40 	.word	0x08004a40
 8004900:	08004a40 	.word	0x08004a40
 8004904:	08004a40 	.word	0x08004a40
 8004908:	08004a44 	.word	0x08004a44

0800490c <_init>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr

08004918 <_fini>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr
