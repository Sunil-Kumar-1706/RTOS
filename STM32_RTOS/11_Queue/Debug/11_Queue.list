
11_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007880  08007880  00008880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079bc  080079bc  000090d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079bc  080079bc  000089bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079c4  080079c4  000090d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079c8  080079c8  000089c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  080079cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  200000d0  08007a9c  000090d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001278  08007a9c  00009278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d14  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d9  00000000  00000000  0001ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d04  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002878e  00000000  00000000  00021df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e77  00000000  00000000  0004a582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f708a  00000000  00000000  0005e3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a00  00000000  00000000  001554c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00159ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007868 	.word	0x08007868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08007868 	.word	0x08007868

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	20000140 	.word	0x20000140

080005e0 <HAL_UART_RxCpltCallback>:
void read_rtc_info(char *task_msg);
void print_error_message(char *task_msg);

// UART receive complete callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == USART2) // Check if from USART2
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1e      	ldr	r2, [pc, #120]	@ (800066c <HAL_UART_RxCpltCallback+0x8c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d136      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x84>
    {
        HAL_UART_Transmit_IT(&huart2, &rx_byte, 1);   // Echo byte back
 80005f6:	2201      	movs	r2, #1
 80005f8:	491d      	ldr	r1, [pc, #116]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <HAL_UART_RxCpltCallback+0x94>)
 80005fc:	f003 f816 	bl	800362c <HAL_UART_Transmit_IT>
        cmd_buf[cmd_len++] = rx_byte;                 // Store in buffer
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <HAL_UART_RxCpltCallback+0x98>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	b2d1      	uxtb	r1, r2
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <HAL_UART_RxCpltCallback+0x98>)
 800060a:	7011      	strb	r1, [r2, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 8000610:	7819      	ldrb	r1, [r3, #0]
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <HAL_UART_RxCpltCallback+0x9c>)
 8000614:	5499      	strb	r1, [r3, r2]

        if (rx_byte == '\r')                          // If Enter pressed
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d112      	bne.n	8000644 <HAL_UART_RxCpltCallback+0x64>
        {
            cmd_len = 0;                              // Reset buffer
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <HAL_UART_RxCpltCallback+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
            vTaskNotifyGiveFromISR(taskhandle1, &xHigherPriorityTaskWoken); // Notify task1
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <HAL_UART_RxCpltCallback+0xa0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f005 ff3e 	bl	80064b0 <vTaskNotifyGiveFromISR>
            vTaskNotifyGiveFromISR(taskhandle2, &xHigherPriorityTaskWoken); // Notify task2
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_UART_RxCpltCallback+0xa4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f107 020c 	add.w	r2, r7, #12
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f005 ff36 	bl	80064b0 <vTaskNotifyGiveFromISR>
        }

        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);    // Enable next receive
 8000644:	2201      	movs	r2, #1
 8000646:	490a      	ldr	r1, [pc, #40]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <HAL_UART_RxCpltCallback+0x94>)
 800064a:	f003 f84d 	bl	80036e8 <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // Context switch if needed
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <HAL_UART_RxCpltCallback+0x84>
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_UART_RxCpltCallback+0xa8>)
 8000656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	f3bf 8f6f 	isb	sy
    }
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40004400 	.word	0x40004400
 8000670:	20000419 	.word	0x20000419
 8000674:	20000364 	.word	0x20000364
 8000678:	20000418 	.word	0x20000418
 800067c:	20000404 	.word	0x20000404
 8000680:	200003ec 	.word	0x200003ec
 8000684:	200003f0 	.word	0x200003f0
 8000688:	e000ed04 	.word	0xe000ed04

0800068c <uart_send>:

// Send string over UART (blocking)
void uart_send(char *s)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff fd9b 	bl	80001d0 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <uart_send+0x28>)
 80006a6:	f002 ff37 	bl	8003518 <HAL_UART_Transmit>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000364 	.word	0x20000364

080006b8 <task1_menu>:

// Task 1: show menu and wait for command
void task1_menu(void *p)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    char *data = menu;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <task1_menu+0x30>)
 80006c2:	60fb      	str	r3, [r7, #12]
    while(1)
    {
        xQueueSend(uart_q, &data, portMAX_DELAY); // Send menu
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <task1_menu+0x34>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2300      	movs	r3, #0
 80006ce:	f04f 32ff 	mov.w	r2, #4294967295
 80006d2:	f004 fd57 	bl	8005184 <xQueueGenericSend>
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY); // Wait for input
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	f005 fe8c 	bl	80063fc <xTaskNotifyWait>
        xQueueSend(uart_q, &data, portMAX_DELAY); // Send menu
 80006e4:	bf00      	nop
 80006e6:	e7ed      	b.n	80006c4 <task1_menu+0xc>
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000400 	.word	0x20000400

080006f0 <task2_command>:
    }
}

// Task 2: read command and forward it
void task2_command(void *p)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint8_t cmd_code = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
    cmd_t *new_cmd;

    while(1)
    {
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);      // Wait for command
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2000      	movs	r0, #0
 8000706:	f005 fe79 	bl	80063fc <xTaskNotifyWait>
        new_cmd = (cmd_t*)pvPortMalloc(sizeof(cmd_t));// Allocate memory
 800070a:	200b      	movs	r0, #11
 800070c:	f006 fa1e 	bl	8006b4c <pvPortMalloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60bb      	str	r3, [r7, #8]

        taskENTER_CRITICAL();                         // Read safely
 8000714:	f006 f8f8 	bl	8006908 <vPortEnterCritical>
        cmd_code = getCommandCode(cmd_buf);           // Get code
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <task2_command+0x54>)
 800071a:	f000 f871 	bl	8000800 <getCommandCode>
 800071e:	4603      	mov	r3, r0
 8000720:	73fb      	strb	r3, [r7, #15]
        new_cmd->cmd_no = cmd_code;                   // Store code
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	7bfa      	ldrb	r2, [r7, #15]
 8000726:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8000728:	f006 f920 	bl	800696c <vPortExitCritical>

        xQueueSend(cmd_q, &new_cmd, portMAX_DELAY);   // Send to queue
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <task2_command+0x58>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2300      	movs	r3, #0
 8000736:	f04f 32ff 	mov.w	r2, #4294967295
 800073a:	f004 fd23 	bl	8005184 <xQueueGenericSend>
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);      // Wait for command
 800073e:	bf00      	nop
 8000740:	e7dc      	b.n	80006fc <task2_command+0xc>
 8000742:	bf00      	nop
 8000744:	20000404 	.word	0x20000404
 8000748:	200003fc 	.word	0x200003fc

0800074c <task3_command_process>:
    }
}

// Task 3: process commands
void task3_command_process(void *p)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	@ 0x40
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    cmd_t *new_cmd;
    char task_msg[50];

    while(1)
    {
        xQueueReceive(cmd_q, (void*)&new_cmd, portMAX_DELAY); // Wait for command
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <task3_command_process+0x80>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800075c:	f04f 32ff 	mov.w	r2, #4294967295
 8000760:	4618      	mov	r0, r3
 8000762:	f004 fe11 	bl	8005388 <xQueueReceive>

        if(new_cmd->cmd_no == LED_ON)
 8000766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d102      	bne.n	8000774 <task3_command_process+0x28>
        	make_led_on();
 800076e:	f000 f855 	bl	800081c <make_led_on>
 8000772:	e026      	b.n	80007c2 <task3_command_process+0x76>
        else if(new_cmd->cmd_no == LED_OFF)
 8000774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d102      	bne.n	8000782 <task3_command_process+0x36>
        	make_led_off();
 800077c:	f000 f858 	bl	8000830 <make_led_off>
 8000780:	e01f      	b.n	80007c2 <task3_command_process+0x76>
        else if(new_cmd->cmd_no == LED_TOGGLE)
 8000782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d102      	bne.n	8000790 <task3_command_process+0x44>
        	led_toggle();
 800078a:	f000 f85b 	bl	8000844 <led_toggle>
 800078e:	e018      	b.n	80007c2 <task3_command_process+0x76>
        else if(new_cmd->cmd_no == LED_READ_STATUS)
 8000790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d105      	bne.n	80007a4 <task3_command_process+0x58>
        	read_led_status(task_msg);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f85b 	bl	8000858 <read_led_status>
 80007a2:	e00e      	b.n	80007c2 <task3_command_process+0x76>
        else if(new_cmd->cmd_no == RTC_READ)
 80007a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	d105      	bne.n	80007b8 <task3_command_process+0x6c>
        	read_rtc_info(task_msg);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f871 	bl	8000898 <read_rtc_info>
 80007b6:	e004      	b.n	80007c2 <task3_command_process+0x76>
        else
        	print_error_message(task_msg);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f8d3 	bl	8000968 <print_error_message>

        vPortFree(new_cmd); // Free memory
 80007c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 fa8f 	bl	8006ce8 <vPortFree>
        xQueueReceive(cmd_q, (void*)&new_cmd, portMAX_DELAY); // Wait for command
 80007ca:	e7c3      	b.n	8000754 <task3_command_process+0x8>
 80007cc:	200003fc 	.word	0x200003fc

080007d0 <task4_uart_transmit>:
    }
}

// Task 4: send UART messages
void task4_uart_transmit(void *p)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    char *data = NULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
    while(1)
    {
        xQueueReceive(uart_q, &data, portMAX_DELAY); // Wait for data
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <task4_uart_transmit+0x2c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f107 010c 	add.w	r1, r7, #12
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fdcd 	bl	8005388 <xQueueReceive>
        uart_send(data);                             // Send over UART
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff4b 	bl	800068c <uart_send>
        xQueueReceive(uart_q, &data, portMAX_DELAY); // Wait for data
 80007f6:	bf00      	nop
 80007f8:	e7f0      	b.n	80007dc <task4_uart_transmit+0xc>
 80007fa:	bf00      	nop
 80007fc:	20000400 	.word	0x20000400

08000800 <getCommandCode>:
    }
}

// Extract command code (ASCII to number)
uint8_t getCommandCode(uint8_t *buffer)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    return buffer[0] - 48;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3b30      	subs	r3, #48	@ 0x30
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <make_led_on>:

// Turn LED on (PA5)
void make_led_on(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 ffb0 	bl	800178c <HAL_GPIO_WritePin>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <make_led_off>:

// Turn LED off (PA5)
void make_led_off(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2120      	movs	r1, #32
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 ffa6 	bl	800178c <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <led_toggle>:

// Toggle LED
void led_toggle(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 ffb5 	bl	80017bc <HAL_GPIO_TogglePin>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <read_led_status>:

// Read LED status
void read_led_status(char *task_msg)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    sprintf(task_msg , "\r\nLED status is : %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 8000860:	687c      	ldr	r4, [r7, #4]
 8000862:	2120      	movs	r1, #32
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 ff78 	bl	800175c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4907      	ldr	r1, [pc, #28]	@ (8000890 <read_led_status+0x38>)
 8000872:	4620      	mov	r0, r4
 8000874:	f006 fb58 	bl	8006f28 <siprintf>
    xQueueSend(uart_q,&task_msg,portMAX_DELAY);
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <read_led_status+0x3c>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	1d39      	adds	r1, r7, #4
 800087e:	2300      	movs	r3, #0
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	f004 fc7e 	bl	8005184 <xQueueGenericSend>
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	08007880 	.word	0x08007880
 8000894:	20000400 	.word	0x20000400

08000898 <read_rtc_info>:

// Read RTC info
void read_rtc_info(char *task_msg)
{
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08d      	sub	sp, #52	@ 0x34
 800089c:	af04      	add	r7, sp, #16
 800089e:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]

    if ((RTC->ISR & RTC_ISR_INITS) == 0) // If RTC not set
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <read_rtc_info+0xc0>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d11f      	bne.n	8000900 <read_rtc_info+0x68>
    {
        sTime.Hours = 5; sTime.Minutes = 15; sTime.Seconds = 30;
 80008c0:	2305      	movs	r3, #5
 80008c2:	733b      	strb	r3, [r7, #12]
 80008c4:	230f      	movs	r3, #15
 80008c6:	737b      	strb	r3, [r7, #13]
 80008c8:	231e      	movs	r3, #30
 80008ca:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	481f      	ldr	r0, [pc, #124]	@ (800095c <read_rtc_info+0xc4>)
 80008de:	f002 fb2f 	bl	8002f40 <HAL_RTC_SetTime>

        sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80008e2:	2304      	movs	r3, #4
 80008e4:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_SEPTEMBER;
 80008e6:	2309      	movs	r3, #9
 80008e8:	727b      	strb	r3, [r7, #9]
        sDate.Date = 11;
 80008ea:	230b      	movs	r3, #11
 80008ec:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 80008ee:	2319      	movs	r3, #25
 80008f0:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <read_rtc_info+0xc4>)
 80008fc:	f002 fc19 	bl	8003132 <HAL_RTC_SetDate>
    }

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // Get time
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4814      	ldr	r0, [pc, #80]	@ (800095c <read_rtc_info+0xc4>)
 800090a:	f002 fbb6 	bl	800307a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // Get date
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	@ (800095c <read_rtc_info+0xc4>)
 8000918:	f002 fc92 	bl	8003240 <HAL_RTC_GetDate>

    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 800091c:	6878      	ldr	r0, [r7, #4]
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 800091e:	7b3b      	ldrb	r3, [r7, #12]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000920:	461d      	mov	r5, r3
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000922:	7b7b      	ldrb	r3, [r7, #13]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000924:	461e      	mov	r6, r3
              sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000926:	7bbb      	ldrb	r3, [r7, #14]
              sDate.Date, sDate.Month, sDate.Year);
 8000928:	7aba      	ldrb	r2, [r7, #10]
 800092a:	7a79      	ldrb	r1, [r7, #9]
 800092c:	7afc      	ldrb	r4, [r7, #11]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 800092e:	9403      	str	r4, [sp, #12]
 8000930:	9102      	str	r1, [sp, #8]
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	4633      	mov	r3, r6
 8000938:	462a      	mov	r2, r5
 800093a:	4909      	ldr	r1, [pc, #36]	@ (8000960 <read_rtc_info+0xc8>)
 800093c:	f006 faf4 	bl	8006f28 <siprintf>

    xQueueSend(uart_q, &task_msg, portMAX_DELAY);
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <read_rtc_info+0xcc>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	1d39      	adds	r1, r7, #4
 8000946:	2300      	movs	r3, #0
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	f004 fc1a 	bl	8005184 <xQueueGenericSend>
}
 8000950:	bf00      	nop
 8000952:	3724      	adds	r7, #36	@ 0x24
 8000954:	46bd      	mov	sp, r7
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	40002800 	.word	0x40002800
 800095c:	20000340 	.word	0x20000340
 8000960:	08007898 	.word	0x08007898
 8000964:	20000400 	.word	0x20000400

08000968 <print_error_message>:

// Print error
void print_error_message(char *task_msg)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    sprintf(task_msg, "\r\nInvalid command received\r\n");
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4908      	ldr	r1, [pc, #32]	@ (8000994 <print_error_message+0x2c>)
 8000974:	4618      	mov	r0, r3
 8000976:	f006 fad7 	bl	8006f28 <siprintf>
    xQueueSend(uart_q, &task_msg, portMAX_DELAY);
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <print_error_message+0x30>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	1d39      	adds	r1, r7, #4
 8000980:	2300      	movs	r3, #0
 8000982:	f04f 32ff 	mov.w	r2, #4294967295
 8000986:	f004 fbfd 	bl	8005184 <xQueueGenericSend>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	080078c8 	.word	0x080078c8
 8000998:	20000400 	.word	0x20000400

0800099c <main>:

// Main function
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af02      	add	r7, sp, #8
  HAL_Init();                    // Initialize HAL
 80009a2:	f000 fb25 	bl	8000ff0 <HAL_Init>
  SystemClock_Config();          // Configure clock
 80009a6:	f000 f875 	bl	8000a94 <SystemClock_Config>
  MX_GPIO_Init();                // Init GPIO
 80009aa:	f000 f953 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();         // Init UART2
 80009ae:	f000 f921 	bl	8000bf4 <MX_USART2_UART_Init>
  MX_RTC_Init();                 // Init RTC
 80009b2:	f000 f8c3 	bl	8000b3c <MX_RTC_Init>

  // Create queues
  cmd_q = xQueueCreate(10, sizeof(cmd_t));
 80009b6:	2200      	movs	r2, #0
 80009b8:	210b      	movs	r1, #11
 80009ba:	200a      	movs	r0, #10
 80009bc:	f004 fb88 	bl	80050d0 <xQueueGenericCreate>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <main+0xb4>)
 80009c4:	6013      	str	r3, [r2, #0]
  uart_q = xQueueCreate(10, 8);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	200a      	movs	r0, #10
 80009cc:	f004 fb80 	bl	80050d0 <xQueueGenericCreate>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4a20      	ldr	r2, [pc, #128]	@ (8000a54 <main+0xb8>)
 80009d4:	6013      	str	r3, [r2, #0]

  if((cmd_q != NULL) && (uart_q != NULL))
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <main+0xb4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d031      	beq.n	8000a42 <main+0xa6>
 80009de:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <main+0xb8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d02d      	beq.n	8000a42 <main+0xa6>
  {
      // Create tasks
      xTaskCreate(task1_menu, "MENU", configMINIMAL_STACK_SIZE, NULL, 1, &taskhandle1);
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <main+0xbc>)
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	2280      	movs	r2, #128	@ 0x80
 80009f2:	491a      	ldr	r1, [pc, #104]	@ (8000a5c <main+0xc0>)
 80009f4:	481a      	ldr	r0, [pc, #104]	@ (8000a60 <main+0xc4>)
 80009f6:	f004 ff19 	bl	800582c <xTaskCreate>
      xTaskCreate(task2_command, "command_handle", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle2);
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <main+0xc8>)
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	2302      	movs	r3, #2
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	4918      	ldr	r1, [pc, #96]	@ (8000a68 <main+0xcc>)
 8000a08:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <main+0xd0>)
 8000a0a:	f004 ff0f 	bl	800582c <xTaskCreate>
      xTaskCreate(task3_command_process, "command_process", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle3);
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <main+0xd4>)
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	2302      	movs	r3, #2
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	4916      	ldr	r1, [pc, #88]	@ (8000a74 <main+0xd8>)
 8000a1c:	4816      	ldr	r0, [pc, #88]	@ (8000a78 <main+0xdc>)
 8000a1e:	f004 ff05 	bl	800582c <xTaskCreate>
      xTaskCreate(task4_uart_transmit, "uart_transmit", configMINIMAL_STACK_SIZE, NULL, 2, &taskhandle4);
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <main+0xe0>)
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2302      	movs	r3, #2
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2280      	movs	r2, #128	@ 0x80
 8000a2e:	4914      	ldr	r1, [pc, #80]	@ (8000a80 <main+0xe4>)
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <main+0xe8>)
 8000a32:	f004 fefb 	bl	800582c <xTaskCreate>

      HAL_UART_Receive_IT(&huart2, &rx_byte, 1); // Start UART RX
 8000a36:	2201      	movs	r2, #1
 8000a38:	4913      	ldr	r1, [pc, #76]	@ (8000a88 <main+0xec>)
 8000a3a:	4814      	ldr	r0, [pc, #80]	@ (8000a8c <main+0xf0>)
 8000a3c:	f002 fe54 	bl	80036e8 <HAL_UART_Receive_IT>
 8000a40:	e002      	b.n	8000a48 <main+0xac>
  }
  else
  {
      uart_send("QUEUE creation failed\r\n"); // Error if queues not created
 8000a42:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <main+0xf4>)
 8000a44:	f7ff fe22 	bl	800068c <uart_send>
  }

  osKernelStart();  // Start RTOS scheduler
 8000a48:	f004 fa1c 	bl	8004e84 <osKernelStart>

  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <main+0xb0>
 8000a50:	200003fc 	.word	0x200003fc
 8000a54:	20000400 	.word	0x20000400
 8000a58:	200003ec 	.word	0x200003ec
 8000a5c:	080078e8 	.word	0x080078e8
 8000a60:	080006b9 	.word	0x080006b9
 8000a64:	200003f0 	.word	0x200003f0
 8000a68:	080078f0 	.word	0x080078f0
 8000a6c:	080006f1 	.word	0x080006f1
 8000a70:	200003f4 	.word	0x200003f4
 8000a74:	08007900 	.word	0x08007900
 8000a78:	0800074d 	.word	0x0800074d
 8000a7c:	200003f8 	.word	0x200003f8
 8000a80:	08007910 	.word	0x08007910
 8000a84:	080007d1 	.word	0x080007d1
 8000a88:	20000419 	.word	0x20000419
 8000a8c:	20000364 	.word	0x20000364
 8000a90:	08007920 	.word	0x08007920

08000a94 <SystemClock_Config>:
  }      // Should never reach here
}

// System clock configuration
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	@ 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	@ 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 fa62 	bl	8006f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aba:	f000 fea7 	bl	800180c <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
    Error_Handler();
 8000ac4:	f000 f92c 	bl	8000d20 <Error_Handler>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aea:	2307      	movs	r3, #7
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fedc 	bl	80018b8 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x76>
    Error_Handler();
 8000b06:	f000 f90b 	bl	8000d20 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2104      	movs	r1, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 faa4 	bl	8002070 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x9e>
    Error_Handler();
 8000b2e:	f000 f8f7 	bl	8000d20 <Error_Handler>
}
 8000b32:	bf00      	nop
 8000b34:	3758      	adds	r7, #88	@ 0x58
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_RTC_Init>:

// RTC initialization
static void MX_RTC_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]

  hrtc.Instance = RTC;
 8000b54:	4b25      	ldr	r3, [pc, #148]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b56:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <MX_RTC_Init+0xb4>)
 8000b58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b60:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b62:	227f      	movs	r2, #127	@ 0x7f
 8000b64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b68:	22ff      	movs	r2, #255	@ 0xff
 8000b6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) Error_Handler();
 8000b84:	4819      	ldr	r0, [pc, #100]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000b86:	f002 f953 	bl	8002e30 <HAL_RTC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_RTC_Init+0x58>
 8000b90:	f000 f8c6 	bl	8000d20 <Error_Handler>

  sTime.Hours = 0x0; sTime.Minutes = 0x0; sTime.Seconds = 0x0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	713b      	strb	r3, [r7, #4]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	717b      	strb	r3, [r7, #5]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) Error_Handler();
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2201      	movs	r2, #1
 8000bac:	4619      	mov	r1, r3
 8000bae:	480f      	ldr	r0, [pc, #60]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000bb0:	f002 f9c6 	bl	8002f40 <HAL_RTC_SetTime>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_RTC_Init+0x82>
 8000bba:	f000 f8b1 	bl	8000d20 <Error_Handler>

  sDate.WeekDay = RTC_WEEKDAY_MONDAY; sDate.Month = RTC_MONTH_JANUARY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	703b      	strb	r3, [r7, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1; sDate.Year = 0x0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	70bb      	strb	r3, [r7, #2]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) Error_Handler();
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_RTC_Init+0xb0>)
 8000bd6:	f002 faac 	bl	8003132 <HAL_RTC_SetDate>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_RTC_Init+0xa8>
 8000be0:	f000 f89e 	bl	8000d20 <Error_Handler>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000340 	.word	0x20000340
 8000bf0:	40002800 	.word	0x40002800

08000bf4 <MX_USART2_UART_Init>:

// UART2 initialization
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART2_UART_Init+0x58>)
 8000c38:	f002 fc20 	bl	800347c <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x52>
 8000c42:	f000 f86d 	bl	8000d20 <Error_Handler>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000364 	.word	0x20000364
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:

// GPIO initialization
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b25      	ldr	r3, [pc, #148]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	4a24      	ldr	r2, [pc, #144]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_GPIO_Init+0xc4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd2:	f000 fd5b 	bl	800178c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cdc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <MX_GPIO_Init+0xc8>)
 8000cee:	f000 fb8b 	bl	8001408 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f000 fb7c 	bl	8001408 <HAL_GPIO_Init>
}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	@ 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000800 	.word	0x48000800

08000d20 <Error_Handler>:
  for(;;) osDelay(1);
}

// Error handler
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  __disable_irq();
  while (1) {}
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210f      	movs	r1, #15
 8000d66:	f06f 0001 	mvn.w	r0, #1
 8000d6a:	f000 fa98 	bl	800129e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0a4      	sub	sp, #144	@ 0x90
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2288      	movs	r2, #136	@ 0x88
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f006 f8ed 	bl	8006f6c <memset>
  if(hrtc->Instance==RTC)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <HAL_RTC_MspInit+0x5c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d118      	bne.n	8000dce <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fb82 	bl	80024b8 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000dba:	f7ff ffb1 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_RTC_MspInit+0x60>)
 8000dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000dc4:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <HAL_RTC_MspInit+0x60>)
 8000dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000dce:	bf00      	nop
 8000dd0:	3790      	adds	r7, #144	@ 0x90
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40002800 	.word	0x40002800
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ac      	sub	sp, #176	@ 0xb0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2288      	movs	r2, #136	@ 0x88
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 f8b3 	bl	8006f6c <memset>
  if(huart->Instance==USART2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a25      	ldr	r2, [pc, #148]	@ (8000ea0 <HAL_UART_MspInit+0xc0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d143      	bne.n	8000e98 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fb4b 	bl	80024b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e28:	f7ff ff7a 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e30:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a16      	ldr	r2, [pc, #88]	@ (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e74:	2307      	movs	r3, #7
 8000e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f000 fac0 	bl	8001408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	2026      	movs	r0, #38	@ 0x26
 8000e8e:	f000 fa06 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e92:	2026      	movs	r0, #38	@ 0x26
 8000e94:	f000 fa1f 	bl	80012d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	37b0      	adds	r7, #176	@ 0xb0
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f8e1 	bl	80010a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ee6:	f005 f9e3 	bl	80062b0 <xTaskGetSchedulerState>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d001      	beq.n	8000ef4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ef0:	f005 fd9a 	bl	8006a28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <USART2_IRQHandler+0x10>)
 8000efe:	f002 fc3f 	bl	8003780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000364 	.word	0x20000364

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f006 f81e 	bl	8006f7c <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20018000 	.word	0x20018000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	2000041c 	.word	0x2000041c
 8000f74:	20001278 	.word	0x20001278

08000f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa0:	f7ff ffea 	bl	8000f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	@ (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f005 ffdd 	bl	8006f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f7ff fce5 	bl	800099c <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000fe0:	080079cc 	.word	0x080079cc
  ldr r2, =_sbss
 8000fe4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000fe8:	20001278 	.word	0x20001278

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_Init+0x3c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <HAL_Init+0x3c>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001004:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f93e 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100c:	200f      	movs	r0, #15
 800100e:	f000 f80f 	bl	8001030 <HAL_InitTick>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	e001      	b.n	8001022 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101e:	f7ff fe85 	bl	8000d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001022:	79fb      	ldrb	r3, [r7, #7]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <HAL_InitTick+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d023      	beq.n	800108c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_InitTick+0x70>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f949 	bl	80012f2 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10f      	bne.n	8001086 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d809      	bhi.n	8001080 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f913 	bl	800129e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_InitTick+0x74>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e007      	b.n	8001090 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e004      	b.n	8001090 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e001      	b.n	8001090 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000078 	.word	0x20000078
 80010a0:	20000070 	.word	0x20000070
 80010a4:	20000074 	.word	0x20000074

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000078 	.word	0x20000078
 80010cc:	20000420 	.word	0x20000420

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000420 	.word	0x20000420

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	@ (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff3e 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff8e 	bl	80011dc <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff31 	bl	800114c <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d008      	beq.n	8001334 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e022      	b.n	800137a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020e 	bic.w	r2, r2, #14
 8001342:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f003 021c 	and.w	r2, r3, #28
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d005      	beq.n	80013aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e029      	b.n	80013fe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 020e 	bic.w	r2, r2, #14
 80013b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f003 021c 	and.w	r2, r3, #28
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	4798      	blx	r3
    }
  }
  return status;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e17f      	b.n	8001718 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8171 	beq.w	8001712 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d005      	beq.n	8001448 <HAL_GPIO_Init+0x40>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d130      	bne.n	80014aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147e:	2201      	movs	r2, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 0201 	and.w	r2, r3, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d118      	bne.n	80014e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	6939      	ldr	r1, [r7, #16]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ac 	beq.w	8001712 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001738 <HAL_GPIO_Init+0x330>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	4a5e      	ldr	r2, [pc, #376]	@ (8001738 <HAL_GPIO_Init+0x330>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001738 <HAL_GPIO_Init+0x330>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d2:	4a5a      	ldr	r2, [pc, #360]	@ (800173c <HAL_GPIO_Init+0x334>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x242>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4f      	ldr	r2, [pc, #316]	@ (8001740 <HAL_GPIO_Init+0x338>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x23e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4e      	ldr	r2, [pc, #312]	@ (8001744 <HAL_GPIO_Init+0x33c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4d      	ldr	r2, [pc, #308]	@ (8001748 <HAL_GPIO_Init+0x340>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x236>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4c      	ldr	r2, [pc, #304]	@ (800174c <HAL_GPIO_Init+0x344>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x232>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4b      	ldr	r2, [pc, #300]	@ (8001750 <HAL_GPIO_Init+0x348>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x22e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4a      	ldr	r2, [pc, #296]	@ (8001754 <HAL_GPIO_Init+0x34c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x22a>
 800162e:	2306      	movs	r3, #6
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001632:	2307      	movs	r3, #7
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x244>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x244>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x244>
 800164a:	2300      	movs	r3, #0
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165c:	4937      	ldr	r1, [pc, #220]	@ (800173c <HAL_GPIO_Init+0x334>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166a:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_GPIO_Init+0x350>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168e:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <HAL_GPIO_Init+0x350>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001694:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <HAL_GPIO_Init+0x350>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b8:	4a27      	ldr	r2, [pc, #156]	@ (8001758 <HAL_GPIO_Init+0x350>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016be:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <HAL_GPIO_Init+0x350>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001758 <HAL_GPIO_Init+0x350>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_GPIO_Init+0x350>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170c:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <HAL_GPIO_Init+0x350>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ae78 	bne.w	8001418 <HAL_GPIO_Init+0x10>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001000 	.word	0x48001000
 8001750:	48001400 	.word	0x48001400
 8001754:	48001800 	.word	0x48001800
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	041a      	lsls	r2, r3, #16
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43d9      	mvns	r1, r3
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	400b      	ands	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <HAL_PWREx_GetVoltageRange+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000

0800180c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800181a:	d130      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800181c:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001828:	d038      	beq.n	800189c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001832:	4a1e      	ldr	r2, [pc, #120]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2232      	movs	r2, #50	@ 0x32
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9b      	lsrs	r3, r3, #18
 800184c:	3301      	adds	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001850:	e002      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3b01      	subs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001864:	d102      	bne.n	800186c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f2      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001878:	d110      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e00f      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800188a:	d007      	beq.n	800189c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800188c:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001894:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40007000 	.word	0x40007000
 80018b0:	20000070 	.word	0x20000070
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e3ca      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b97      	ldr	r3, [pc, #604]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d4:	4b94      	ldr	r3, [pc, #592]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80e4 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x4a>
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	f040 808b 	bne.w	8001a10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	f040 8087 	bne.w	8001a10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001902:	4b89      	ldr	r3, [pc, #548]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e3a2      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1a      	ldr	r2, [r3, #32]
 800191e:	4b82      	ldr	r3, [pc, #520]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_RCC_OscConfig+0x7c>
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001932:	e005      	b.n	8001940 <HAL_RCC_OscConfig+0x88>
 8001934:	4b7c      	ldr	r3, [pc, #496]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001940:	4293      	cmp	r3, r2
 8001942:	d223      	bcs.n	800198c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fd55 	bl	80023f8 <RCC_SetFlashLatencyFromMSIRange>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e383      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001958:	4b73      	ldr	r3, [pc, #460]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a72      	ldr	r2, [pc, #456]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b70      	ldr	r3, [pc, #448]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	496d      	ldr	r1, [pc, #436]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001976:	4b6c      	ldr	r3, [pc, #432]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4968      	ldr	r1, [pc, #416]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
 800198a:	e025      	b.n	80019d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198c:	4b66      	ldr	r3, [pc, #408]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a65      	ldr	r2, [pc, #404]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b63      	ldr	r3, [pc, #396]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4960      	ldr	r1, [pc, #384]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	495b      	ldr	r1, [pc, #364]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fd15 	bl	80023f8 <RCC_SetFlashLatencyFromMSIRange>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e343      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d8:	f000 fc4a 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	4950      	ldr	r1, [pc, #320]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001b30 <HAL_RCC_OscConfig+0x278>)
 80019f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fb17 	bl	8001030 <HAL_InitTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d052      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	e327      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d032      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a18:	4b43      	ldr	r3, [pc, #268]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a42      	ldr	r2, [pc, #264]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fb54 	bl	80010d0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb50 	bl	80010d0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e310      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4a:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a36      	ldr	r2, [pc, #216]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4931      	ldr	r1, [pc, #196]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a68:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	492c      	ldr	r1, [pc, #176]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e01a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a29      	ldr	r2, [pc, #164]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fb21 	bl	80010d0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a92:	f7ff fb1d 	bl	80010d0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e2dd      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1da>
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d074      	beq.n	8001baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x21a>
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d10e      	bne.n	8001aea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d064      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d160      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e2ba      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x24a>
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e026      	b.n	8001b50 <HAL_RCC_OscConfig+0x298>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b0a:	d115      	bne.n	8001b38 <HAL_RCC_OscConfig+0x280>
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a02      	ldr	r2, [pc, #8]	@ (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x298>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08007940 	.word	0x08007940
 8001b30:	20000070 	.word	0x20000070
 8001b34:	20000074 	.word	0x20000074
 8001b38:	4ba0      	ldr	r3, [pc, #640]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a9f      	ldr	r2, [pc, #636]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b9d      	ldr	r3, [pc, #628]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a9c      	ldr	r2, [pc, #624]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff faba 	bl	80010d0 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fab6 	bl	80010d0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e276      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	4b92      	ldr	r3, [pc, #584]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2a8>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff faa6 	bl	80010d0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff faa2 	bl	80010d0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e262      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9a:	4b88      	ldr	r3, [pc, #544]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2d0>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d060      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x310>
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d116      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc8:	4b7c      	ldr	r3, [pc, #496]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x328>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e23f      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b76      	ldr	r3, [pc, #472]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	4973      	ldr	r1, [pc, #460]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf4:	e040      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d023      	beq.n	8001c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6e      	ldr	r2, [pc, #440]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fa61 	bl	80010d0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fa5d 	bl	80010d0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e21d      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	4b65      	ldr	r3, [pc, #404]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b62      	ldr	r3, [pc, #392]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	495f      	ldr	r1, [pc, #380]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	e018      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b5d      	ldr	r3, [pc, #372]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fa3d 	bl	80010d0 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fa39 	bl	80010d0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1f9      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c92:	4a4a      	ldr	r2, [pc, #296]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fa18 	bl	80010d0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fa14 	bl	80010d0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1d4      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0ef      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x3ec>
 8001cc4:	e01b      	b.n	8001cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f9fb 	bl	80010d0 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cde:	f7ff f9f7 	bl	80010d0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1b7      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf0:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ef      	bne.n	8001cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a6 	beq.w	8001e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	4a26      	ldr	r2, [pc, #152]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d118      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d44:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d50:	f7ff f9be 	bl	80010d0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7ff f9ba 	bl	80010d0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e17a      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4d8>
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d84:	4a0d      	ldr	r2, [pc, #52]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d8e:	e029      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d115      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x50c>
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9e:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dae:	4a03      	ldr	r2, [pc, #12]	@ (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	4b9c      	ldr	r3, [pc, #624]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dca:	4a9b      	ldr	r2, [pc, #620]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dd4:	4b98      	ldr	r3, [pc, #608]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dda:	4a97      	ldr	r2, [pc, #604]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d016      	beq.n	8001e1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f970 	bl	80010d0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff f96c 	bl	80010d0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e12a      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ed      	beq.n	8001df4 <HAL_RCC_OscConfig+0x53c>
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f959 	bl	80010d0 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff f955 	bl	80010d0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e113      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	4b7f      	ldr	r3, [pc, #508]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ed      	bne.n	8001e22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	4b7a      	ldr	r3, [pc, #488]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a79      	ldr	r2, [pc, #484]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80fe 	beq.w	800205e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	f040 80d0 	bne.w	800200c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e6c:	4b72      	ldr	r3, [pc, #456]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d130      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d127      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11f      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001eac:	2a07      	cmp	r2, #7
 8001eae:	bf14      	ite	ne
 8001eb0:	2201      	movne	r2, #1
 8001eb2:	2200      	moveq	r2, #0
 8001eb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d113      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d06e      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d069      	beq.n	8001fbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee8:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ef4:	4b50      	ldr	r3, [pc, #320]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0ad      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f04:	4b4c      	ldr	r3, [pc, #304]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f10:	f7ff f8de 	bl	80010d0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f8da 	bl	80010d0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e09a      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2a:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f36:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b40      	ldr	r3, [pc, #256]	@ (800203c <HAL_RCC_OscConfig+0x784>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f46:	3a01      	subs	r2, #1
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f50:	0212      	lsls	r2, r2, #8
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f58:	0852      	lsrs	r2, r2, #1
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	0552      	lsls	r2, r2, #21
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f64:	0852      	lsrs	r2, r2, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0652      	lsls	r2, r2, #25
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f70:	0912      	lsrs	r2, r2, #4
 8001f72:	0452      	lsls	r2, r2, #17
 8001f74:	430a      	orrs	r2, r1
 8001f76:	4930      	ldr	r1, [pc, #192]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2d      	ldr	r2, [pc, #180]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f88:	4b2b      	ldr	r3, [pc, #172]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f94:	f7ff f89c 	bl	80010d0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f898 	bl	80010d0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e058      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fba:	e050      	b.n	800205e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e04f      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d148      	bne.n	800205e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd8:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe4:	f7ff f874 	bl	80010d0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f870 	bl	80010d0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e030      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x734>
 800200a:	e028      	b.n	800205e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d023      	beq.n	800205a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_RCC_OscConfig+0x780>)
 8002018:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f857 	bl	80010d0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e00c      	b.n	8002040 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f853 	bl	80010d0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d905      	bls.n	8002040 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
 8002038:	40021000 	.word	0x40021000
 800203c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_RCC_OscConfig+0x7b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ec      	bne.n	8002026 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4905      	ldr	r1, [pc, #20]	@ (8002068 <HAL_RCC_OscConfig+0x7b0>)
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_OscConfig+0x7b4>)
 8002054:	4013      	ands	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
 8002058:	e001      	b.n	800205e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	feeefffc 	.word	0xfeeefffc

08002070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0e7      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b75      	ldr	r3, [pc, #468]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b72      	ldr	r3, [pc, #456]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4970      	ldr	r1, [pc, #448]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b6e      	ldr	r3, [pc, #440]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0cf      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4b66      	ldr	r3, [pc, #408]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d908      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4960      	ldr	r1, [pc, #384]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04c      	beq.n	8002188 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d121      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0a6      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	4b54      	ldr	r3, [pc, #336]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e09a      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002126:	4b4e      	ldr	r3, [pc, #312]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e08e      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002136:	4b4a      	ldr	r3, [pc, #296]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e086      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b46      	ldr	r3, [pc, #280]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4943      	ldr	r1, [pc, #268]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002158:	f7fe ffba 	bl	80010d0 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe ffb6 	bl	80010d0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e06e      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d010      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d208      	bcs.n	80021b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	492b      	ldr	r1, [pc, #172]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b6:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d210      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 0207 	bic.w	r2, r3, #7
 80021cc:	4923      	ldr	r1, [pc, #140]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d4:	4b21      	ldr	r3, [pc, #132]	@ (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e036      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4918      	ldr	r1, [pc, #96]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002210:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4910      	ldr	r1, [pc, #64]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002224:	f000 f824 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	490b      	ldr	r1, [pc, #44]	@ (8002264 <HAL_RCC_ClockConfig+0x1f4>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x1f8>)
 8002242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_RCC_ClockConfig+0x1fc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fef1 	bl	8001030 <HAL_InitTick>
 800224e:	4603      	mov	r3, r0
 8002250:	72fb      	strb	r3, [r7, #11]

  return status;
 8002252:	7afb      	ldrb	r3, [r7, #11]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	08007940 	.word	0x08007940
 8002268:	20000070 	.word	0x20000070
 800226c:	20000074 	.word	0x20000074

08002270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227e:	4b3e      	ldr	r3, [pc, #248]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d121      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d11e      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022a4:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e005      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022cc:	4a2b      	ldr	r2, [pc, #172]	@ (800237c <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10d      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e004      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f4:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x114>)
 80022f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d134      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0xa6>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d003      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0xac>
 8002314:	e005      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x110>)
 8002318:	617b      	str	r3, [r7, #20]
      break;
 800231a:	e005      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x114>)
 800231e:	617b      	str	r3, [r7, #20]
      break;
 8002320:	e002      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	3301      	adds	r3, #1
 8002334:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	0e5b      	lsrs	r3, r3, #25
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	3301      	adds	r3, #1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002368:	69bb      	ldr	r3, [r7, #24]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	08007958 	.word	0x08007958
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000070 	.word	0x20000070

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023a4:	f7ff fff0 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4904      	ldr	r1, [pc, #16]	@ (80023c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08007950 	.word	0x08007950

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023d0:	f7ff ffda 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0adb      	lsrs	r3, r3, #11
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4904      	ldr	r1, [pc, #16]	@ (80023f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08007950 	.word	0x08007950

080023f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002404:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002410:	f7ff f9ee 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
 8002414:	6178      	str	r0, [r7, #20]
 8002416:	e014      	b.n	8002442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	4a24      	ldr	r2, [pc, #144]	@ (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002422:	6593      	str	r3, [r2, #88]	@ 0x58
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002430:	f7ff f9de 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
 8002434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002448:	d10b      	bne.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b80      	cmp	r3, #128	@ 0x80
 800244e:	d919      	bls.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2ba0      	cmp	r3, #160	@ 0xa0
 8002454:	d902      	bls.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002456:	2302      	movs	r3, #2
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e013      	b.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800245c:	2301      	movs	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e010      	b.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b80      	cmp	r3, #128	@ 0x80
 8002466:	d902      	bls.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002468:	2303      	movs	r3, #3
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e00a      	b.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	@ 0x80
 8002472:	d102      	bne.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e004      	b.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b70      	cmp	r3, #112	@ 0x70
 800247e:	d101      	bne.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002480:	2301      	movs	r3, #1
 8002482:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 0207 	bic.w	r2, r3, #7
 800248c:	4909      	ldr	r1, [pc, #36]	@ (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40022000 	.word	0x40022000

080024b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c0:	2300      	movs	r3, #0
 80024c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c4:	2300      	movs	r3, #0
 80024c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d041      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024dc:	d02a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024e2:	d824      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024ee:	d81e      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f8:	d010      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024fa:	e018      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024fc:	4b86      	ldr	r3, [pc, #536]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a85      	ldr	r2, [pc, #532]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002506:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002508:	e015      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fabb 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251a:	e00c      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3320      	adds	r3, #32
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fba6 	bl	8002c74 <RCCEx_PLLSAI2_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	74fb      	strb	r3, [r7, #19]
      break;
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253c:	4b76      	ldr	r3, [pc, #472]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800254a:	4973      	ldr	r1, [pc, #460]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002552:	e001      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d041      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002568:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800256c:	d02a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800256e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002572:	d824      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800257a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800257e:	d81e      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002588:	d010      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800258a:	e018      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800258c:	4b62      	ldr	r3, [pc, #392]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a61      	ldr	r2, [pc, #388]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002596:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002598:	e015      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fa73 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025aa:	e00c      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3320      	adds	r3, #32
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fb5e 	bl	8002c74 <RCCEx_PLLSAI2_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025bc:	e003      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	74fb      	strb	r3, [r7, #19]
      break;
 80025c2:	e000      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025cc:	4b52      	ldr	r3, [pc, #328]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025da:	494f      	ldr	r1, [pc, #316]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025e2:	e001      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a0 	beq.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	4a40      	ldr	r2, [pc, #256]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	@ 0x58
 800261c:	4b3e      	ldr	r3, [pc, #248]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262c:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a3a      	ldr	r2, [pc, #232]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002638:	f7fe fd4a 	bl	80010d0 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263e:	e009      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002640:	f7fe fd46 	bl	80010d0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	74fb      	strb	r3, [r7, #19]
        break;
 8002652:	e005      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002654:	4b31      	ldr	r3, [pc, #196]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ef      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d15c      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01f      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	d019      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800268e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fd05 	bl	80010d0 <HAL_GetTick>
 80026c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c8:	e00b      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe fd01 	bl	80010d0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d902      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	74fb      	strb	r3, [r7, #19]
            break;
 80026e0:	e006      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ec      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f6:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002706:	4904      	ldr	r1, [pc, #16]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800270e:	e009      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
 8002714:	e006      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002724:	7c7b      	ldrb	r3, [r7, #17]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b9e      	ldr	r3, [pc, #632]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	4a9d      	ldr	r2, [pc, #628]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002734:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	4b98      	ldr	r3, [pc, #608]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002748:	f023 0203 	bic.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002750:	4994      	ldr	r1, [pc, #592]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002764:	4b8f      	ldr	r3, [pc, #572]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 020c 	bic.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002772:	498c      	ldr	r1, [pc, #560]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002786:	4b87      	ldr	r3, [pc, #540]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	4983      	ldr	r1, [pc, #524]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a8:	4b7e      	ldr	r3, [pc, #504]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	497b      	ldr	r1, [pc, #492]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ca:	4b76      	ldr	r3, [pc, #472]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d8:	4972      	ldr	r1, [pc, #456]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027ec:	4b6d      	ldr	r3, [pc, #436]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fa:	496a      	ldr	r1, [pc, #424]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280e:	4b65      	ldr	r3, [pc, #404]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	4961      	ldr	r1, [pc, #388]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002830:	4b5c      	ldr	r3, [pc, #368]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283e:	4959      	ldr	r1, [pc, #356]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002852:	4b54      	ldr	r3, [pc, #336]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002860:	4950      	ldr	r1, [pc, #320]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002874:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002882:	4948      	ldr	r1, [pc, #288]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002896:	4b43      	ldr	r3, [pc, #268]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	493f      	ldr	r1, [pc, #252]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d028      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b8:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c6:	4937      	ldr	r1, [pc, #220]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a31      	ldr	r2, [pc, #196]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e011      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028ee:	d10c      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f8c8 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d028      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002916:	4b23      	ldr	r3, [pc, #140]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	491f      	ldr	r1, [pc, #124]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002934:	d106      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002940:	60d3      	str	r3, [r2, #12]
 8002942:	e011      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f899 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02b      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002982:	4908      	ldr	r1, [pc, #32]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002992:	d109      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002994:	4b03      	ldr	r3, [pc, #12]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a02      	ldr	r2, [pc, #8]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800299e:	60d3      	str	r3, [r2, #12]
 80029a0:	e014      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f867 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02f      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029e6:	4928      	ldr	r1, [pc, #160]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029f6:	d10d      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3304      	adds	r3, #4
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f844 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d014      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	74bb      	strb	r3, [r7, #18]
 8002a12:	e011      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3320      	adds	r3, #32
 8002a22:	2102      	movs	r1, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f925 	bl	8002c74 <RCCEx_PLLSAI2_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a44:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a52:	490d      	ldr	r1, [pc, #52]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a76:	4904      	ldr	r1, [pc, #16]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000

08002a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a9a:	4b75      	ldr	r3, [pc, #468]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa6:	4b72      	ldr	r3, [pc, #456]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002abe:	4b6c      	ldr	r3, [pc, #432]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d047      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e044      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d018      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x86>
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d825      	bhi.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d002      	beq.n	8002aee <RCCEx_PLLSAI1_Config+0x62>
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d009      	beq.n	8002b00 <RCCEx_PLLSAI1_Config+0x74>
 8002aec:	e020      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aee:	4b60      	ldr	r3, [pc, #384]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e01a      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b00:	4b5b      	ldr	r3, [pc, #364]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e013      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b12:	4b57      	ldr	r3, [pc, #348]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b1e:	4b54      	ldr	r3, [pc, #336]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b2e:	e006      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e004      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b46:	4b4a      	ldr	r3, [pc, #296]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	4944      	ldr	r1, [pc, #272]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d17d      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b68:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a40      	ldr	r2, [pc, #256]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe faac 	bl	80010d0 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b7a:	e009      	b.n	8002b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b7c:	f7fe faa8 	bl	80010d0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d902      	bls.n	8002b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b8e:	e005      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b90:	4b37      	ldr	r3, [pc, #220]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ef      	bne.n	8002b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d160      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d111      	bne.n	8002bcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba8:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	0211      	lsls	r1, r2, #8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	0912      	lsrs	r2, r2, #4
 8002bc0:	0452      	lsls	r2, r2, #17
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	492a      	ldr	r1, [pc, #168]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	610b      	str	r3, [r1, #16]
 8002bca:	e027      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d112      	bne.n	8002bf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd2:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002bda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6892      	ldr	r2, [r2, #8]
 8002be2:	0211      	lsls	r1, r2, #8
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6912      	ldr	r2, [r2, #16]
 8002be8:	0852      	lsrs	r2, r2, #1
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0552      	lsls	r2, r2, #21
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	491f      	ldr	r1, [pc, #124]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
 8002bf6:	e011      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	0211      	lsls	r1, r2, #8
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6952      	ldr	r2, [r2, #20]
 8002c0e:	0852      	lsrs	r2, r2, #1
 8002c10:	3a01      	subs	r2, #1
 8002c12:	0652      	lsls	r2, r2, #25
 8002c14:	430a      	orrs	r2, r1
 8002c16:	4916      	ldr	r1, [pc, #88]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c1c:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a13      	ldr	r2, [pc, #76]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe fa52 	bl	80010d0 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c2e:	e009      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c30:	f7fe fa4e 	bl	80010d0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	73fb      	strb	r3, [r7, #15]
          break;
 8002c42:	e005      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c44:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ef      	beq.n	8002c30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	4904      	ldr	r1, [pc, #16]	@ (8002c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000

08002c74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c82:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c8e:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0203 	and.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d10d      	bne.n	8002cba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ca6:	4b61      	ldr	r3, [pc, #388]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d047      	beq.n	8002d4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e044      	b.n	8002d4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d018      	beq.n	8002cfa <RCCEx_PLLSAI2_Config+0x86>
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d825      	bhi.n	8002d18 <RCCEx_PLLSAI2_Config+0xa4>
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d002      	beq.n	8002cd6 <RCCEx_PLLSAI2_Config+0x62>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d009      	beq.n	8002ce8 <RCCEx_PLLSAI2_Config+0x74>
 8002cd4:	e020      	b.n	8002d18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cd6:	4b55      	ldr	r3, [pc, #340]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11d      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce6:	e01a      	b.n	8002d1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce8:	4b50      	ldr	r3, [pc, #320]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf8:	e013      	b.n	8002d22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d06:	4b49      	ldr	r3, [pc, #292]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d16:	e006      	b.n	8002d26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1c:	e004      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	430b      	orrs	r3, r1
 8002d44:	4939      	ldr	r1, [pc, #228]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d167      	bne.n	8002e20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a35      	ldr	r2, [pc, #212]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe f9b8 	bl	80010d0 <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d62:	e009      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d64:	f7fe f9b4 	bl	80010d0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d902      	bls.n	8002d78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73fb      	strb	r3, [r7, #15]
        break;
 8002d76:	e005      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d78:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ef      	bne.n	8002d64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d14a      	bne.n	8002e20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d90:	4b26      	ldr	r3, [pc, #152]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6892      	ldr	r2, [r2, #8]
 8002da0:	0211      	lsls	r1, r2, #8
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68d2      	ldr	r2, [r2, #12]
 8002da6:	0912      	lsrs	r2, r2, #4
 8002da8:	0452      	lsls	r2, r2, #17
 8002daa:	430a      	orrs	r2, r1
 8002dac:	491f      	ldr	r1, [pc, #124]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	614b      	str	r3, [r1, #20]
 8002db2:	e011      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6912      	ldr	r2, [r2, #16]
 8002dca:	0852      	lsrs	r2, r2, #1
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	0652      	lsls	r2, r2, #25
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	4916      	ldr	r1, [pc, #88]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dd8:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe f974 	bl	80010d0 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dea:	e009      	b.n	8002e00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dec:	f7fe f970 	bl	80010d0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d902      	bls.n	8002e00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002dfe:	e005      	b.n	8002e0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4904      	ldr	r1, [pc, #16]	@ (8002e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d079      	beq.n	8002f36 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd ff90 	bl	8000d7c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d058      	beq.n	8002f24 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	22ca      	movs	r2, #202	@ 0xca
 8002e78:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2253      	movs	r2, #83	@ 0x53
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fa4e 	bl	8003324 <RTC_EnterInitMode>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d127      	bne.n	8002ee2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68d2      	ldr	r2, [r2, #12]
 8002ecc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa52 	bl	800338c <RTC_ExitInitMode>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0203 	bic.w	r2, r2, #3
 8002f00:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	22ff      	movs	r2, #255	@ 0xff
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f22:	e001      	b.n	8002f28 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d103      	bne.n	8002f36 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_RTC_SetTime+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e08b      	b.n	8003072 <HAL_RTC_SetTime+0x132>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	22ca      	movs	r2, #202	@ 0xca
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2253      	movs	r2, #83	@ 0x53
 8002f78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f9d2 	bl	8003324 <RTC_EnterInitMode>
 8002f80:	4603      	mov	r3, r0
 8002f82:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d163      	bne.n	8003052 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d126      	bne.n	8002fde <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa2d 	bl	8003408 <RTC_ByteToBcd2>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa26 	bl	8003408 <RTC_ByteToBcd2>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa1e 	bl	8003408 <RTC_ByteToBcd2>
 8002fcc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fce:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	78db      	ldrb	r3, [r3, #3]
 8002fd6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e018      	b.n	8003010 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ffe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003004:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800301a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800301e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800302e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f99f 	bl	800338c <RTC_ExitInitMode>
 800304e:	4603      	mov	r3, r0
 8003050:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	22ff      	movs	r2, #255	@ 0xff
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003070:	7cfb      	ldrb	r3, [r7, #19]
}
 8003072:	4618      	mov	r0, r3
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}

0800307a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80030a8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80030ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	0d9b      	lsrs	r3, r3, #22
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11a      	bne.n	8003128 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f9a6 	bl	8003448 <RTC_Bcd2ToByte>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f99d 	bl	8003448 <RTC_Bcd2ToByte>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	789b      	ldrb	r3, [r3, #2]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f994 	bl	8003448 <RTC_Bcd2ToByte>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_RTC_SetDate+0x1a>
 8003148:	2302      	movs	r3, #2
 800314a:	e075      	b.n	8003238 <HAL_RTC_SetDate+0x106>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10e      	bne.n	8003180 <HAL_RTC_SetDate+0x4e>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	f023 0310 	bic.w	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	330a      	adds	r3, #10
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11c      	bne.n	80031c0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	78db      	ldrb	r3, [r3, #3]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f93c 	bl	8003408 <RTC_ByteToBcd2>
 8003190:	4603      	mov	r3, r0
 8003192:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f935 	bl	8003408 <RTC_ByteToBcd2>
 800319e:	4603      	mov	r3, r0
 80031a0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031a2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	789b      	ldrb	r3, [r3, #2]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f92d 	bl	8003408 <RTC_ByteToBcd2>
 80031ae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031b0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e00e      	b.n	80031de <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	78db      	ldrb	r3, [r3, #3]
 80031c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031cc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	22ca      	movs	r2, #202	@ 0xca
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2253      	movs	r2, #83	@ 0x53
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f898 	bl	8003324 <RTC_EnterInitMode>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003208:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800320c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f8bc 	bl	800338c <RTC_ExitInitMode>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	22ff      	movs	r2, #255	@ 0xff
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003236:	7cfb      	ldrb	r3, [r7, #19]
}
 8003238:	4618      	mov	r0, r3
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003256:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800325a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	0b5b      	lsrs	r3, r3, #13
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11a      	bne.n	80032d0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	78db      	ldrb	r3, [r3, #3]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f8d2 	bl	8003448 <RTC_Bcd2ToByte>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f8c9 	bl	8003448 <RTC_Bcd2ToByte>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	789b      	ldrb	r3, [r3, #2]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f8c0 	bl	8003448 <RTC_Bcd2ToByte>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <HAL_RTC_WaitForSynchro+0x44>)
 80032ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80032ec:	f7fd fef0 	bl	80010d0 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032f2:	e009      	b.n	8003308 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032f4:	f7fd feec 	bl	80010d0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003302:	d901      	bls.n	8003308 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e007      	b.n	8003318 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0003ff5f 	.word	0x0003ff5f

08003324 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d120      	bne.n	8003380 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f04f 32ff 	mov.w	r2, #4294967295
 8003346:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003348:	f7fd fec2 	bl	80010d0 <HAL_GetTick>
 800334c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800334e:	e00d      	b.n	800336c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003350:	f7fd febe 	bl	80010d0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800335e:	d905      	bls.n	800336c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2203      	movs	r2, #3
 8003368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <RTC_EnterInitMode+0x5c>
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d1e7      	bne.n	8003350 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003398:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <RTC_ExitInitMode+0x78>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <RTC_ExitInitMode+0x78>)
 800339e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80033a4:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <RTC_ExitInitMode+0x78>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10c      	bne.n	80033ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff93 	bl	80032dc <HAL_RTC_WaitForSynchro>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01e      	beq.n	80033fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2203      	movs	r2, #3
 80033c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e017      	b.n	80033fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003404 <RTC_ExitInitMode+0x78>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003404 <RTC_ExitInitMode+0x78>)
 80033d0:	f023 0320 	bic.w	r3, r3, #32
 80033d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff80 	bl	80032dc <HAL_RTC_WaitForSynchro>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033ee:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <RTC_ExitInitMode+0x78>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <RTC_ExitInitMode+0x78>)
 80033f4:	f043 0320 	orr.w	r3, r3, #32
 80033f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40002800 	.word	0x40002800

08003408 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800341a:	e005      	b.n	8003428 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3301      	adds	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003422:	7afb      	ldrb	r3, [r7, #11]
 8003424:	3b0a      	subs	r3, #10
 8003426:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003428:	7afb      	ldrb	r3, [r7, #11]
 800342a:	2b09      	cmp	r3, #9
 800342c:	d8f6      	bhi.n	800341c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	b2da      	uxtb	r2, r3
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	4313      	orrs	r3, r2
 800343a:	b2db      	uxtb	r3, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	b2db      	uxtb	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	0092      	lsls	r2, r2, #2
 800345c:	4413      	add	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	b2da      	uxtb	r2, r3
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	4413      	add	r3, r2
 800346e:	b2db      	uxtb	r3, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e040      	b.n	8003510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fc9e 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 ff3a 	bl	800433c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fc7f 	bl	8003dcc <UART_SetConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e01b      	b.n	8003510 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 ffb9 	bl	8004480 <UART_CheckIdleState>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800352c:	2b20      	cmp	r3, #32
 800352e:	d177      	bne.n	8003620 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Transmit+0x24>
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e070      	b.n	8003622 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	@ 0x21
 800354c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354e:	f7fd fdbf 	bl	80010d0 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Transmit+0x68>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003588:	e02f      	b.n	80035ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	@ 0x80
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f001 f81b 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e03b      	b.n	8003622 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035bc:	b292      	uxth	r2, r2
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3302      	adds	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e007      	b.n	80035d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1c9      	bne.n	800358a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	@ 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 ffe5 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e005      	b.n	8003622 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800362c:	b480      	push	{r7}
 800362e:	b08b      	sub	sp, #44	@ 0x2c
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800363e:	2b20      	cmp	r3, #32
 8003640:	d147      	bne.n	80036d2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit_IT+0x22>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e040      	b.n	80036d4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2221      	movs	r2, #33	@ 0x21
 800367a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003684:	d107      	bne.n	8003696 <HAL_UART_Transmit_IT+0x6a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <HAL_UART_Transmit_IT+0xb4>)
 8003692:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003694:	e002      	b.n	800369c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_UART_Transmit_IT+0xb8>)
 800369a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	613b      	str	r3, [r7, #16]
   return(result);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	69f9      	ldr	r1, [r7, #28]
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e6      	bne.n	800369c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	372c      	adds	r7, #44	@ 0x2c
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	080049e3 	.word	0x080049e3
 80036e4:	0800492d 	.word	0x0800492d

080036e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d137      	bne.n	8003770 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Receive_IT+0x24>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e030      	b.n	8003772 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	@ (800377c <HAL_UART_Receive_IT+0x94>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01f      	beq.n	8003760 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	613b      	str	r3, [r7, #16]
   return(result);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	61bb      	str	r3, [r7, #24]
   return(result);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e6      	bne.n	800372e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	461a      	mov	r2, r3
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 ffa0 	bl	80046ac <UART_Start_Receive_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	e000      	b.n	8003772 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3728      	adds	r7, #40	@ 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40008000 	.word	0x40008000

08003780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b0ba      	sub	sp, #232	@ 0xe8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80037ae:	4013      	ands	r3, r2
 80037b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80037b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d115      	bne.n	80037e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00f      	beq.n	80037e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 82ca 	beq.w	8003d72 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
      }
      return;
 80037e6:	e2c4      	b.n	8003d72 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80037e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8117 	beq.w	8003a20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003802:	4b85      	ldr	r3, [pc, #532]	@ (8003a18 <HAL_UART_IRQHandler+0x298>)
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 810a 	beq.w	8003a20 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d011      	beq.n	800383c <HAL_UART_IRQHandler+0xbc>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800383c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d011      	beq.n	800386c <HAL_UART_IRQHandler+0xec>
 8003848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2202      	movs	r2, #2
 800385a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_UART_IRQHandler+0x11c>
 8003878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2204      	movs	r2, #4
 800388a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ce:	f043 0208 	orr.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_UART_IRQHandler+0x18a>
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8230 	beq.w	8003d76 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003944:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	d005      	beq.n	8003962 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800395a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04f      	beq.n	8003a02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 ff68 	bl	8004838 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d141      	bne.n	80039fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3308      	adds	r3, #8
 800397c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800398c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1d9      	bne.n	8003976 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d013      	beq.n	80039f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ce:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <HAL_UART_IRQHandler+0x29c>)
 80039d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fcd5 	bl	8001386 <HAL_DMA_Abort_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039ec:	4610      	mov	r0, r2
 80039ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e00f      	b.n	8003a12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9d4 	bl	8003da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e00b      	b.n	8003a12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9d0 	bl	8003da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e007      	b.n	8003a12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9cc 	bl	8003da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a10:	e1b1      	b.n	8003d76 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a12:	bf00      	nop
    return;
 8003a14:	e1af      	b.n	8003d76 <HAL_UART_IRQHandler+0x5f6>
 8003a16:	bf00      	nop
 8003a18:	04000120 	.word	0x04000120
 8003a1c:	08004901 	.word	0x08004901

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	f040 816a 	bne.w	8003cfe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8163 	beq.w	8003cfe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 815c 	beq.w	8003cfe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	2b40      	cmp	r3, #64	@ 0x40
 8003a5a:	f040 80d4 	bne.w	8003c06 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80ad 	beq.w	8003bce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	f080 80a5 	bcs.w	8003bce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 8086 	bne.w	8003bac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ace:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1da      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3308      	adds	r3, #8
 8003af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e1      	bne.n	8003aea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b7c:	f023 0310 	bic.w	r3, r3, #16
 8003b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e4      	bne.n	8003b6c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fbaf 	bl	800130a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8f4 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003bcc:	e0d5      	b.n	8003d7a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003bd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	f040 80ce 	bne.w	8003d7a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	f040 80c5 	bne.w	8003d7a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8d8 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
      return;
 8003c04:	e0b9      	b.n	8003d7a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80ab 	beq.w	8003d7e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a6 	beq.w	8003d7e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e4      	bne.n	8003c32 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	623b      	str	r3, [r7, #32]
   return(result);
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e3      	bne.n	8003c68 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f023 0310 	bic.w	r3, r3, #16
 8003cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e4      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f85c 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cfc:	e03f      	b.n	8003d7e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00e      	beq.n	8003d28 <HAL_UART_IRQHandler+0x5a8>
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f001 f8a5 	bl	8004e70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d26:	e02d      	b.n	8003d84 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01c      	beq.n	8003d82 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
    }
    return;
 8003d50:	e017      	b.n	8003d82 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d012      	beq.n	8003d84 <HAL_UART_IRQHandler+0x604>
 8003d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00c      	beq.n	8003d84 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fe99 	bl	8004aa2 <UART_EndTransmit_IT>
    return;
 8003d70:	e008      	b.n	8003d84 <HAL_UART_IRQHandler+0x604>
      return;
 8003d72:	bf00      	nop
 8003d74:	e006      	b.n	8003d84 <HAL_UART_IRQHandler+0x604>
    return;
 8003d76:	bf00      	nop
 8003d78:	e004      	b.n	8003d84 <HAL_UART_IRQHandler+0x604>
      return;
 8003d7a:	bf00      	nop
 8003d7c:	e002      	b.n	8003d84 <HAL_UART_IRQHandler+0x604>
      return;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_UART_IRQHandler+0x604>
    return;
 8003d82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d84:	37e8      	adds	r7, #232	@ 0xe8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop

08003d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b08a      	sub	sp, #40	@ 0x28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4ba4      	ldr	r3, [pc, #656]	@ (800408c <UART_SetConfig+0x2c0>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a99      	ldr	r2, [pc, #612]	@ (8004090 <UART_SetConfig+0x2c4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e34:	4313      	orrs	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a90      	ldr	r2, [pc, #576]	@ (8004094 <UART_SetConfig+0x2c8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d126      	bne.n	8003ea4 <UART_SetConfig+0xd8>
 8003e56:	4b90      	ldr	r3, [pc, #576]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d81b      	bhi.n	8003e9c <UART_SetConfig+0xd0>
 8003e64:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <UART_SetConfig+0xa0>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e8d 	.word	0x08003e8d
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e95 	.word	0x08003e95
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e116      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e84:	2302      	movs	r3, #2
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e112      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e92:	e10e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e94:	2308      	movs	r3, #8
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9a:	e10a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	e106      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7c      	ldr	r2, [pc, #496]	@ (800409c <UART_SetConfig+0x2d0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d138      	bne.n	8003f20 <UART_SetConfig+0x154>
 8003eae:	4b7a      	ldr	r3, [pc, #488]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b0c      	cmp	r3, #12
 8003eba:	d82d      	bhi.n	8003f18 <UART_SetConfig+0x14c>
 8003ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec4 <UART_SetConfig+0xf8>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ef9 	.word	0x08003ef9
 8003ec8:	08003f19 	.word	0x08003f19
 8003ecc:	08003f19 	.word	0x08003f19
 8003ed0:	08003f19 	.word	0x08003f19
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f19 	.word	0x08003f19
 8003edc:	08003f19 	.word	0x08003f19
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f01 	.word	0x08003f01
 8003ee8:	08003f19 	.word	0x08003f19
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efe:	e0d8      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f06:	e0d4      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0e:	e0d0      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f10:	2308      	movs	r3, #8
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e0cc      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e0c8      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5e      	ldr	r2, [pc, #376]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d125      	bne.n	8003f76 <UART_SetConfig+0x1aa>
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f34:	2b30      	cmp	r3, #48	@ 0x30
 8003f36:	d016      	beq.n	8003f66 <UART_SetConfig+0x19a>
 8003f38:	2b30      	cmp	r3, #48	@ 0x30
 8003f3a:	d818      	bhi.n	8003f6e <UART_SetConfig+0x1a2>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d00a      	beq.n	8003f56 <UART_SetConfig+0x18a>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d814      	bhi.n	8003f6e <UART_SetConfig+0x1a2>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <UART_SetConfig+0x182>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d008      	beq.n	8003f5e <UART_SetConfig+0x192>
 8003f4c:	e00f      	b.n	8003f6e <UART_SetConfig+0x1a2>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f54:	e0ad      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f56:	2302      	movs	r3, #2
 8003f58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5c:	e0a9      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f64:	e0a5      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f66:	2308      	movs	r3, #8
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6c:	e0a1      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f6e:	2310      	movs	r3, #16
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f74:	e09d      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80040a4 <UART_SetConfig+0x2d8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d125      	bne.n	8003fcc <UART_SetConfig+0x200>
 8003f80:	4b45      	ldr	r3, [pc, #276]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f8c:	d016      	beq.n	8003fbc <UART_SetConfig+0x1f0>
 8003f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f90:	d818      	bhi.n	8003fc4 <UART_SetConfig+0x1f8>
 8003f92:	2b80      	cmp	r3, #128	@ 0x80
 8003f94:	d00a      	beq.n	8003fac <UART_SetConfig+0x1e0>
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d814      	bhi.n	8003fc4 <UART_SetConfig+0x1f8>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <UART_SetConfig+0x1d8>
 8003f9e:	2b40      	cmp	r3, #64	@ 0x40
 8003fa0:	d008      	beq.n	8003fb4 <UART_SetConfig+0x1e8>
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x1f8>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e082      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fac:	2302      	movs	r3, #2
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e07e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e07a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e076      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e072      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <UART_SetConfig+0x2dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d12a      	bne.n	800402c <UART_SetConfig+0x260>
 8003fd6:	4b30      	ldr	r3, [pc, #192]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0x250>
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fea:	d81b      	bhi.n	8004024 <UART_SetConfig+0x258>
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff0:	d00c      	beq.n	800400c <UART_SetConfig+0x240>
 8003ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff6:	d815      	bhi.n	8004024 <UART_SetConfig+0x258>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <UART_SetConfig+0x238>
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004000:	d008      	beq.n	8004014 <UART_SetConfig+0x248>
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x258>
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400a:	e052      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800400c:	2302      	movs	r3, #2
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004012:	e04e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004014:	2304      	movs	r3, #4
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401a:	e04a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800401c:	2308      	movs	r3, #8
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004022:	e046      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004024:	2310      	movs	r3, #16
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402a:	e042      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <UART_SetConfig+0x2c4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d13a      	bne.n	80040ac <UART_SetConfig+0x2e0>
 8004036:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <UART_SetConfig+0x2cc>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004044:	d01a      	beq.n	800407c <UART_SetConfig+0x2b0>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800404a:	d81b      	bhi.n	8004084 <UART_SetConfig+0x2b8>
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004050:	d00c      	beq.n	800406c <UART_SetConfig+0x2a0>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004056:	d815      	bhi.n	8004084 <UART_SetConfig+0x2b8>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <UART_SetConfig+0x298>
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004060:	d008      	beq.n	8004074 <UART_SetConfig+0x2a8>
 8004062:	e00f      	b.n	8004084 <UART_SetConfig+0x2b8>
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406a:	e022      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004072:	e01e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407a:	e01a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004082:	e016      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408a:	e012      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800408c:	efff69f3 	.word	0xefff69f3
 8004090:	40008000 	.word	0x40008000
 8004094:	40013800 	.word	0x40013800
 8004098:	40021000 	.word	0x40021000
 800409c:	40004400 	.word	0x40004400
 80040a0:	40004800 	.word	0x40004800
 80040a4:	40004c00 	.word	0x40004c00
 80040a8:	40005000 	.word	0x40005000
 80040ac:	2310      	movs	r3, #16
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a9f      	ldr	r2, [pc, #636]	@ (8004334 <UART_SetConfig+0x568>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d17a      	bne.n	80041b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d824      	bhi.n	800410e <UART_SetConfig+0x342>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <UART_SetConfig+0x300>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	0800410f 	.word	0x0800410f
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	0800410f 	.word	0x0800410f
 80040dc:	080040ff 	.word	0x080040ff
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800410f 	.word	0x0800410f
 80040ec:	08004107 	.word	0x08004107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7fe f956 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80040f4:	61f8      	str	r0, [r7, #28]
        break;
 80040f6:	e010      	b.n	800411a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004338 <UART_SetConfig+0x56c>)
 80040fa:	61fb      	str	r3, [r7, #28]
        break;
 80040fc:	e00d      	b.n	800411a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fe:	f7fe f8b7 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 8004102:	61f8      	str	r0, [r7, #28]
        break;
 8004104:	e009      	b.n	800411a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410a:	61fb      	str	r3, [r7, #28]
        break;
 800410c:	e005      	b.n	800411a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80fb 	beq.w	8004318 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d305      	bcc.n	800413e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	429a      	cmp	r2, r3
 800413c:	d903      	bls.n	8004146 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004144:	e0e8      	b.n	8004318 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2200      	movs	r2, #0
 800414a:	461c      	mov	r4, r3
 800414c:	4615      	mov	r5, r2
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	022b      	lsls	r3, r5, #8
 8004158:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800415c:	0222      	lsls	r2, r4, #8
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	6849      	ldr	r1, [r1, #4]
 8004162:	0849      	lsrs	r1, r1, #1
 8004164:	2000      	movs	r0, #0
 8004166:	4688      	mov	r8, r1
 8004168:	4681      	mov	r9, r0
 800416a:	eb12 0a08 	adds.w	sl, r2, r8
 800416e:	eb43 0b09 	adc.w	fp, r3, r9
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004180:	4650      	mov	r0, sl
 8004182:	4659      	mov	r1, fp
 8004184:	f7fc f87c 	bl	8000280 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004196:	d308      	bcc.n	80041aa <UART_SetConfig+0x3de>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419e:	d204      	bcs.n	80041aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	60da      	str	r2, [r3, #12]
 80041a8:	e0b6      	b.n	8004318 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041b0:	e0b2      	b.n	8004318 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ba:	d15e      	bne.n	800427a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d828      	bhi.n	8004216 <UART_SetConfig+0x44a>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <UART_SetConfig+0x400>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe f8d6 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80041f4:	61f8      	str	r0, [r7, #28]
        break;
 80041f6:	e014      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7fe f8e8 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 80041fc:	61f8      	str	r0, [r7, #28]
        break;
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <UART_SetConfig+0x56c>)
 8004202:	61fb      	str	r3, [r7, #28]
        break;
 8004204:	e00d      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7fe f833 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800420a:	61f8      	str	r0, [r7, #28]
        break;
 800420c:	e009      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d077      	beq.n	8004318 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005a      	lsls	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	441a      	add	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0f      	cmp	r3, #15
 8004242:	d916      	bls.n	8004272 <UART_SetConfig+0x4a6>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424a:	d212      	bcs.n	8004272 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f023 030f 	bic.w	r3, r3, #15
 8004254:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	b29b      	uxth	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	b29a      	uxth	r2, r3
 8004262:	8afb      	ldrh	r3, [r7, #22]
 8004264:	4313      	orrs	r3, r2
 8004266:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	8afa      	ldrh	r2, [r7, #22]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	e052      	b.n	8004318 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004278:	e04e      	b.n	8004318 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800427a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800427e:	2b08      	cmp	r3, #8
 8004280:	d827      	bhi.n	80042d2 <UART_SetConfig+0x506>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <UART_SetConfig+0x4bc>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042bd 	.word	0x080042bd
 8004294:	080042d3 	.word	0x080042d3
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042d3 	.word	0x080042d3
 80042a0:	080042d3 	.word	0x080042d3
 80042a4:	080042d3 	.word	0x080042d3
 80042a8:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe f878 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80042b0:	61f8      	str	r0, [r7, #28]
        break;
 80042b2:	e014      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7fe f88a 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 80042b8:	61f8      	str	r0, [r7, #28]
        break;
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <UART_SetConfig+0x56c>)
 80042be:	61fb      	str	r3, [r7, #28]
        break;
 80042c0:	e00d      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fd ffd5 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 80042c6:	61f8      	str	r0, [r7, #28]
        break;
 80042c8:	e009      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	61fb      	str	r3, [r7, #28]
        break;
 80042d0:	e005      	b.n	80042de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042dc:	bf00      	nop
    }

    if (pclk != 0U)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d019      	beq.n	8004318 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	085a      	lsrs	r2, r3, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0f      	cmp	r3, #15
 80042fc:	d909      	bls.n	8004312 <UART_SetConfig+0x546>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004304:	d205      	bcs.n	8004312 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e002      	b.n	8004318 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004324:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	@ 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004332:	bf00      	nop
 8004334:	40008000 	.word	0x40008000
 8004338:	00f42400 	.word	0x00f42400

0800433c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01a      	beq.n	8004452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800443a:	d10a      	bne.n	8004452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b098      	sub	sp, #96	@ 0x60
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004490:	f7fc fe1e 	bl	80010d0 <HAL_GetTick>
 8004494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d12e      	bne.n	8004502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ac:	2200      	movs	r2, #0
 80044ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f88c 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d021      	beq.n	8004502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e062      	b.n	80045c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d149      	bne.n	80045a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	2200      	movs	r2, #0
 800451a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f856 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03c      	beq.n	80045a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	623b      	str	r3, [r7, #32]
   return(result);
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
 800454a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800454e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60fb      	str	r3, [r7, #12]
   return(result);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	617b      	str	r3, [r7, #20]
   return(result);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e011      	b.n	80045c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3758      	adds	r7, #88	@ 0x58
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	e04f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d04b      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fc fd71 	bl	80010d0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e04e      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d037      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d034      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d031      	beq.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d110      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2208      	movs	r2, #8
 8004632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f8ff 	bl	8004838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2208      	movs	r2, #8
 800463e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e029      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800465c:	d111      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f8e5 	bl	8004838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e00f      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4013      	ands	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	bf0c      	ite	eq
 8004692:	2301      	moveq	r3, #1
 8004694:	2300      	movne	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	429a      	cmp	r2, r3
 800469e:	d0a0      	beq.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b097      	sub	sp, #92	@ 0x5c
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	d10e      	bne.n	80046fe <UART_Start_Receive_IT+0x52>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <UART_Start_Receive_IT+0x48>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80046ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046f2:	e02d      	b.n	8004750 <UART_Start_Receive_IT+0xa4>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	22ff      	movs	r2, #255	@ 0xff
 80046f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046fc:	e028      	b.n	8004750 <UART_Start_Receive_IT+0xa4>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <UART_Start_Receive_IT+0x76>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <UART_Start_Receive_IT+0x6c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	@ 0xff
 8004712:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004716:	e01b      	b.n	8004750 <UART_Start_Receive_IT+0xa4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	227f      	movs	r2, #127	@ 0x7f
 800471c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004720:	e016      	b.n	8004750 <UART_Start_Receive_IT+0xa4>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800472a:	d10d      	bne.n	8004748 <UART_Start_Receive_IT+0x9c>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <UART_Start_Receive_IT+0x92>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	227f      	movs	r2, #127	@ 0x7f
 8004738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800473c:	e008      	b.n	8004750 <UART_Start_Receive_IT+0xa4>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	223f      	movs	r2, #63	@ 0x3f
 8004742:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004746:	e003      	b.n	8004750 <UART_Start_Receive_IT+0xa4>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2222      	movs	r2, #34	@ 0x22
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	657b      	str	r3, [r7, #84]	@ 0x54
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004780:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004782:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e5      	bne.n	8004760 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479c:	d107      	bne.n	80047ae <UART_Start_Receive_IT+0x102>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a21      	ldr	r2, [pc, #132]	@ (8004830 <UART_Start_Receive_IT+0x184>)
 80047aa:	669a      	str	r2, [r3, #104]	@ 0x68
 80047ac:	e002      	b.n	80047b4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a20      	ldr	r2, [pc, #128]	@ (8004834 <UART_Start_Receive_IT+0x188>)
 80047b2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d019      	beq.n	80047f0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80047d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
 80047dc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e6      	bne.n	80047bc <UART_Start_Receive_IT+0x110>
 80047ee:	e018      	b.n	8004822 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	613b      	str	r3, [r7, #16]
   return(result);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f043 0320 	orr.w	r3, r3, #32
 8004804:	653b      	str	r3, [r7, #80]	@ 0x50
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800480e:	623b      	str	r3, [r7, #32]
 8004810:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	69f9      	ldr	r1, [r7, #28]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	61bb      	str	r3, [r7, #24]
   return(result);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e6      	bne.n	80047f0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	375c      	adds	r7, #92	@ 0x5c
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	08004cb5 	.word	0x08004cb5
 8004834:	08004af9 	.word	0x08004af9

08004838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b095      	sub	sp, #84	@ 0x54
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004860:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	61fb      	str	r3, [r7, #28]
   return(result);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d118      	bne.n	80048e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6979      	ldr	r1, [r7, #20]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	613b      	str	r3, [r7, #16]
   return(result);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e6      	bne.n	80048ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048f4:	bf00      	nop
 80048f6:	3754      	adds	r7, #84	@ 0x54
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fa3e 	bl	8003da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b08f      	sub	sp, #60	@ 0x3c
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004938:	2b21      	cmp	r3, #33	@ 0x21
 800493a:	d14c      	bne.n	80049d6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d132      	bne.n	80049ae <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	61fb      	str	r3, [r7, #28]
   return(result);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004968:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800496c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	60bb      	str	r3, [r7, #8]
   return(result);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	613b      	str	r3, [r7, #16]
   return(result);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e6      	bne.n	800497a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80049ac:	e013      	b.n	80049d6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80049d6:	bf00      	nop
 80049d8:	373c      	adds	r7, #60	@ 0x3c
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b091      	sub	sp, #68	@ 0x44
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ee:	2b21      	cmp	r3, #33	@ 0x21
 80049f0:	d151      	bne.n	8004a96 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d132      	bne.n	8004a64 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e6      	bne.n	80049fe <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a62:	e018      	b.n	8004a96 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6c:	881a      	ldrh	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a76:	b292      	uxth	r2, r2
 8004a78:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004a96:	bf00      	nop
 8004a98:	3744      	adds	r7, #68	@ 0x44
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b088      	sub	sp, #32
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff f94f 	bl	8003d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aee:	bf00      	nop
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b09c      	sub	sp, #112	@ 0x70
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b10:	2b22      	cmp	r3, #34	@ 0x22
 8004b12:	f040 80be 	bne.w	8004c92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b24:	b2d9      	uxtb	r1, r3
 8004b26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	400a      	ands	r2, r1
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 80a3 	bne.w	8004ca6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e6      	bne.n	8004b60 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a34      	ldr	r2, [pc, #208]	@ (8004cb0 <UART_RxISR_8BIT+0x1b8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d01f      	beq.n	8004c24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c06:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d12e      	bne.n	8004c8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e6      	bne.n	8004c32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d103      	bne.n	8004c7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2210      	movs	r2, #16
 8004c78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff f896 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c88:	e00d      	b.n	8004ca6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fb fca8 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8004c90:	e009      	b.n	8004ca6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	8b1b      	ldrh	r3, [r3, #24]
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	831a      	strh	r2, [r3, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	3770      	adds	r7, #112	@ 0x70
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40008000 	.word	0x40008000

08004cb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b09c      	sub	sp, #112	@ 0x70
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004cc2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ccc:	2b22      	cmp	r3, #34	@ 0x22
 8004cce:	f040 80be 	bne.w	8004e4e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ce2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004ce6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004cea:	4013      	ands	r3, r2
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cf0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	1c9a      	adds	r2, r3, #2
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 80a3 	bne.w	8004e62 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d30:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d3c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e6      	bne.n	8004d1c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a34      	ldr	r2, [pc, #208]	@ (8004e6c <UART_RxISR_16BIT+0x1b8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d01f      	beq.n	8004de0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d018      	beq.n	8004de0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e6      	bne.n	8004dae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d12e      	bne.n	8004e46 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f023 0310 	bic.w	r3, r3, #16
 8004e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6979      	ldr	r1, [r7, #20]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d103      	bne.n	8004e36 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2210      	movs	r2, #16
 8004e34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fe ffb8 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e44:	e00d      	b.n	8004e62 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fb fbca 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8004e4c:	e009      	b.n	8004e62 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	8b1b      	ldrh	r3, [r3, #24]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0208 	orr.w	r2, r2, #8
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	831a      	strh	r2, [r3, #24]
}
 8004e62:	bf00      	nop
 8004e64:	3770      	adds	r7, #112	@ 0x70
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40008000 	.word	0x40008000

08004e70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e88:	f000 fe08 	bl	8005a9c <vTaskStartScheduler>
  
  return osOK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f103 0208 	add.w	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f103 0208 	add.w	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f103 0208 	add.w	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d103      	bne.n	8004f54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e00c      	b.n	8004f6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3308      	adds	r3, #8
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e002      	b.n	8004f62 <vListInsert+0x2e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d2f6      	bcs.n	8004f5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6892      	ldr	r2, [r2, #8]
 8004fbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6852      	ldr	r2, [r2, #4]
 8004fc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d103      	bne.n	8004fda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	1e5a      	subs	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005028:	f001 fc6e 	bl	8006908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	3b01      	subs	r3, #1
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	22ff      	movs	r2, #255	@ 0xff
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	22ff      	movs	r2, #255	@ 0xff
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d114      	bne.n	80050a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01a      	beq.n	80050bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3310      	adds	r3, #16
 800508a:	4618      	mov	r0, r3
 800508c:	f000 ff50 	bl	8005f30 <xTaskRemoveFromEventList>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d012      	beq.n	80050bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005096:	4b0d      	ldr	r3, [pc, #52]	@ (80050cc <xQueueGenericReset+0xd0>)
 8005098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	e009      	b.n	80050bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3310      	adds	r3, #16
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fef0 	bl	8004e92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3324      	adds	r3, #36	@ 0x24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff feeb 	bl	8004e92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050bc:	f001 fc56 	bl	800696c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050c0:	2301      	movs	r3, #1
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	@ 0x28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <xQueueGenericCreate+0x2c>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	613b      	str	r3, [r7, #16]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3348      	adds	r3, #72	@ 0x48
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fd1e 	bl	8006b4c <pvPortMalloc>
 8005110:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3348      	adds	r3, #72	@ 0x48
 8005120:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800512a:	79fa      	ldrb	r2, [r7, #7]
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f805 	bl	8005146 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800513c:	69bb      	ldr	r3, [r7, #24]
	}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e002      	b.n	8005168 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005174:	2101      	movs	r1, #1
 8005176:	69b8      	ldr	r0, [r7, #24]
 8005178:	f7ff ff40 	bl	8004ffc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	@ 0x38
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005192:	2300      	movs	r3, #0
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xQueueGenericSend+0x34>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <xQueueGenericSend+0x42>
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <xQueueGenericSend+0x46>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <xQueueGenericSend+0x48>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <xQueueGenericSend+0x64>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d103      	bne.n	80051f6 <xQueueGenericSend+0x72>
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <xQueueGenericSend+0x76>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <xQueueGenericSend+0x78>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <xQueueGenericSend+0x94>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005218:	f001 f84a 	bl	80062b0 <xTaskGetSchedulerState>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <xQueueGenericSend+0xa4>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <xQueueGenericSend+0xa8>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <xQueueGenericSend+0xaa>
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <xQueueGenericSend+0xc6>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	61fb      	str	r3, [r7, #28]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800524a:	f001 fb5d 	bl	8006908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <xQueueGenericSend+0xdc>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d129      	bne.n	80052b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005266:	f000 f971 	bl	800554c <prvCopyDataToQueue>
 800526a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	2b00      	cmp	r3, #0
 8005272:	d010      	beq.n	8005296 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	3324      	adds	r3, #36	@ 0x24
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fe59 	bl	8005f30 <xTaskRemoveFromEventList>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d013      	beq.n	80052ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005284:	4b3f      	ldr	r3, [pc, #252]	@ (8005384 <xQueueGenericSend+0x200>)
 8005286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	e00a      	b.n	80052ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800529c:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <xQueueGenericSend+0x200>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052ac:	f001 fb5e 	bl	800696c <vPortExitCritical>
				return pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e063      	b.n	800537c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ba:	f001 fb57 	bl	800696c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	e05c      	b.n	800537c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fe93 	bl	8005ff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052d2:	2301      	movs	r3, #1
 80052d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052d6:	f001 fb49 	bl	800696c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052da:	f000 fc41 	bl	8005b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052de:	f001 fb13 	bl	8006908 <vPortEnterCritical>
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d103      	bne.n	80052f8 <xQueueGenericSend+0x174>
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052fe:	b25b      	sxtb	r3, r3
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d103      	bne.n	800530e <xQueueGenericSend+0x18a>
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800530e:	f001 fb2d 	bl	800696c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005312:	1d3a      	adds	r2, r7, #4
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fe82 	bl	8006024 <xTaskCheckForTimeOut>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d124      	bne.n	8005370 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005326:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005328:	f000 fa08 	bl	800573c <prvIsQueueFull>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d018      	beq.n	8005364 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	3310      	adds	r3, #16
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fdd2 	bl	8005ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005342:	f000 f993 	bl	800566c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005346:	f000 fc19 	bl	8005b7c <xTaskResumeAll>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	f47f af7c 	bne.w	800524a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005352:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <xQueueGenericSend+0x200>)
 8005354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	e772      	b.n	800524a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005366:	f000 f981 	bl	800566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800536a:	f000 fc07 	bl	8005b7c <xTaskResumeAll>
 800536e:	e76c      	b.n	800524a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005372:	f000 f97b 	bl	800566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005376:	f000 fc01 	bl	8005b7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800537a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800537c:	4618      	mov	r0, r3
 800537e:	3738      	adds	r7, #56	@ 0x38
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	@ 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <xQueueReceive+0x32>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	623b      	str	r3, [r7, #32]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <xQueueReceive+0x40>
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <xQueueReceive+0x44>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <xQueueReceive+0x46>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <xQueueReceive+0x62>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	61fb      	str	r3, [r7, #28]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ea:	f000 ff61 	bl	80062b0 <xTaskGetSchedulerState>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <xQueueReceive+0x72>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <xQueueReceive+0x76>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <xQueueReceive+0x78>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <xQueueReceive+0x94>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	61bb      	str	r3, [r7, #24]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800541c:	f001 fa74 	bl	8006908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01f      	beq.n	800546c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005430:	f000 f8f6 	bl	8005620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00f      	beq.n	8005464 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005446:	3310      	adds	r3, #16
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fd71 	bl	8005f30 <xTaskRemoveFromEventList>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005454:	4b3c      	ldr	r3, [pc, #240]	@ (8005548 <xQueueReceive+0x1c0>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005464:	f001 fa82 	bl	800696c <vPortExitCritical>
				return pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	e069      	b.n	8005540 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005472:	f001 fa7b 	bl	800696c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005476:	2300      	movs	r3, #0
 8005478:	e062      	b.n	8005540 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005480:	f107 0310 	add.w	r3, r7, #16
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fdb7 	bl	8005ff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800548a:	2301      	movs	r3, #1
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800548e:	f001 fa6d 	bl	800696c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005492:	f000 fb65 	bl	8005b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005496:	f001 fa37 	bl	8006908 <vPortEnterCritical>
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054a0:	b25b      	sxtb	r3, r3
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d103      	bne.n	80054b0 <xQueueReceive+0x128>
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d103      	bne.n	80054c6 <xQueueReceive+0x13e>
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c6:	f001 fa51 	bl	800696c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ca:	1d3a      	adds	r2, r7, #4
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fda6 	bl	8006024 <xTaskCheckForTimeOut>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d123      	bne.n	8005526 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054e0:	f000 f916 	bl	8005710 <prvIsQueueEmpty>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d017      	beq.n	800551a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	3324      	adds	r3, #36	@ 0x24
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fcf6 	bl	8005ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054fa:	f000 f8b7 	bl	800566c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054fe:	f000 fb3d 	bl	8005b7c <xTaskResumeAll>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d189      	bne.n	800541c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <xQueueReceive+0x1c0>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	e780      	b.n	800541c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800551a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800551c:	f000 f8a6 	bl	800566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005520:	f000 fb2c 	bl	8005b7c <xTaskResumeAll>
 8005524:	e77a      	b.n	800541c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005528:	f000 f8a0 	bl	800566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552c:	f000 fb26 	bl	8005b7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005532:	f000 f8ed 	bl	8005710 <prvIsQueueEmpty>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	f43f af6f 	beq.w	800541c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800553e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	@ 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10d      	bne.n	8005586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d14d      	bne.n	800560e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 feb8 	bl	80062ec <xTaskPriorityDisinherit>
 800557c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	e043      	b.n	800560e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d119      	bne.n	80055c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6858      	ldr	r0, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005594:	461a      	mov	r2, r3
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	f001 fd1c 	bl	8006fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d32b      	bcc.n	800560e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e026      	b.n	800560e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68d8      	ldr	r0, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	461a      	mov	r2, r3
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	f001 fd02 	bl	8006fd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	425b      	negs	r3, r3
 80055da:	441a      	add	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d207      	bcs.n	80055fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	425b      	negs	r3, r3
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d105      	bne.n	800560e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3b01      	subs	r3, #1
 800560c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005616:	697b      	ldr	r3, [r7, #20]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d018      	beq.n	8005664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	441a      	add	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d303      	bcc.n	8005654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68d9      	ldr	r1, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	461a      	mov	r2, r3
 800565e:	6838      	ldr	r0, [r7, #0]
 8005660:	f001 fcb8 	bl	8006fd4 <memcpy>
	}
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005674:	f001 f948 	bl	8006908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800567e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005680:	e011      	b.n	80056a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3324      	adds	r3, #36	@ 0x24
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fc4e 	bl	8005f30 <xTaskRemoveFromEventList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800569a:	f000 fd27 	bl	80060ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dce9      	bgt.n	8005682 <prvUnlockQueue+0x16>
 80056ae:	e000      	b.n	80056b2 <prvUnlockQueue+0x46>
					break;
 80056b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	22ff      	movs	r2, #255	@ 0xff
 80056b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056ba:	f001 f957 	bl	800696c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056be:	f001 f923 	bl	8006908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ca:	e011      	b.n	80056f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d012      	beq.n	80056fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3310      	adds	r3, #16
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fc29 	bl	8005f30 <xTaskRemoveFromEventList>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056e4:	f000 fd02 	bl	80060ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dce9      	bgt.n	80056cc <prvUnlockQueue+0x60>
 80056f8:	e000      	b.n	80056fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	22ff      	movs	r2, #255	@ 0xff
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005704:	f001 f932 	bl	800696c <vPortExitCritical>
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005718:	f001 f8f6 	bl	8006908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e001      	b.n	800572e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800572e:	f001 f91d 	bl	800696c <vPortExitCritical>

	return xReturn;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005744:	f001 f8e0 	bl	8006908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005750:	429a      	cmp	r2, r3
 8005752:	d102      	bne.n	800575a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f001 f905 	bl	800696c <vPortExitCritical>

	return xReturn;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08e      	sub	sp, #56	@ 0x38
 8005770:	af04      	add	r7, sp, #16
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800577a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	61fb      	str	r3, [r7, #28]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057b6:	2354      	movs	r3, #84	@ 0x54
 80057b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b54      	cmp	r3, #84	@ 0x54
 80057be:	d00b      	beq.n	80057d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61bb      	str	r3, [r7, #24]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01e      	beq.n	800581e <xTaskCreateStatic+0xb2>
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01b      	beq.n	800581e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057f8:	2300      	movs	r3, #0
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	9302      	str	r3, [sp, #8]
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f850 	bl	80058b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005816:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005818:	f000 f8d6 	bl	80059c8 <prvAddNewTaskToReadyList>
 800581c:	e001      	b.n	8005822 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005822:	697b      	ldr	r3, [r7, #20]
	}
 8005824:	4618      	mov	r0, r3
 8005826:	3728      	adds	r7, #40	@ 0x28
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08c      	sub	sp, #48	@ 0x30
 8005830:	af04      	add	r7, sp, #16
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f001 f983 	bl	8006b4c <pvPortMalloc>
 8005846:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00e      	beq.n	800586c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800584e:	2054      	movs	r0, #84	@ 0x54
 8005850:	f001 f97c 	bl	8006b4c <pvPortMalloc>
 8005854:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
 8005862:	e005      	b.n	8005870 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005864:	6978      	ldr	r0, [r7, #20]
 8005866:	f001 fa3f 	bl	8006ce8 <vPortFree>
 800586a:	e001      	b.n	8005870 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	2300      	movs	r3, #0
 8005882:	9303      	str	r3, [sp, #12]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f80e 	bl	80058b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800589a:	69f8      	ldr	r0, [r7, #28]
 800589c:	f000 f894 	bl	80059c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058a0:	2301      	movs	r3, #1
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	e002      	b.n	80058ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ac:	69bb      	ldr	r3, [r7, #24]
	}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ce:	3b01      	subs	r3, #1
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	f023 0307 	bic.w	r3, r3, #7
 80058dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	617b      	str	r3, [r7, #20]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01f      	beq.n	8005946 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e012      	b.n	8005932 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	7819      	ldrb	r1, [r3, #0]
 8005914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	3334      	adds	r3, #52	@ 0x34
 800591c:	460a      	mov	r2, r1
 800591e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d9e9      	bls.n	800590c <prvInitialiseNewTask+0x56>
 8005938:	e000      	b.n	800593c <prvInitialiseNewTask+0x86>
			{
				break;
 800593a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005944:	e003      	b.n	800594e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	2b06      	cmp	r3, #6
 8005952:	d901      	bls.n	8005958 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005954:	2306      	movs	r3, #6
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800595c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005962:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	2200      	movs	r2, #0
 8005968:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	3304      	adds	r3, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff faaf 	bl	8004ed2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	3318      	adds	r3, #24
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff faaa 	bl	8004ed2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005982:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	f1c3 0207 	rsb	r2, r3, #7
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005992:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	69b8      	ldr	r0, [r7, #24]
 80059a8:	f000 fe7c 	bl	80066a4 <pxPortInitialiseStack>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059be:	bf00      	nop
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059d0:	f000 ff9a 	bl	8006908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005a80 <prvAddNewTaskToReadyList+0xb8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a29      	ldr	r2, [pc, #164]	@ (8005a80 <prvAddNewTaskToReadyList+0xb8>)
 80059dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059de:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <prvAddNewTaskToReadyList+0xbc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059e6:	4a27      	ldr	r2, [pc, #156]	@ (8005a84 <prvAddNewTaskToReadyList+0xbc>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059ec:	4b24      	ldr	r3, [pc, #144]	@ (8005a80 <prvAddNewTaskToReadyList+0xb8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d110      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059f4:	f000 fb9e 	bl	8006134 <prvInitialiseTaskLists>
 80059f8:	e00d      	b.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059fa:	4b23      	ldr	r3, [pc, #140]	@ (8005a88 <prvAddNewTaskToReadyList+0xc0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a02:	4b20      	ldr	r3, [pc, #128]	@ (8005a84 <prvAddNewTaskToReadyList+0xbc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d802      	bhi.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a10:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <prvAddNewTaskToReadyList+0xbc>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a16:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <prvAddNewTaskToReadyList+0xc4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a8c <prvAddNewTaskToReadyList+0xc4>)
 8005a1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	2201      	movs	r2, #1
 8005a26:	409a      	lsls	r2, r3
 8005a28:	4b19      	ldr	r3, [pc, #100]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	4a18      	ldr	r2, [pc, #96]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <prvAddNewTaskToReadyList+0xcc>)
 8005a40:	441a      	add	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7ff fa4f 	bl	8004eec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a4e:	f000 ff8d 	bl	800696c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <prvAddNewTaskToReadyList+0xc0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <prvAddNewTaskToReadyList+0xbc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d207      	bcs.n	8005a78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <prvAddNewTaskToReadyList+0xd0>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000524 	.word	0x20000524
 8005a84:	20000424 	.word	0x20000424
 8005a88:	20000530 	.word	0x20000530
 8005a8c:	20000540 	.word	0x20000540
 8005a90:	2000052c 	.word	0x2000052c
 8005a94:	20000428 	.word	0x20000428
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aaa:	463a      	mov	r2, r7
 8005aac:	1d39      	adds	r1, r7, #4
 8005aae:	f107 0308 	add.w	r3, r7, #8
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fa fd7a 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	9202      	str	r2, [sp, #8]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	460a      	mov	r2, r1
 8005aca:	491f      	ldr	r1, [pc, #124]	@ (8005b48 <vTaskStartScheduler+0xac>)
 8005acc:	481f      	ldr	r0, [pc, #124]	@ (8005b4c <vTaskStartScheduler+0xb0>)
 8005ace:	f7ff fe4d 	bl	800576c <xTaskCreateStatic>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b50 <vTaskStartScheduler+0xb4>)
 8005ad6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b50 <vTaskStartScheduler+0xb4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e001      	b.n	8005aea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d116      	bne.n	8005b1e <vTaskStartScheduler+0x82>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b04:	4b13      	ldr	r3, [pc, #76]	@ (8005b54 <vTaskStartScheduler+0xb8>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b0c:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <vTaskStartScheduler+0xbc>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b12:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <vTaskStartScheduler+0xc0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b18:	f000 fe52 	bl	80067c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b1c:	e00f      	b.n	8005b3e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d10b      	bne.n	8005b3e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60fb      	str	r3, [r7, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <vTaskStartScheduler+0x9e>
}
 8005b3e:	bf00      	nop
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08007938 	.word	0x08007938
 8005b4c:	08006105 	.word	0x08006105
 8005b50:	20000548 	.word	0x20000548
 8005b54:	20000544 	.word	0x20000544
 8005b58:	20000530 	.word	0x20000530
 8005b5c:	20000528 	.word	0x20000528

08005b60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <vTaskSuspendAll+0x18>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a03      	ldr	r2, [pc, #12]	@ (8005b78 <vTaskSuspendAll+0x18>)
 8005b6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	2000054c 	.word	0x2000054c

08005b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b8a:	4b42      	ldr	r3, [pc, #264]	@ (8005c94 <xTaskResumeAll+0x118>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <xTaskResumeAll+0x2e>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	603b      	str	r3, [r7, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005baa:	f000 fead 	bl	8006908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bae:	4b39      	ldr	r3, [pc, #228]	@ (8005c94 <xTaskResumeAll+0x118>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	4a37      	ldr	r2, [pc, #220]	@ (8005c94 <xTaskResumeAll+0x118>)
 8005bb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb8:	4b36      	ldr	r3, [pc, #216]	@ (8005c94 <xTaskResumeAll+0x118>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d161      	bne.n	8005c84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bc0:	4b35      	ldr	r3, [pc, #212]	@ (8005c98 <xTaskResumeAll+0x11c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05d      	beq.n	8005c84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bc8:	e02e      	b.n	8005c28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bca:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <xTaskResumeAll+0x120>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff f9e5 	bl	8004fa6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff f9e0 	bl	8004fa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	2201      	movs	r2, #1
 8005bec:	409a      	lsls	r2, r3
 8005bee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca0 <xTaskResumeAll+0x124>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca0 <xTaskResumeAll+0x124>)
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4a27      	ldr	r2, [pc, #156]	@ (8005ca4 <xTaskResumeAll+0x128>)
 8005c06:	441a      	add	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7ff f96c 	bl	8004eec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c18:	4b23      	ldr	r3, [pc, #140]	@ (8005ca8 <xTaskResumeAll+0x12c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c22:	4b22      	ldr	r3, [pc, #136]	@ (8005cac <xTaskResumeAll+0x130>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c28:	4b1c      	ldr	r3, [pc, #112]	@ (8005c9c <xTaskResumeAll+0x120>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1cc      	bne.n	8005bca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c36:	f000 fb1b 	bl	8006270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <xTaskResumeAll+0x134>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c46:	f000 f837 	bl	8005cb8 <xTaskIncrementTick>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c50:	4b16      	ldr	r3, [pc, #88]	@ (8005cac <xTaskResumeAll+0x130>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f1      	bne.n	8005c46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c62:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <xTaskResumeAll+0x134>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c68:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <xTaskResumeAll+0x130>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c70:	2301      	movs	r3, #1
 8005c72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c74:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <xTaskResumeAll+0x138>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c84:	f000 fe72 	bl	800696c <vPortExitCritical>

	return xAlreadyYielded;
 8005c88:	68bb      	ldr	r3, [r7, #8]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	2000054c 	.word	0x2000054c
 8005c98:	20000524 	.word	0x20000524
 8005c9c:	200004e4 	.word	0x200004e4
 8005ca0:	2000052c 	.word	0x2000052c
 8005ca4:	20000428 	.word	0x20000428
 8005ca8:	20000424 	.word	0x20000424
 8005cac:	20000538 	.word	0x20000538
 8005cb0:	20000534 	.word	0x20000534
 8005cb4:	e000ed04 	.word	0xe000ed04

08005cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e00 <xTaskIncrementTick+0x148>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 808f 	bne.w	8005dea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8005e04 <xTaskIncrementTick+0x14c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8005e04 <xTaskIncrementTick+0x14c>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d121      	bne.n	8005d24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ce0:	4b49      	ldr	r3, [pc, #292]	@ (8005e08 <xTaskIncrementTick+0x150>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	603b      	str	r3, [r7, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <xTaskIncrementTick+0x46>
 8005d02:	4b41      	ldr	r3, [pc, #260]	@ (8005e08 <xTaskIncrementTick+0x150>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	4b40      	ldr	r3, [pc, #256]	@ (8005e0c <xTaskIncrementTick+0x154>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e08 <xTaskIncrementTick+0x150>)
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4a3e      	ldr	r2, [pc, #248]	@ (8005e0c <xTaskIncrementTick+0x154>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	4b3e      	ldr	r3, [pc, #248]	@ (8005e10 <xTaskIncrementTick+0x158>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e10 <xTaskIncrementTick+0x158>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	f000 faa6 	bl	8006270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d24:	4b3b      	ldr	r3, [pc, #236]	@ (8005e14 <xTaskIncrementTick+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d348      	bcc.n	8005dc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2e:	4b36      	ldr	r3, [pc, #216]	@ (8005e08 <xTaskIncrementTick+0x150>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	4b36      	ldr	r3, [pc, #216]	@ (8005e14 <xTaskIncrementTick+0x15c>)
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	601a      	str	r2, [r3, #0]
					break;
 8005d40:	e03e      	b.n	8005dc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d42:	4b31      	ldr	r3, [pc, #196]	@ (8005e08 <xTaskIncrementTick+0x150>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d203      	bcs.n	8005d62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e14 <xTaskIncrementTick+0x15c>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d60:	e02e      	b.n	8005dc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff f91d 	bl	8004fa6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff f914 	bl	8004fa6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	2201      	movs	r2, #1
 8005d84:	409a      	lsls	r2, r3
 8005d86:	4b24      	ldr	r3, [pc, #144]	@ (8005e18 <xTaskIncrementTick+0x160>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	4a22      	ldr	r2, [pc, #136]	@ (8005e18 <xTaskIncrementTick+0x160>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e1c <xTaskIncrementTick+0x164>)
 8005d9e:	441a      	add	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f7ff f8a0 	bl	8004eec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <xTaskIncrementTick+0x168>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3b9      	bcc.n	8005d2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dbe:	e7b6      	b.n	8005d2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dc0:	4b17      	ldr	r3, [pc, #92]	@ (8005e20 <xTaskIncrementTick+0x168>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc6:	4915      	ldr	r1, [pc, #84]	@ (8005e1c <xTaskIncrementTick+0x164>)
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d901      	bls.n	8005ddc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ddc:	4b11      	ldr	r3, [pc, #68]	@ (8005e24 <xTaskIncrementTick+0x16c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e004      	b.n	8005df4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dea:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <xTaskIncrementTick+0x170>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e28 <xTaskIncrementTick+0x170>)
 8005df2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005df4:	697b      	ldr	r3, [r7, #20]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2000054c 	.word	0x2000054c
 8005e04:	20000528 	.word	0x20000528
 8005e08:	200004dc 	.word	0x200004dc
 8005e0c:	200004e0 	.word	0x200004e0
 8005e10:	2000053c 	.word	0x2000053c
 8005e14:	20000544 	.word	0x20000544
 8005e18:	2000052c 	.word	0x2000052c
 8005e1c:	20000428 	.word	0x20000428
 8005e20:	20000424 	.word	0x20000424
 8005e24:	20000538 	.word	0x20000538
 8005e28:	20000534 	.word	0x20000534

08005e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e32:	4b27      	ldr	r3, [pc, #156]	@ (8005ed0 <vTaskSwitchContext+0xa4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e3a:	4b26      	ldr	r3, [pc, #152]	@ (8005ed4 <vTaskSwitchContext+0xa8>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e40:	e040      	b.n	8005ec4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e42:	4b24      	ldr	r3, [pc, #144]	@ (8005ed4 <vTaskSwitchContext+0xa8>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e48:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <vTaskSwitchContext+0xac>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	fab3 f383 	clz	r3, r3
 8005e54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e56:	7afb      	ldrb	r3, [r7, #11]
 8005e58:	f1c3 031f 	rsb	r3, r3, #31
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	491f      	ldr	r1, [pc, #124]	@ (8005edc <vTaskSwitchContext+0xb0>)
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	607b      	str	r3, [r7, #4]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <vTaskSwitchContext+0x5a>
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <vTaskSwitchContext+0xb0>)
 8005e96:	4413      	add	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d104      	bne.n	8005eba <vTaskSwitchContext+0x8e>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a07      	ldr	r2, [pc, #28]	@ (8005ee0 <vTaskSwitchContext+0xb4>)
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	2000054c 	.word	0x2000054c
 8005ed4:	20000538 	.word	0x20000538
 8005ed8:	2000052c 	.word	0x2000052c
 8005edc:	20000428 	.word	0x20000428
 8005ee0:	20000424 	.word	0x20000424

08005ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0c:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <vTaskPlaceOnEventList+0x48>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3318      	adds	r3, #24
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff f80d 	bl	8004f34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	6838      	ldr	r0, [r7, #0]
 8005f1e:	f000 fb5b 	bl	80065d8 <prvAddCurrentTaskToDelayedList>
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000424 	.word	0x20000424

08005f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60fb      	str	r3, [r7, #12]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3318      	adds	r3, #24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f81f 	bl	8004fa6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f68:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe0 <xTaskRemoveFromEventList+0xb0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11c      	bne.n	8005faa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff f816 	bl	8004fa6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	2201      	movs	r2, #1
 8005f80:	409a      	lsls	r2, r3
 8005f82:	4b18      	ldr	r3, [pc, #96]	@ (8005fe4 <xTaskRemoveFromEventList+0xb4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	4a16      	ldr	r2, [pc, #88]	@ (8005fe4 <xTaskRemoveFromEventList+0xb4>)
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4a13      	ldr	r2, [pc, #76]	@ (8005fe8 <xTaskRemoveFromEventList+0xb8>)
 8005f9a:	441a      	add	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f7fe ffa2 	bl	8004eec <vListInsertEnd>
 8005fa8:	e005      	b.n	8005fb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3318      	adds	r3, #24
 8005fae:	4619      	mov	r1, r3
 8005fb0:	480e      	ldr	r0, [pc, #56]	@ (8005fec <xTaskRemoveFromEventList+0xbc>)
 8005fb2:	f7fe ff9b 	bl	8004eec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff0 <xTaskRemoveFromEventList+0xc0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d905      	bls.n	8005fd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <xTaskRemoveFromEventList+0xc4>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e001      	b.n	8005fd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fd4:	697b      	ldr	r3, [r7, #20]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	2000054c 	.word	0x2000054c
 8005fe4:	2000052c 	.word	0x2000052c
 8005fe8:	20000428 	.word	0x20000428
 8005fec:	200004e4 	.word	0x200004e4
 8005ff0:	20000424 	.word	0x20000424
 8005ff4:	20000538 	.word	0x20000538

08005ff8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006000:	4b06      	ldr	r3, [pc, #24]	@ (800601c <vTaskInternalSetTimeOutState+0x24>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <vTaskInternalSetTimeOutState+0x28>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	2000053c 	.word	0x2000053c
 8006020:	20000528 	.word	0x20000528

08006024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60fb      	str	r3, [r7, #12]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800606a:	f000 fc4d 	bl	8006908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800606e:	4b1d      	ldr	r3, [pc, #116]	@ (80060e4 <xTaskCheckForTimeOut+0xc0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d102      	bne.n	800608e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e023      	b.n	80060d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b15      	ldr	r3, [pc, #84]	@ (80060e8 <xTaskCheckForTimeOut+0xc4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d007      	beq.n	80060aa <xTaskCheckForTimeOut+0x86>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e015      	b.n	80060d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d20b      	bcs.n	80060cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ff99 	bl	8005ff8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e004      	b.n	80060d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 fc49 	bl	800696c <vPortExitCritical>

	return xReturn;
 80060da:	69fb      	ldr	r3, [r7, #28]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000528 	.word	0x20000528
 80060e8:	2000053c 	.word	0x2000053c

080060ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060f0:	4b03      	ldr	r3, [pc, #12]	@ (8006100 <vTaskMissedYield+0x14>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000538 	.word	0x20000538

08006104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800610c:	f000 f852 	bl	80061b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <prvIdleTask+0x28>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d9f9      	bls.n	800610c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006118:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <prvIdleTask+0x2c>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006128:	e7f0      	b.n	800610c <prvIdleTask+0x8>
 800612a:	bf00      	nop
 800612c:	20000428 	.word	0x20000428
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	e00c      	b.n	800615a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <prvInitialiseTaskLists+0x60>)
 800614c:	4413      	add	r3, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fe9f 	bl	8004e92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3301      	adds	r3, #1
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b06      	cmp	r3, #6
 800615e:	d9ef      	bls.n	8006140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006160:	480d      	ldr	r0, [pc, #52]	@ (8006198 <prvInitialiseTaskLists+0x64>)
 8006162:	f7fe fe96 	bl	8004e92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006166:	480d      	ldr	r0, [pc, #52]	@ (800619c <prvInitialiseTaskLists+0x68>)
 8006168:	f7fe fe93 	bl	8004e92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800616c:	480c      	ldr	r0, [pc, #48]	@ (80061a0 <prvInitialiseTaskLists+0x6c>)
 800616e:	f7fe fe90 	bl	8004e92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006172:	480c      	ldr	r0, [pc, #48]	@ (80061a4 <prvInitialiseTaskLists+0x70>)
 8006174:	f7fe fe8d 	bl	8004e92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006178:	480b      	ldr	r0, [pc, #44]	@ (80061a8 <prvInitialiseTaskLists+0x74>)
 800617a:	f7fe fe8a 	bl	8004e92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <prvInitialiseTaskLists+0x78>)
 8006180:	4a05      	ldr	r2, [pc, #20]	@ (8006198 <prvInitialiseTaskLists+0x64>)
 8006182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <prvInitialiseTaskLists+0x7c>)
 8006186:	4a05      	ldr	r2, [pc, #20]	@ (800619c <prvInitialiseTaskLists+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000428 	.word	0x20000428
 8006198:	200004b4 	.word	0x200004b4
 800619c:	200004c8 	.word	0x200004c8
 80061a0:	200004e4 	.word	0x200004e4
 80061a4:	200004f8 	.word	0x200004f8
 80061a8:	20000510 	.word	0x20000510
 80061ac:	200004dc 	.word	0x200004dc
 80061b0:	200004e0 	.word	0x200004e0

080061b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ba:	e019      	b.n	80061f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061bc:	f000 fba4 	bl	8006908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c0:	4b10      	ldr	r3, [pc, #64]	@ (8006204 <prvCheckTasksWaitingTermination+0x50>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe feea 	bl	8004fa6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006208 <prvCheckTasksWaitingTermination+0x54>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006208 <prvCheckTasksWaitingTermination+0x54>)
 80061da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061dc:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	4a0a      	ldr	r2, [pc, #40]	@ (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061e6:	f000 fbc1 	bl	800696c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f810 	bl	8006210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f0:	4b06      	ldr	r3, [pc, #24]	@ (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e1      	bne.n	80061bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200004f8 	.word	0x200004f8
 8006208:	20000524 	.word	0x20000524
 800620c:	2000050c 	.word	0x2000050c

08006210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800621e:	2b00      	cmp	r3, #0
 8006220:	d108      	bne.n	8006234 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fd5e 	bl	8006ce8 <vPortFree>
				vPortFree( pxTCB );
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fd5b 	bl	8006ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006232:	e019      	b.n	8006268 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800623a:	2b01      	cmp	r3, #1
 800623c:	d103      	bne.n	8006246 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fd52 	bl	8006ce8 <vPortFree>
	}
 8006244:	e010      	b.n	8006268 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800624c:	2b02      	cmp	r3, #2
 800624e:	d00b      	beq.n	8006268 <prvDeleteTCB+0x58>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <prvDeleteTCB+0x54>
	}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006276:	4b0c      	ldr	r3, [pc, #48]	@ (80062a8 <prvResetNextTaskUnblockTime+0x38>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006280:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <prvResetNextTaskUnblockTime+0x3c>)
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006288:	e008      	b.n	800629c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628a:	4b07      	ldr	r3, [pc, #28]	@ (80062a8 <prvResetNextTaskUnblockTime+0x38>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4a04      	ldr	r2, [pc, #16]	@ (80062ac <prvResetNextTaskUnblockTime+0x3c>)
 800629a:	6013      	str	r3, [r2, #0]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	200004dc 	.word	0x200004dc
 80062ac:	20000544 	.word	0x20000544

080062b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062b6:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <xTaskGetSchedulerState+0x34>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062be:	2301      	movs	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	e008      	b.n	80062d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c4:	4b08      	ldr	r3, [pc, #32]	@ (80062e8 <xTaskGetSchedulerState+0x38>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062cc:	2302      	movs	r3, #2
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	e001      	b.n	80062d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062d6:	687b      	ldr	r3, [r7, #4]
	}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000530 	.word	0x20000530
 80062e8:	2000054c 	.word	0x2000054c

080062ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d070      	beq.n	80063e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006302:	4b3b      	ldr	r3, [pc, #236]	@ (80063f0 <xTaskPriorityDisinherit+0x104>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d00b      	beq.n	8006324 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60bb      	str	r3, [r7, #8]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	429a      	cmp	r2, r3
 8006358:	d044      	beq.n	80063e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635e:	2b00      	cmp	r3, #0
 8006360:	d140      	bne.n	80063e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fe1d 	bl	8004fa6 <uxListRemove>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d115      	bne.n	800639e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	491f      	ldr	r1, [pc, #124]	@ (80063f4 <xTaskPriorityDisinherit+0x108>)
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xTaskPriorityDisinherit+0xb2>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	2201      	movs	r2, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43da      	mvns	r2, r3
 8006394:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <xTaskPriorityDisinherit+0x10c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4013      	ands	r3, r2
 800639a:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <xTaskPriorityDisinherit+0x10c>)
 800639c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	f1c3 0207 	rsb	r2, r3, #7
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	2201      	movs	r2, #1
 80063b8:	409a      	lsls	r2, r3
 80063ba:	4b0f      	ldr	r3, [pc, #60]	@ (80063f8 <xTaskPriorityDisinherit+0x10c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4313      	orrs	r3, r2
 80063c0:	4a0d      	ldr	r2, [pc, #52]	@ (80063f8 <xTaskPriorityDisinherit+0x10c>)
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4a08      	ldr	r2, [pc, #32]	@ (80063f4 <xTaskPriorityDisinherit+0x108>)
 80063d2:	441a      	add	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f7fe fd86 	bl	8004eec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063e4:	697b      	ldr	r3, [r7, #20]
	}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000424 	.word	0x20000424
 80063f4:	20000428 	.word	0x20000428
 80063f8:	2000052c 	.word	0x2000052c

080063fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800640a:	f000 fa7d 	bl	8006908 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800640e:	4b26      	ldr	r3, [pc, #152]	@ (80064a8 <xTaskNotifyWait+0xac>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d01a      	beq.n	8006452 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800641c:	4b22      	ldr	r3, [pc, #136]	@ (80064a8 <xTaskNotifyWait+0xac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	43d2      	mvns	r2, r2
 8006426:	400a      	ands	r2, r1
 8006428:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800642a:	4b1f      	ldr	r3, [pc, #124]	@ (80064a8 <xTaskNotifyWait+0xac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800643a:	2101      	movs	r1, #1
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f000 f8cb 	bl	80065d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006442:	4b1a      	ldr	r3, [pc, #104]	@ (80064ac <xTaskNotifyWait+0xb0>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006452:	f000 fa8b 	bl	800696c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006456:	f000 fa57 	bl	8006908 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006460:	4b11      	ldr	r3, [pc, #68]	@ (80064a8 <xTaskNotifyWait+0xac>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <xTaskNotifyWait+0xac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d002      	beq.n	800647e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e008      	b.n	8006490 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800647e:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <xTaskNotifyWait+0xac>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	43d2      	mvns	r2, r2
 8006488:	400a      	ands	r2, r1
 800648a:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <xTaskNotifyWait+0xac>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800649a:	f000 fa67 	bl	800696c <vPortExitCritical>

		return xReturn;
 800649e:	697b      	ldr	r3, [r7, #20]
	}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000424 	.word	0x20000424
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	@ 0x28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	61bb      	str	r3, [r7, #24]
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	e7fd      	b.n	80064d4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064d8:	f000 faf6 	bl	8006ac8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064e0:	f3ef 8211 	mrs	r2, BASEPRI
 80064e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	617a      	str	r2, [r7, #20]
 80064f6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064f8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064fa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006502:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006516:	7ffb      	ldrb	r3, [r7, #31]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d146      	bne.n	80065aa <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	60fb      	str	r3, [r7, #12]
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	e7fd      	b.n	8006538 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653c:	4b20      	ldr	r3, [pc, #128]	@ (80065c0 <vTaskNotifyGiveFromISR+0x110>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11c      	bne.n	800657e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fd2c 	bl	8004fa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	2201      	movs	r2, #1
 8006554:	409a      	lsls	r2, r3
 8006556:	4b1b      	ldr	r3, [pc, #108]	@ (80065c4 <vTaskNotifyGiveFromISR+0x114>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	4a19      	ldr	r2, [pc, #100]	@ (80065c4 <vTaskNotifyGiveFromISR+0x114>)
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4a16      	ldr	r2, [pc, #88]	@ (80065c8 <vTaskNotifyGiveFromISR+0x118>)
 800656e:	441a      	add	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f7fe fcb8 	bl	8004eec <vListInsertEnd>
 800657c:	e005      	b.n	800658a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	3318      	adds	r3, #24
 8006582:	4619      	mov	r1, r3
 8006584:	4811      	ldr	r0, [pc, #68]	@ (80065cc <vTaskNotifyGiveFromISR+0x11c>)
 8006586:	f7fe fcb1 	bl	8004eec <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658e:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <vTaskNotifyGiveFromISR+0x120>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	429a      	cmp	r2, r3
 8006596:	d908      	bls.n	80065aa <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80065a4:	4b0b      	ldr	r3, [pc, #44]	@ (80065d4 <vTaskNotifyGiveFromISR+0x124>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065b4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80065b6:	bf00      	nop
 80065b8:	3728      	adds	r7, #40	@ 0x28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2000054c 	.word	0x2000054c
 80065c4:	2000052c 	.word	0x2000052c
 80065c8:	20000428 	.word	0x20000428
 80065cc:	200004e4 	.word	0x200004e4
 80065d0:	20000424 	.word	0x20000424
 80065d4:	20000538 	.word	0x20000538

080065d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065e2:	4b29      	ldr	r3, [pc, #164]	@ (8006688 <prvAddCurrentTaskToDelayedList+0xb0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065e8:	4b28      	ldr	r3, [pc, #160]	@ (800668c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fcd9 	bl	8004fa6 <uxListRemove>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065fa:	4b24      	ldr	r3, [pc, #144]	@ (800668c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	2201      	movs	r2, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	43da      	mvns	r2, r3
 8006608:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4013      	ands	r3, r2
 800660e:	4a20      	ldr	r2, [pc, #128]	@ (8006690 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d10a      	bne.n	8006630 <prvAddCurrentTaskToDelayedList+0x58>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006620:	4b1a      	ldr	r3, [pc, #104]	@ (800668c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	481a      	ldr	r0, [pc, #104]	@ (8006694 <prvAddCurrentTaskToDelayedList+0xbc>)
 800662a:	f7fe fc5f 	bl	8004eec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800662e:	e026      	b.n	800667e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006638:	4b14      	ldr	r3, [pc, #80]	@ (800668c <prvAddCurrentTaskToDelayedList+0xb4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	429a      	cmp	r2, r3
 8006646:	d209      	bcs.n	800665c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006648:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <prvAddCurrentTaskToDelayedList+0xc0>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4b0f      	ldr	r3, [pc, #60]	@ (800668c <prvAddCurrentTaskToDelayedList+0xb4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f7fe fc6d 	bl	8004f34 <vListInsert>
}
 800665a:	e010      	b.n	800667e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665c:	4b0f      	ldr	r3, [pc, #60]	@ (800669c <prvAddCurrentTaskToDelayedList+0xc4>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fe fc63 	bl	8004f34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800666e:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	d202      	bcs.n	800667e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006678:	4a09      	ldr	r2, [pc, #36]	@ (80066a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6013      	str	r3, [r2, #0]
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000528 	.word	0x20000528
 800668c:	20000424 	.word	0x20000424
 8006690:	2000052c 	.word	0x2000052c
 8006694:	20000510 	.word	0x20000510
 8006698:	200004e0 	.word	0x200004e0
 800669c:	200004dc 	.word	0x200004dc
 80066a0:	20000544 	.word	0x20000544

080066a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3b04      	subs	r3, #4
 80066b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0201 	bic.w	r2, r3, #1
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3b04      	subs	r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006708 <pxPortInitialiseStack+0x64>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b14      	subs	r3, #20
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3b04      	subs	r3, #4
 80066ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f06f 0202 	mvn.w	r2, #2
 80066f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3b20      	subs	r3, #32
 80066f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	0800670d 	.word	0x0800670d

0800670c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006716:	4b13      	ldr	r3, [pc, #76]	@ (8006764 <prvTaskExitError+0x58>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d00b      	beq.n	8006738 <prvTaskExitError+0x2c>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <prvTaskExitError+0x28>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60bb      	str	r3, [r7, #8]
}
 800674a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800674c:	bf00      	nop
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0fc      	beq.n	800674e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	2000007c 	.word	0x2000007c
	...

08006770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006770:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <pxCurrentTCBConst2>)
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	f380 8809 	msr	PSP, r0
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	4770      	bx	lr
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst2>:
 8006790:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006798:	4808      	ldr	r0, [pc, #32]	@ (80067bc <prvPortStartFirstTask+0x24>)
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f380 8808 	msr	MSP, r0
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8814 	msr	CONTROL, r0
 80067aa:	b662      	cpsie	i
 80067ac:	b661      	cpsie	f
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	df00      	svc	0
 80067b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ba:	bf00      	nop
 80067bc:	e000ed08 	.word	0xe000ed08

080067c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067c6:	4b47      	ldr	r3, [pc, #284]	@ (80068e4 <xPortStartScheduler+0x124>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a47      	ldr	r2, [pc, #284]	@ (80068e8 <xPortStartScheduler+0x128>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10b      	bne.n	80067e8 <xPortStartScheduler+0x28>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60fb      	str	r3, [r7, #12]
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	e7fd      	b.n	80067e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067e8:	4b3e      	ldr	r3, [pc, #248]	@ (80068e4 <xPortStartScheduler+0x124>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a3f      	ldr	r2, [pc, #252]	@ (80068ec <xPortStartScheduler+0x12c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d10b      	bne.n	800680a <xPortStartScheduler+0x4a>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	613b      	str	r3, [r7, #16]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800680a:	4b39      	ldr	r3, [pc, #228]	@ (80068f0 <xPortStartScheduler+0x130>)
 800680c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	22ff      	movs	r2, #255	@ 0xff
 800681a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4b31      	ldr	r3, [pc, #196]	@ (80068f4 <xPortStartScheduler+0x134>)
 8006830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006832:	4b31      	ldr	r3, [pc, #196]	@ (80068f8 <xPortStartScheduler+0x138>)
 8006834:	2207      	movs	r2, #7
 8006836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006838:	e009      	b.n	800684e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800683a:	4b2f      	ldr	r3, [pc, #188]	@ (80068f8 <xPortStartScheduler+0x138>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3b01      	subs	r3, #1
 8006840:	4a2d      	ldr	r2, [pc, #180]	@ (80068f8 <xPortStartScheduler+0x138>)
 8006842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006856:	2b80      	cmp	r3, #128	@ 0x80
 8006858:	d0ef      	beq.n	800683a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800685a:	4b27      	ldr	r3, [pc, #156]	@ (80068f8 <xPortStartScheduler+0x138>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1c3 0307 	rsb	r3, r3, #7
 8006862:	2b04      	cmp	r3, #4
 8006864:	d00b      	beq.n	800687e <xPortStartScheduler+0xbe>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	60bb      	str	r3, [r7, #8]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800687e:	4b1e      	ldr	r3, [pc, #120]	@ (80068f8 <xPortStartScheduler+0x138>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <xPortStartScheduler+0x138>)
 8006886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006888:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <xPortStartScheduler+0x138>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006890:	4a19      	ldr	r2, [pc, #100]	@ (80068f8 <xPortStartScheduler+0x138>)
 8006892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800689c:	4b17      	ldr	r3, [pc, #92]	@ (80068fc <xPortStartScheduler+0x13c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a16      	ldr	r2, [pc, #88]	@ (80068fc <xPortStartScheduler+0x13c>)
 80068a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068a8:	4b14      	ldr	r3, [pc, #80]	@ (80068fc <xPortStartScheduler+0x13c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a13      	ldr	r2, [pc, #76]	@ (80068fc <xPortStartScheduler+0x13c>)
 80068ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068b4:	f000 f8da 	bl	8006a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068b8:	4b11      	ldr	r3, [pc, #68]	@ (8006900 <xPortStartScheduler+0x140>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068be:	f000 f8f9 	bl	8006ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068c2:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <xPortStartScheduler+0x144>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006904 <xPortStartScheduler+0x144>)
 80068c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068ce:	f7ff ff63 	bl	8006798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068d2:	f7ff faab 	bl	8005e2c <vTaskSwitchContext>
	prvTaskExitError();
 80068d6:	f7ff ff19 	bl	800670c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	e000ed00 	.word	0xe000ed00
 80068e8:	410fc271 	.word	0x410fc271
 80068ec:	410fc270 	.word	0x410fc270
 80068f0:	e000e400 	.word	0xe000e400
 80068f4:	20000550 	.word	0x20000550
 80068f8:	20000554 	.word	0x20000554
 80068fc:	e000ed20 	.word	0xe000ed20
 8006900:	2000007c 	.word	0x2000007c
 8006904:	e000ef34 	.word	0xe000ef34

08006908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006922:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <vPortEnterCritical+0x5c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	4a0e      	ldr	r2, [pc, #56]	@ (8006964 <vPortEnterCritical+0x5c>)
 800692a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800692c:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <vPortEnterCritical+0x5c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d110      	bne.n	8006956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006934:	4b0c      	ldr	r3, [pc, #48]	@ (8006968 <vPortEnterCritical+0x60>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <vPortEnterCritical+0x4e>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	603b      	str	r3, [r7, #0]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <vPortEnterCritical+0x4a>
	}
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000007c 	.word	0x2000007c
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006972:	4b12      	ldr	r3, [pc, #72]	@ (80069bc <vPortExitCritical+0x50>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <vPortExitCritical+0x26>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	607b      	str	r3, [r7, #4]
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	e7fd      	b.n	800698e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006992:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <vPortExitCritical+0x50>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3b01      	subs	r3, #1
 8006998:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <vPortExitCritical+0x50>)
 800699a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800699c:	4b07      	ldr	r3, [pc, #28]	@ (80069bc <vPortExitCritical+0x50>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <vPortExitCritical+0x44>
 80069a4:	2300      	movs	r3, #0
 80069a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f383 8811 	msr	BASEPRI, r3
}
 80069ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	2000007c 	.word	0x2000007c

080069c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069c0:	f3ef 8009 	mrs	r0, PSP
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <pxCurrentTCBConst>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f01e 0f10 	tst.w	lr, #16
 80069d0:	bf08      	it	eq
 80069d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	6010      	str	r0, [r2, #0]
 80069dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069e4:	f380 8811 	msr	BASEPRI, r0
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f7ff fa1c 	bl	8005e2c <vTaskSwitchContext>
 80069f4:	f04f 0000 	mov.w	r0, #0
 80069f8:	f380 8811 	msr	BASEPRI, r0
 80069fc:	bc09      	pop	{r0, r3}
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6808      	ldr	r0, [r1, #0]
 8006a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a06:	f01e 0f10 	tst.w	lr, #16
 8006a0a:	bf08      	it	eq
 8006a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a10:	f380 8809 	msr	PSP, r0
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst>:
 8006a20:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a42:	f7ff f939 	bl	8005cb8 <xTaskIncrementTick>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <xPortSysTickHandler+0x40>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f383 8811 	msr	BASEPRI, r3
}
 8006a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a76:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa4 <vPortSetupTimerInterrupt+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa8 <vPortSetupTimerInterrupt+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	@ (8006aac <vPortSetupTimerInterrupt+0x40>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	4a09      	ldr	r2, [pc, #36]	@ (8006ab0 <vPortSetupTimerInterrupt+0x44>)
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8e:	4b04      	ldr	r3, [pc, #16]	@ (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010
 8006aa4:	e000e018 	.word	0xe000e018
 8006aa8:	20000070 	.word	0x20000070
 8006aac:	10624dd3 	.word	0x10624dd3
 8006ab0:	e000e014 	.word	0xe000e014

08006ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ac4 <vPortEnableVFP+0x10>
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006abe:	6001      	str	r1, [r0, #0]
 8006ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ac2:	bf00      	nop
 8006ac4:	e000ed88 	.word	0xe000ed88

08006ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d915      	bls.n	8006b06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ada:	4a18      	ldr	r2, [pc, #96]	@ (8006b3c <vPortValidateInterruptPriority+0x74>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ae4:	4b16      	ldr	r3, [pc, #88]	@ (8006b40 <vPortValidateInterruptPriority+0x78>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	7afa      	ldrb	r2, [r7, #11]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d20b      	bcs.n	8006b06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b06:	4b0f      	ldr	r3, [pc, #60]	@ (8006b44 <vPortValidateInterruptPriority+0x7c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b48 <vPortValidateInterruptPriority+0x80>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d90b      	bls.n	8006b2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	603b      	str	r3, [r7, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <vPortValidateInterruptPriority+0x62>
	}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	e000e3f0 	.word	0xe000e3f0
 8006b40:	20000550 	.word	0x20000550
 8006b44:	e000ed0c 	.word	0xe000ed0c
 8006b48:	20000554 	.word	0x20000554

08006b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	@ 0x28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b58:	f7ff f802 	bl	8005b60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd0 <pvPortMalloc+0x184>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b64:	f000 f924 	bl	8006db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b68:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd4 <pvPortMalloc+0x188>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f040 8095 	bne.w	8006ca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01e      	beq.n	8006bba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4413      	add	r3, r2
 8006b82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d015      	beq.n	8006bba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	3308      	adds	r3, #8
 8006b96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <pvPortMalloc+0x6e>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	617b      	str	r3, [r7, #20]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d06f      	beq.n	8006ca0 <pvPortMalloc+0x154>
 8006bc0:	4b45      	ldr	r3, [pc, #276]	@ (8006cd8 <pvPortMalloc+0x18c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d86a      	bhi.n	8006ca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bca:	4b44      	ldr	r3, [pc, #272]	@ (8006cdc <pvPortMalloc+0x190>)
 8006bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bce:	4b43      	ldr	r3, [pc, #268]	@ (8006cdc <pvPortMalloc+0x190>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bd4:	e004      	b.n	8006be0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d903      	bls.n	8006bf2 <pvPortMalloc+0xa6>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f1      	bne.n	8006bd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bf2:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <pvPortMalloc+0x184>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d051      	beq.n	8006ca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2208      	movs	r2, #8
 8006c02:	4413      	add	r3, r2
 8006c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	2308      	movs	r3, #8
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d920      	bls.n	8006c60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <pvPortMalloc+0xfc>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c5a:	69b8      	ldr	r0, [r7, #24]
 8006c5c:	f000 f90a 	bl	8006e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <pvPortMalloc+0x18c>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <pvPortMalloc+0x18c>)
 8006c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <pvPortMalloc+0x18c>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce0 <pvPortMalloc+0x194>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d203      	bcs.n	8006c82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c7a:	4b17      	ldr	r3, [pc, #92]	@ (8006cd8 <pvPortMalloc+0x18c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a18      	ldr	r2, [pc, #96]	@ (8006ce0 <pvPortMalloc+0x194>)
 8006c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4b13      	ldr	r3, [pc, #76]	@ (8006cd4 <pvPortMalloc+0x188>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c96:	4b13      	ldr	r3, [pc, #76]	@ (8006ce4 <pvPortMalloc+0x198>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	4a11      	ldr	r2, [pc, #68]	@ (8006ce4 <pvPortMalloc+0x198>)
 8006c9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ca0:	f7fe ff6c 	bl	8005b7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <pvPortMalloc+0x17a>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <pvPortMalloc+0x176>
	return pvReturn;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3728      	adds	r7, #40	@ 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20001118 	.word	0x20001118
 8006cd4:	2000112c 	.word	0x2000112c
 8006cd8:	2000111c 	.word	0x2000111c
 8006cdc:	20001110 	.word	0x20001110
 8006ce0:	20001120 	.word	0x20001120
 8006ce4:	20001124 	.word	0x20001124

08006ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d04f      	beq.n	8006d9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4413      	add	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b25      	ldr	r3, [pc, #148]	@ (8006da4 <vPortFree+0xbc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <vPortFree+0x46>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60fb      	str	r3, [r7, #12]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <vPortFree+0x66>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60bb      	str	r3, [r7, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <vPortFree+0xbc>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01e      	beq.n	8006d9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11a      	bne.n	8006d9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	4b0e      	ldr	r3, [pc, #56]	@ (8006da4 <vPortFree+0xbc>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d74:	f7fe fef4 	bl	8005b60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006da8 <vPortFree+0xc0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4413      	add	r3, r2
 8006d82:	4a09      	ldr	r2, [pc, #36]	@ (8006da8 <vPortFree+0xc0>)
 8006d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f000 f874 	bl	8006e74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d8c:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <vPortFree+0xc4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	4a06      	ldr	r2, [pc, #24]	@ (8006dac <vPortFree+0xc4>)
 8006d94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d96:	f7fe fef1 	bl	8005b7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d9a:	bf00      	nop
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2000112c 	.word	0x2000112c
 8006da8:	2000111c 	.word	0x2000111c
 8006dac:	20001128 	.word	0x20001128

08006db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006db6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006dbc:	4b27      	ldr	r3, [pc, #156]	@ (8006e5c <prvHeapInit+0xac>)
 8006dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00c      	beq.n	8006de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3307      	adds	r3, #7
 8006dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0307 	bic.w	r3, r3, #7
 8006dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	4a1f      	ldr	r2, [pc, #124]	@ (8006e5c <prvHeapInit+0xac>)
 8006de0:	4413      	add	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006de8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e60 <prvHeapInit+0xb0>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dee:	4b1c      	ldr	r3, [pc, #112]	@ (8006e60 <prvHeapInit+0xb0>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	4413      	add	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0307 	bic.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a15      	ldr	r2, [pc, #84]	@ (8006e64 <prvHeapInit+0xb4>)
 8006e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e12:	4b14      	ldr	r3, [pc, #80]	@ (8006e64 <prvHeapInit+0xb4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e1a:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <prvHeapInit+0xb4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e30:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <prvHeapInit+0xb4>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e68 <prvHeapInit+0xb8>)
 8006e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	4a09      	ldr	r2, [pc, #36]	@ (8006e6c <prvHeapInit+0xbc>)
 8006e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e48:	4b09      	ldr	r3, [pc, #36]	@ (8006e70 <prvHeapInit+0xc0>)
 8006e4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e4e:	601a      	str	r2, [r3, #0]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000558 	.word	0x20000558
 8006e60:	20001110 	.word	0x20001110
 8006e64:	20001118 	.word	0x20001118
 8006e68:	20001120 	.word	0x20001120
 8006e6c:	2000111c 	.word	0x2000111c
 8006e70:	2000112c 	.word	0x2000112c

08006e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e7c:	4b28      	ldr	r3, [pc, #160]	@ (8006f20 <prvInsertBlockIntoFreeList+0xac>)
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	e002      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x14>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d8f7      	bhi.n	8006e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d108      	bne.n	8006eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	441a      	add	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	441a      	add	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d118      	bne.n	8006efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <prvInsertBlockIntoFreeList+0xb0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d00d      	beq.n	8006ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e008      	b.n	8006f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <prvInsertBlockIntoFreeList+0xb0>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e003      	b.n	8006f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d002      	beq.n	8006f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20001110 	.word	0x20001110
 8006f24:	20001118 	.word	0x20001118

08006f28 <siprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	b09d      	sub	sp, #116	@ 0x74
 8006f2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f38:	480a      	ldr	r0, [pc, #40]	@ (8006f64 <siprintf+0x3c>)
 8006f3a:	9107      	str	r1, [sp, #28]
 8006f3c:	9104      	str	r1, [sp, #16]
 8006f3e:	490a      	ldr	r1, [pc, #40]	@ (8006f68 <siprintf+0x40>)
 8006f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f44:	9105      	str	r1, [sp, #20]
 8006f46:	2400      	movs	r4, #0
 8006f48:	a902      	add	r1, sp, #8
 8006f4a:	6800      	ldr	r0, [r0, #0]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f50:	f000 f9a2 	bl	8007298 <_svfiprintf_r>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	701c      	strb	r4, [r3, #0]
 8006f58:	b01d      	add	sp, #116	@ 0x74
 8006f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5e:	b003      	add	sp, #12
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000080 	.word	0x20000080
 8006f68:	ffff0208 	.word	0xffff0208

08006f6c <memset>:
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d100      	bne.n	8006f76 <memset+0xa>
 8006f74:	4770      	bx	lr
 8006f76:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7a:	e7f9      	b.n	8006f70 <memset+0x4>

08006f7c <__errno>:
 8006f7c:	4b01      	ldr	r3, [pc, #4]	@ (8006f84 <__errno+0x8>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000080 	.word	0x20000080

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	@ (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 fc64 	bl	8007868 <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	080079c4 	.word	0x080079c4
 8006fc4:	080079c4 	.word	0x080079c4
 8006fc8:	080079c4 	.word	0x080079c4
 8006fcc:	080079c8 	.word	0x080079c8

08006fd0 <__retarget_lock_acquire_recursive>:
 8006fd0:	4770      	bx	lr

08006fd2 <__retarget_lock_release_recursive>:
 8006fd2:	4770      	bx	lr

08006fd4 <memcpy>:
 8006fd4:	440a      	add	r2, r1
 8006fd6:	4291      	cmp	r1, r2
 8006fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fdc:	d100      	bne.n	8006fe0 <memcpy+0xc>
 8006fde:	4770      	bx	lr
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fea:	4291      	cmp	r1, r2
 8006fec:	d1f9      	bne.n	8006fe2 <memcpy+0xe>
 8006fee:	bd10      	pop	{r4, pc}

08006ff0 <_free_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	2900      	cmp	r1, #0
 8006ff6:	d041      	beq.n	800707c <_free_r+0x8c>
 8006ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ffc:	1f0c      	subs	r4, r1, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bfb8      	it	lt
 8007002:	18e4      	addlt	r4, r4, r3
 8007004:	f000 f8e0 	bl	80071c8 <__malloc_lock>
 8007008:	4a1d      	ldr	r2, [pc, #116]	@ (8007080 <_free_r+0x90>)
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	b933      	cbnz	r3, 800701c <_free_r+0x2c>
 800700e:	6063      	str	r3, [r4, #4]
 8007010:	6014      	str	r4, [r2, #0]
 8007012:	4628      	mov	r0, r5
 8007014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007018:	f000 b8dc 	b.w	80071d4 <__malloc_unlock>
 800701c:	42a3      	cmp	r3, r4
 800701e:	d908      	bls.n	8007032 <_free_r+0x42>
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	1821      	adds	r1, r4, r0
 8007024:	428b      	cmp	r3, r1
 8007026:	bf01      	itttt	eq
 8007028:	6819      	ldreq	r1, [r3, #0]
 800702a:	685b      	ldreq	r3, [r3, #4]
 800702c:	1809      	addeq	r1, r1, r0
 800702e:	6021      	streq	r1, [r4, #0]
 8007030:	e7ed      	b.n	800700e <_free_r+0x1e>
 8007032:	461a      	mov	r2, r3
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b10b      	cbz	r3, 800703c <_free_r+0x4c>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d9fa      	bls.n	8007032 <_free_r+0x42>
 800703c:	6811      	ldr	r1, [r2, #0]
 800703e:	1850      	adds	r0, r2, r1
 8007040:	42a0      	cmp	r0, r4
 8007042:	d10b      	bne.n	800705c <_free_r+0x6c>
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	4401      	add	r1, r0
 8007048:	1850      	adds	r0, r2, r1
 800704a:	4283      	cmp	r3, r0
 800704c:	6011      	str	r1, [r2, #0]
 800704e:	d1e0      	bne.n	8007012 <_free_r+0x22>
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	6053      	str	r3, [r2, #4]
 8007056:	4408      	add	r0, r1
 8007058:	6010      	str	r0, [r2, #0]
 800705a:	e7da      	b.n	8007012 <_free_r+0x22>
 800705c:	d902      	bls.n	8007064 <_free_r+0x74>
 800705e:	230c      	movs	r3, #12
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	e7d6      	b.n	8007012 <_free_r+0x22>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	1821      	adds	r1, r4, r0
 8007068:	428b      	cmp	r3, r1
 800706a:	bf04      	itt	eq
 800706c:	6819      	ldreq	r1, [r3, #0]
 800706e:	685b      	ldreq	r3, [r3, #4]
 8007070:	6063      	str	r3, [r4, #4]
 8007072:	bf04      	itt	eq
 8007074:	1809      	addeq	r1, r1, r0
 8007076:	6021      	streq	r1, [r4, #0]
 8007078:	6054      	str	r4, [r2, #4]
 800707a:	e7ca      	b.n	8007012 <_free_r+0x22>
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	bf00      	nop
 8007080:	20001274 	.word	0x20001274

08007084 <sbrk_aligned>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4e0f      	ldr	r6, [pc, #60]	@ (80070c4 <sbrk_aligned+0x40>)
 8007088:	460c      	mov	r4, r1
 800708a:	6831      	ldr	r1, [r6, #0]
 800708c:	4605      	mov	r5, r0
 800708e:	b911      	cbnz	r1, 8007096 <sbrk_aligned+0x12>
 8007090:	f000 fba4 	bl	80077dc <_sbrk_r>
 8007094:	6030      	str	r0, [r6, #0]
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f000 fb9f 	bl	80077dc <_sbrk_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	d103      	bne.n	80070aa <sbrk_aligned+0x26>
 80070a2:	f04f 34ff 	mov.w	r4, #4294967295
 80070a6:	4620      	mov	r0, r4
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	1cc4      	adds	r4, r0, #3
 80070ac:	f024 0403 	bic.w	r4, r4, #3
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d0f8      	beq.n	80070a6 <sbrk_aligned+0x22>
 80070b4:	1a21      	subs	r1, r4, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fb90 	bl	80077dc <_sbrk_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d1f2      	bne.n	80070a6 <sbrk_aligned+0x22>
 80070c0:	e7ef      	b.n	80070a2 <sbrk_aligned+0x1e>
 80070c2:	bf00      	nop
 80070c4:	20001270 	.word	0x20001270

080070c8 <_malloc_r>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	1ccd      	adds	r5, r1, #3
 80070ce:	f025 0503 	bic.w	r5, r5, #3
 80070d2:	3508      	adds	r5, #8
 80070d4:	2d0c      	cmp	r5, #12
 80070d6:	bf38      	it	cc
 80070d8:	250c      	movcc	r5, #12
 80070da:	2d00      	cmp	r5, #0
 80070dc:	4606      	mov	r6, r0
 80070de:	db01      	blt.n	80070e4 <_malloc_r+0x1c>
 80070e0:	42a9      	cmp	r1, r5
 80070e2:	d904      	bls.n	80070ee <_malloc_r+0x26>
 80070e4:	230c      	movs	r3, #12
 80070e6:	6033      	str	r3, [r6, #0]
 80070e8:	2000      	movs	r0, #0
 80070ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071c4 <_malloc_r+0xfc>
 80070f2:	f000 f869 	bl	80071c8 <__malloc_lock>
 80070f6:	f8d8 3000 	ldr.w	r3, [r8]
 80070fa:	461c      	mov	r4, r3
 80070fc:	bb44      	cbnz	r4, 8007150 <_malloc_r+0x88>
 80070fe:	4629      	mov	r1, r5
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff ffbf 	bl	8007084 <sbrk_aligned>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	4604      	mov	r4, r0
 800710a:	d158      	bne.n	80071be <_malloc_r+0xf6>
 800710c:	f8d8 4000 	ldr.w	r4, [r8]
 8007110:	4627      	mov	r7, r4
 8007112:	2f00      	cmp	r7, #0
 8007114:	d143      	bne.n	800719e <_malloc_r+0xd6>
 8007116:	2c00      	cmp	r4, #0
 8007118:	d04b      	beq.n	80071b2 <_malloc_r+0xea>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	4639      	mov	r1, r7
 800711e:	4630      	mov	r0, r6
 8007120:	eb04 0903 	add.w	r9, r4, r3
 8007124:	f000 fb5a 	bl	80077dc <_sbrk_r>
 8007128:	4581      	cmp	r9, r0
 800712a:	d142      	bne.n	80071b2 <_malloc_r+0xea>
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	1a6d      	subs	r5, r5, r1
 8007130:	4629      	mov	r1, r5
 8007132:	4630      	mov	r0, r6
 8007134:	f7ff ffa6 	bl	8007084 <sbrk_aligned>
 8007138:	3001      	adds	r0, #1
 800713a:	d03a      	beq.n	80071b2 <_malloc_r+0xea>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	442b      	add	r3, r5
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	f8d8 3000 	ldr.w	r3, [r8]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	bb62      	cbnz	r2, 80071a4 <_malloc_r+0xdc>
 800714a:	f8c8 7000 	str.w	r7, [r8]
 800714e:	e00f      	b.n	8007170 <_malloc_r+0xa8>
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	1b52      	subs	r2, r2, r5
 8007154:	d420      	bmi.n	8007198 <_malloc_r+0xd0>
 8007156:	2a0b      	cmp	r2, #11
 8007158:	d917      	bls.n	800718a <_malloc_r+0xc2>
 800715a:	1961      	adds	r1, r4, r5
 800715c:	42a3      	cmp	r3, r4
 800715e:	6025      	str	r5, [r4, #0]
 8007160:	bf18      	it	ne
 8007162:	6059      	strne	r1, [r3, #4]
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	bf08      	it	eq
 8007168:	f8c8 1000 	streq.w	r1, [r8]
 800716c:	5162      	str	r2, [r4, r5]
 800716e:	604b      	str	r3, [r1, #4]
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f82f 	bl	80071d4 <__malloc_unlock>
 8007176:	f104 000b 	add.w	r0, r4, #11
 800717a:	1d23      	adds	r3, r4, #4
 800717c:	f020 0007 	bic.w	r0, r0, #7
 8007180:	1ac2      	subs	r2, r0, r3
 8007182:	bf1c      	itt	ne
 8007184:	1a1b      	subne	r3, r3, r0
 8007186:	50a3      	strne	r3, [r4, r2]
 8007188:	e7af      	b.n	80070ea <_malloc_r+0x22>
 800718a:	6862      	ldr	r2, [r4, #4]
 800718c:	42a3      	cmp	r3, r4
 800718e:	bf0c      	ite	eq
 8007190:	f8c8 2000 	streq.w	r2, [r8]
 8007194:	605a      	strne	r2, [r3, #4]
 8007196:	e7eb      	b.n	8007170 <_malloc_r+0xa8>
 8007198:	4623      	mov	r3, r4
 800719a:	6864      	ldr	r4, [r4, #4]
 800719c:	e7ae      	b.n	80070fc <_malloc_r+0x34>
 800719e:	463c      	mov	r4, r7
 80071a0:	687f      	ldr	r7, [r7, #4]
 80071a2:	e7b6      	b.n	8007112 <_malloc_r+0x4a>
 80071a4:	461a      	mov	r2, r3
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d1fb      	bne.n	80071a4 <_malloc_r+0xdc>
 80071ac:	2300      	movs	r3, #0
 80071ae:	6053      	str	r3, [r2, #4]
 80071b0:	e7de      	b.n	8007170 <_malloc_r+0xa8>
 80071b2:	230c      	movs	r3, #12
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	4630      	mov	r0, r6
 80071b8:	f000 f80c 	bl	80071d4 <__malloc_unlock>
 80071bc:	e794      	b.n	80070e8 <_malloc_r+0x20>
 80071be:	6005      	str	r5, [r0, #0]
 80071c0:	e7d6      	b.n	8007170 <_malloc_r+0xa8>
 80071c2:	bf00      	nop
 80071c4:	20001274 	.word	0x20001274

080071c8 <__malloc_lock>:
 80071c8:	4801      	ldr	r0, [pc, #4]	@ (80071d0 <__malloc_lock+0x8>)
 80071ca:	f7ff bf01 	b.w	8006fd0 <__retarget_lock_acquire_recursive>
 80071ce:	bf00      	nop
 80071d0:	2000126c 	.word	0x2000126c

080071d4 <__malloc_unlock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	@ (80071dc <__malloc_unlock+0x8>)
 80071d6:	f7ff befc 	b.w	8006fd2 <__retarget_lock_release_recursive>
 80071da:	bf00      	nop
 80071dc:	2000126c 	.word	0x2000126c

080071e0 <__ssputs_r>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	688e      	ldr	r6, [r1, #8]
 80071e6:	461f      	mov	r7, r3
 80071e8:	42be      	cmp	r6, r7
 80071ea:	680b      	ldr	r3, [r1, #0]
 80071ec:	4682      	mov	sl, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	4690      	mov	r8, r2
 80071f2:	d82d      	bhi.n	8007250 <__ssputs_r+0x70>
 80071f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071fc:	d026      	beq.n	800724c <__ssputs_r+0x6c>
 80071fe:	6965      	ldr	r5, [r4, #20]
 8007200:	6909      	ldr	r1, [r1, #16]
 8007202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007206:	eba3 0901 	sub.w	r9, r3, r1
 800720a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800720e:	1c7b      	adds	r3, r7, #1
 8007210:	444b      	add	r3, r9
 8007212:	106d      	asrs	r5, r5, #1
 8007214:	429d      	cmp	r5, r3
 8007216:	bf38      	it	cc
 8007218:	461d      	movcc	r5, r3
 800721a:	0553      	lsls	r3, r2, #21
 800721c:	d527      	bpl.n	800726e <__ssputs_r+0x8e>
 800721e:	4629      	mov	r1, r5
 8007220:	f7ff ff52 	bl	80070c8 <_malloc_r>
 8007224:	4606      	mov	r6, r0
 8007226:	b360      	cbz	r0, 8007282 <__ssputs_r+0xa2>
 8007228:	6921      	ldr	r1, [r4, #16]
 800722a:	464a      	mov	r2, r9
 800722c:	f7ff fed2 	bl	8006fd4 <memcpy>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	6126      	str	r6, [r4, #16]
 800723e:	6165      	str	r5, [r4, #20]
 8007240:	444e      	add	r6, r9
 8007242:	eba5 0509 	sub.w	r5, r5, r9
 8007246:	6026      	str	r6, [r4, #0]
 8007248:	60a5      	str	r5, [r4, #8]
 800724a:	463e      	mov	r6, r7
 800724c:	42be      	cmp	r6, r7
 800724e:	d900      	bls.n	8007252 <__ssputs_r+0x72>
 8007250:	463e      	mov	r6, r7
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	4632      	mov	r2, r6
 8007256:	4641      	mov	r1, r8
 8007258:	f000 faa6 	bl	80077a8 <memmove>
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	1b9b      	subs	r3, r3, r6
 8007260:	60a3      	str	r3, [r4, #8]
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	4433      	add	r3, r6
 8007266:	6023      	str	r3, [r4, #0]
 8007268:	2000      	movs	r0, #0
 800726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726e:	462a      	mov	r2, r5
 8007270:	f000 fac4 	bl	80077fc <_realloc_r>
 8007274:	4606      	mov	r6, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d1e0      	bne.n	800723c <__ssputs_r+0x5c>
 800727a:	6921      	ldr	r1, [r4, #16]
 800727c:	4650      	mov	r0, sl
 800727e:	f7ff feb7 	bl	8006ff0 <_free_r>
 8007282:	230c      	movs	r3, #12
 8007284:	f8ca 3000 	str.w	r3, [sl]
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
 8007294:	e7e9      	b.n	800726a <__ssputs_r+0x8a>
	...

08007298 <_svfiprintf_r>:
 8007298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	4698      	mov	r8, r3
 800729e:	898b      	ldrh	r3, [r1, #12]
 80072a0:	061b      	lsls	r3, r3, #24
 80072a2:	b09d      	sub	sp, #116	@ 0x74
 80072a4:	4607      	mov	r7, r0
 80072a6:	460d      	mov	r5, r1
 80072a8:	4614      	mov	r4, r2
 80072aa:	d510      	bpl.n	80072ce <_svfiprintf_r+0x36>
 80072ac:	690b      	ldr	r3, [r1, #16]
 80072ae:	b973      	cbnz	r3, 80072ce <_svfiprintf_r+0x36>
 80072b0:	2140      	movs	r1, #64	@ 0x40
 80072b2:	f7ff ff09 	bl	80070c8 <_malloc_r>
 80072b6:	6028      	str	r0, [r5, #0]
 80072b8:	6128      	str	r0, [r5, #16]
 80072ba:	b930      	cbnz	r0, 80072ca <_svfiprintf_r+0x32>
 80072bc:	230c      	movs	r3, #12
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	b01d      	add	sp, #116	@ 0x74
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	2340      	movs	r3, #64	@ 0x40
 80072cc:	616b      	str	r3, [r5, #20]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d2:	2320      	movs	r3, #32
 80072d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072dc:	2330      	movs	r3, #48	@ 0x30
 80072de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800747c <_svfiprintf_r+0x1e4>
 80072e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072e6:	f04f 0901 	mov.w	r9, #1
 80072ea:	4623      	mov	r3, r4
 80072ec:	469a      	mov	sl, r3
 80072ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f2:	b10a      	cbz	r2, 80072f8 <_svfiprintf_r+0x60>
 80072f4:	2a25      	cmp	r2, #37	@ 0x25
 80072f6:	d1f9      	bne.n	80072ec <_svfiprintf_r+0x54>
 80072f8:	ebba 0b04 	subs.w	fp, sl, r4
 80072fc:	d00b      	beq.n	8007316 <_svfiprintf_r+0x7e>
 80072fe:	465b      	mov	r3, fp
 8007300:	4622      	mov	r2, r4
 8007302:	4629      	mov	r1, r5
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ff6b 	bl	80071e0 <__ssputs_r>
 800730a:	3001      	adds	r0, #1
 800730c:	f000 80a7 	beq.w	800745e <_svfiprintf_r+0x1c6>
 8007310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007312:	445a      	add	r2, fp
 8007314:	9209      	str	r2, [sp, #36]	@ 0x24
 8007316:	f89a 3000 	ldrb.w	r3, [sl]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 809f 	beq.w	800745e <_svfiprintf_r+0x1c6>
 8007320:	2300      	movs	r3, #0
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800732a:	f10a 0a01 	add.w	sl, sl, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	9307      	str	r3, [sp, #28]
 8007332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007336:	931a      	str	r3, [sp, #104]	@ 0x68
 8007338:	4654      	mov	r4, sl
 800733a:	2205      	movs	r2, #5
 800733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007340:	484e      	ldr	r0, [pc, #312]	@ (800747c <_svfiprintf_r+0x1e4>)
 8007342:	f7f8 ff4d 	bl	80001e0 <memchr>
 8007346:	9a04      	ldr	r2, [sp, #16]
 8007348:	b9d8      	cbnz	r0, 8007382 <_svfiprintf_r+0xea>
 800734a:	06d0      	lsls	r0, r2, #27
 800734c:	bf44      	itt	mi
 800734e:	2320      	movmi	r3, #32
 8007350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007354:	0711      	lsls	r1, r2, #28
 8007356:	bf44      	itt	mi
 8007358:	232b      	movmi	r3, #43	@ 0x2b
 800735a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800735e:	f89a 3000 	ldrb.w	r3, [sl]
 8007362:	2b2a      	cmp	r3, #42	@ 0x2a
 8007364:	d015      	beq.n	8007392 <_svfiprintf_r+0xfa>
 8007366:	9a07      	ldr	r2, [sp, #28]
 8007368:	4654      	mov	r4, sl
 800736a:	2000      	movs	r0, #0
 800736c:	f04f 0c0a 	mov.w	ip, #10
 8007370:	4621      	mov	r1, r4
 8007372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007376:	3b30      	subs	r3, #48	@ 0x30
 8007378:	2b09      	cmp	r3, #9
 800737a:	d94b      	bls.n	8007414 <_svfiprintf_r+0x17c>
 800737c:	b1b0      	cbz	r0, 80073ac <_svfiprintf_r+0x114>
 800737e:	9207      	str	r2, [sp, #28]
 8007380:	e014      	b.n	80073ac <_svfiprintf_r+0x114>
 8007382:	eba0 0308 	sub.w	r3, r0, r8
 8007386:	fa09 f303 	lsl.w	r3, r9, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	46a2      	mov	sl, r4
 8007390:	e7d2      	b.n	8007338 <_svfiprintf_r+0xa0>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	1d19      	adds	r1, r3, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	9103      	str	r1, [sp, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfbb      	ittet	lt
 800739e:	425b      	neglt	r3, r3
 80073a0:	f042 0202 	orrlt.w	r2, r2, #2
 80073a4:	9307      	strge	r3, [sp, #28]
 80073a6:	9307      	strlt	r3, [sp, #28]
 80073a8:	bfb8      	it	lt
 80073aa:	9204      	strlt	r2, [sp, #16]
 80073ac:	7823      	ldrb	r3, [r4, #0]
 80073ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80073b0:	d10a      	bne.n	80073c8 <_svfiprintf_r+0x130>
 80073b2:	7863      	ldrb	r3, [r4, #1]
 80073b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b6:	d132      	bne.n	800741e <_svfiprintf_r+0x186>
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	9203      	str	r2, [sp, #12]
 80073c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073c4:	3402      	adds	r4, #2
 80073c6:	9305      	str	r3, [sp, #20]
 80073c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800748c <_svfiprintf_r+0x1f4>
 80073cc:	7821      	ldrb	r1, [r4, #0]
 80073ce:	2203      	movs	r2, #3
 80073d0:	4650      	mov	r0, sl
 80073d2:	f7f8 ff05 	bl	80001e0 <memchr>
 80073d6:	b138      	cbz	r0, 80073e8 <_svfiprintf_r+0x150>
 80073d8:	9b04      	ldr	r3, [sp, #16]
 80073da:	eba0 000a 	sub.w	r0, r0, sl
 80073de:	2240      	movs	r2, #64	@ 0x40
 80073e0:	4082      	lsls	r2, r0
 80073e2:	4313      	orrs	r3, r2
 80073e4:	3401      	adds	r4, #1
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ec:	4824      	ldr	r0, [pc, #144]	@ (8007480 <_svfiprintf_r+0x1e8>)
 80073ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073f2:	2206      	movs	r2, #6
 80073f4:	f7f8 fef4 	bl	80001e0 <memchr>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d036      	beq.n	800746a <_svfiprintf_r+0x1d2>
 80073fc:	4b21      	ldr	r3, [pc, #132]	@ (8007484 <_svfiprintf_r+0x1ec>)
 80073fe:	bb1b      	cbnz	r3, 8007448 <_svfiprintf_r+0x1b0>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	3307      	adds	r3, #7
 8007404:	f023 0307 	bic.w	r3, r3, #7
 8007408:	3308      	adds	r3, #8
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740e:	4433      	add	r3, r6
 8007410:	9309      	str	r3, [sp, #36]	@ 0x24
 8007412:	e76a      	b.n	80072ea <_svfiprintf_r+0x52>
 8007414:	fb0c 3202 	mla	r2, ip, r2, r3
 8007418:	460c      	mov	r4, r1
 800741a:	2001      	movs	r0, #1
 800741c:	e7a8      	b.n	8007370 <_svfiprintf_r+0xd8>
 800741e:	2300      	movs	r3, #0
 8007420:	3401      	adds	r4, #1
 8007422:	9305      	str	r3, [sp, #20]
 8007424:	4619      	mov	r1, r3
 8007426:	f04f 0c0a 	mov.w	ip, #10
 800742a:	4620      	mov	r0, r4
 800742c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007430:	3a30      	subs	r2, #48	@ 0x30
 8007432:	2a09      	cmp	r2, #9
 8007434:	d903      	bls.n	800743e <_svfiprintf_r+0x1a6>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0c6      	beq.n	80073c8 <_svfiprintf_r+0x130>
 800743a:	9105      	str	r1, [sp, #20]
 800743c:	e7c4      	b.n	80073c8 <_svfiprintf_r+0x130>
 800743e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007442:	4604      	mov	r4, r0
 8007444:	2301      	movs	r3, #1
 8007446:	e7f0      	b.n	800742a <_svfiprintf_r+0x192>
 8007448:	ab03      	add	r3, sp, #12
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	462a      	mov	r2, r5
 800744e:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <_svfiprintf_r+0x1f0>)
 8007450:	a904      	add	r1, sp, #16
 8007452:	4638      	mov	r0, r7
 8007454:	f3af 8000 	nop.w
 8007458:	1c42      	adds	r2, r0, #1
 800745a:	4606      	mov	r6, r0
 800745c:	d1d6      	bne.n	800740c <_svfiprintf_r+0x174>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	065b      	lsls	r3, r3, #25
 8007462:	f53f af2d 	bmi.w	80072c0 <_svfiprintf_r+0x28>
 8007466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007468:	e72c      	b.n	80072c4 <_svfiprintf_r+0x2c>
 800746a:	ab03      	add	r3, sp, #12
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	462a      	mov	r2, r5
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <_svfiprintf_r+0x1f0>)
 8007472:	a904      	add	r1, sp, #16
 8007474:	4638      	mov	r0, r7
 8007476:	f000 f879 	bl	800756c <_printf_i>
 800747a:	e7ed      	b.n	8007458 <_svfiprintf_r+0x1c0>
 800747c:	08007988 	.word	0x08007988
 8007480:	08007992 	.word	0x08007992
 8007484:	00000000 	.word	0x00000000
 8007488:	080071e1 	.word	0x080071e1
 800748c:	0800798e 	.word	0x0800798e

08007490 <_printf_common>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	4616      	mov	r6, r2
 8007496:	4698      	mov	r8, r3
 8007498:	688a      	ldr	r2, [r1, #8]
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bfb8      	it	lt
 80074a4:	4613      	movlt	r3, r2
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074ac:	4607      	mov	r7, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	b10a      	cbz	r2, 80074b6 <_printf_common+0x26>
 80074b2:	3301      	adds	r3, #1
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	0699      	lsls	r1, r3, #26
 80074ba:	bf42      	ittt	mi
 80074bc:	6833      	ldrmi	r3, [r6, #0]
 80074be:	3302      	addmi	r3, #2
 80074c0:	6033      	strmi	r3, [r6, #0]
 80074c2:	6825      	ldr	r5, [r4, #0]
 80074c4:	f015 0506 	ands.w	r5, r5, #6
 80074c8:	d106      	bne.n	80074d8 <_printf_common+0x48>
 80074ca:	f104 0a19 	add.w	sl, r4, #25
 80074ce:	68e3      	ldr	r3, [r4, #12]
 80074d0:	6832      	ldr	r2, [r6, #0]
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc26      	bgt.n	8007526 <_printf_common+0x96>
 80074d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	3b00      	subs	r3, #0
 80074e0:	bf18      	it	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	0692      	lsls	r2, r2, #26
 80074e6:	d42b      	bmi.n	8007540 <_printf_common+0xb0>
 80074e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074ec:	4641      	mov	r1, r8
 80074ee:	4638      	mov	r0, r7
 80074f0:	47c8      	blx	r9
 80074f2:	3001      	adds	r0, #1
 80074f4:	d01e      	beq.n	8007534 <_printf_common+0xa4>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	f003 0306 	and.w	r3, r3, #6
 80074fe:	2b04      	cmp	r3, #4
 8007500:	bf02      	ittt	eq
 8007502:	68e5      	ldreq	r5, [r4, #12]
 8007504:	6833      	ldreq	r3, [r6, #0]
 8007506:	1aed      	subeq	r5, r5, r3
 8007508:	68a3      	ldr	r3, [r4, #8]
 800750a:	bf0c      	ite	eq
 800750c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007510:	2500      	movne	r5, #0
 8007512:	4293      	cmp	r3, r2
 8007514:	bfc4      	itt	gt
 8007516:	1a9b      	subgt	r3, r3, r2
 8007518:	18ed      	addgt	r5, r5, r3
 800751a:	2600      	movs	r6, #0
 800751c:	341a      	adds	r4, #26
 800751e:	42b5      	cmp	r5, r6
 8007520:	d11a      	bne.n	8007558 <_printf_common+0xc8>
 8007522:	2000      	movs	r0, #0
 8007524:	e008      	b.n	8007538 <_printf_common+0xa8>
 8007526:	2301      	movs	r3, #1
 8007528:	4652      	mov	r2, sl
 800752a:	4641      	mov	r1, r8
 800752c:	4638      	mov	r0, r7
 800752e:	47c8      	blx	r9
 8007530:	3001      	adds	r0, #1
 8007532:	d103      	bne.n	800753c <_printf_common+0xac>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	3501      	adds	r5, #1
 800753e:	e7c6      	b.n	80074ce <_printf_common+0x3e>
 8007540:	18e1      	adds	r1, r4, r3
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	2030      	movs	r0, #48	@ 0x30
 8007546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800754a:	4422      	add	r2, r4
 800754c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007550:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007554:	3302      	adds	r3, #2
 8007556:	e7c7      	b.n	80074e8 <_printf_common+0x58>
 8007558:	2301      	movs	r3, #1
 800755a:	4622      	mov	r2, r4
 800755c:	4641      	mov	r1, r8
 800755e:	4638      	mov	r0, r7
 8007560:	47c8      	blx	r9
 8007562:	3001      	adds	r0, #1
 8007564:	d0e6      	beq.n	8007534 <_printf_common+0xa4>
 8007566:	3601      	adds	r6, #1
 8007568:	e7d9      	b.n	800751e <_printf_common+0x8e>
	...

0800756c <_printf_i>:
 800756c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	7e0f      	ldrb	r7, [r1, #24]
 8007572:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007574:	2f78      	cmp	r7, #120	@ 0x78
 8007576:	4691      	mov	r9, r2
 8007578:	4680      	mov	r8, r0
 800757a:	460c      	mov	r4, r1
 800757c:	469a      	mov	sl, r3
 800757e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007582:	d807      	bhi.n	8007594 <_printf_i+0x28>
 8007584:	2f62      	cmp	r7, #98	@ 0x62
 8007586:	d80a      	bhi.n	800759e <_printf_i+0x32>
 8007588:	2f00      	cmp	r7, #0
 800758a:	f000 80d1 	beq.w	8007730 <_printf_i+0x1c4>
 800758e:	2f58      	cmp	r7, #88	@ 0x58
 8007590:	f000 80b8 	beq.w	8007704 <_printf_i+0x198>
 8007594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800759c:	e03a      	b.n	8007614 <_printf_i+0xa8>
 800759e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075a2:	2b15      	cmp	r3, #21
 80075a4:	d8f6      	bhi.n	8007594 <_printf_i+0x28>
 80075a6:	a101      	add	r1, pc, #4	@ (adr r1, 80075ac <_printf_i+0x40>)
 80075a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075ac:	08007605 	.word	0x08007605
 80075b0:	08007619 	.word	0x08007619
 80075b4:	08007595 	.word	0x08007595
 80075b8:	08007595 	.word	0x08007595
 80075bc:	08007595 	.word	0x08007595
 80075c0:	08007595 	.word	0x08007595
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007595 	.word	0x08007595
 80075cc:	08007595 	.word	0x08007595
 80075d0:	08007595 	.word	0x08007595
 80075d4:	08007595 	.word	0x08007595
 80075d8:	08007717 	.word	0x08007717
 80075dc:	08007643 	.word	0x08007643
 80075e0:	080076d1 	.word	0x080076d1
 80075e4:	08007595 	.word	0x08007595
 80075e8:	08007595 	.word	0x08007595
 80075ec:	08007739 	.word	0x08007739
 80075f0:	08007595 	.word	0x08007595
 80075f4:	08007643 	.word	0x08007643
 80075f8:	08007595 	.word	0x08007595
 80075fc:	08007595 	.word	0x08007595
 8007600:	080076d9 	.word	0x080076d9
 8007604:	6833      	ldr	r3, [r6, #0]
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6032      	str	r2, [r6, #0]
 800760c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007614:	2301      	movs	r3, #1
 8007616:	e09c      	b.n	8007752 <_printf_i+0x1e6>
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	1d19      	adds	r1, r3, #4
 800761e:	6031      	str	r1, [r6, #0]
 8007620:	0606      	lsls	r6, r0, #24
 8007622:	d501      	bpl.n	8007628 <_printf_i+0xbc>
 8007624:	681d      	ldr	r5, [r3, #0]
 8007626:	e003      	b.n	8007630 <_printf_i+0xc4>
 8007628:	0645      	lsls	r5, r0, #25
 800762a:	d5fb      	bpl.n	8007624 <_printf_i+0xb8>
 800762c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007630:	2d00      	cmp	r5, #0
 8007632:	da03      	bge.n	800763c <_printf_i+0xd0>
 8007634:	232d      	movs	r3, #45	@ 0x2d
 8007636:	426d      	negs	r5, r5
 8007638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763c:	4858      	ldr	r0, [pc, #352]	@ (80077a0 <_printf_i+0x234>)
 800763e:	230a      	movs	r3, #10
 8007640:	e011      	b.n	8007666 <_printf_i+0xfa>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	0608      	lsls	r0, r1, #24
 8007648:	f853 5b04 	ldr.w	r5, [r3], #4
 800764c:	d402      	bmi.n	8007654 <_printf_i+0xe8>
 800764e:	0649      	lsls	r1, r1, #25
 8007650:	bf48      	it	mi
 8007652:	b2ad      	uxthmi	r5, r5
 8007654:	2f6f      	cmp	r7, #111	@ 0x6f
 8007656:	4852      	ldr	r0, [pc, #328]	@ (80077a0 <_printf_i+0x234>)
 8007658:	6033      	str	r3, [r6, #0]
 800765a:	bf14      	ite	ne
 800765c:	230a      	movne	r3, #10
 800765e:	2308      	moveq	r3, #8
 8007660:	2100      	movs	r1, #0
 8007662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007666:	6866      	ldr	r6, [r4, #4]
 8007668:	60a6      	str	r6, [r4, #8]
 800766a:	2e00      	cmp	r6, #0
 800766c:	db05      	blt.n	800767a <_printf_i+0x10e>
 800766e:	6821      	ldr	r1, [r4, #0]
 8007670:	432e      	orrs	r6, r5
 8007672:	f021 0104 	bic.w	r1, r1, #4
 8007676:	6021      	str	r1, [r4, #0]
 8007678:	d04b      	beq.n	8007712 <_printf_i+0x1a6>
 800767a:	4616      	mov	r6, r2
 800767c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007680:	fb03 5711 	mls	r7, r3, r1, r5
 8007684:	5dc7      	ldrb	r7, [r0, r7]
 8007686:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800768a:	462f      	mov	r7, r5
 800768c:	42bb      	cmp	r3, r7
 800768e:	460d      	mov	r5, r1
 8007690:	d9f4      	bls.n	800767c <_printf_i+0x110>
 8007692:	2b08      	cmp	r3, #8
 8007694:	d10b      	bne.n	80076ae <_printf_i+0x142>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	07df      	lsls	r7, r3, #31
 800769a:	d508      	bpl.n	80076ae <_printf_i+0x142>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	6861      	ldr	r1, [r4, #4]
 80076a0:	4299      	cmp	r1, r3
 80076a2:	bfde      	ittt	le
 80076a4:	2330      	movle	r3, #48	@ 0x30
 80076a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ae:	1b92      	subs	r2, r2, r6
 80076b0:	6122      	str	r2, [r4, #16]
 80076b2:	f8cd a000 	str.w	sl, [sp]
 80076b6:	464b      	mov	r3, r9
 80076b8:	aa03      	add	r2, sp, #12
 80076ba:	4621      	mov	r1, r4
 80076bc:	4640      	mov	r0, r8
 80076be:	f7ff fee7 	bl	8007490 <_printf_common>
 80076c2:	3001      	adds	r0, #1
 80076c4:	d14a      	bne.n	800775c <_printf_i+0x1f0>
 80076c6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ca:	b004      	add	sp, #16
 80076cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	f043 0320 	orr.w	r3, r3, #32
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	4832      	ldr	r0, [pc, #200]	@ (80077a4 <_printf_i+0x238>)
 80076da:	2778      	movs	r7, #120	@ 0x78
 80076dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	6831      	ldr	r1, [r6, #0]
 80076e4:	061f      	lsls	r7, r3, #24
 80076e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80076ea:	d402      	bmi.n	80076f2 <_printf_i+0x186>
 80076ec:	065f      	lsls	r7, r3, #25
 80076ee:	bf48      	it	mi
 80076f0:	b2ad      	uxthmi	r5, r5
 80076f2:	6031      	str	r1, [r6, #0]
 80076f4:	07d9      	lsls	r1, r3, #31
 80076f6:	bf44      	itt	mi
 80076f8:	f043 0320 	orrmi.w	r3, r3, #32
 80076fc:	6023      	strmi	r3, [r4, #0]
 80076fe:	b11d      	cbz	r5, 8007708 <_printf_i+0x19c>
 8007700:	2310      	movs	r3, #16
 8007702:	e7ad      	b.n	8007660 <_printf_i+0xf4>
 8007704:	4826      	ldr	r0, [pc, #152]	@ (80077a0 <_printf_i+0x234>)
 8007706:	e7e9      	b.n	80076dc <_printf_i+0x170>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	f023 0320 	bic.w	r3, r3, #32
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	e7f6      	b.n	8007700 <_printf_i+0x194>
 8007712:	4616      	mov	r6, r2
 8007714:	e7bd      	b.n	8007692 <_printf_i+0x126>
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	6825      	ldr	r5, [r4, #0]
 800771a:	6961      	ldr	r1, [r4, #20]
 800771c:	1d18      	adds	r0, r3, #4
 800771e:	6030      	str	r0, [r6, #0]
 8007720:	062e      	lsls	r6, r5, #24
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	d501      	bpl.n	800772a <_printf_i+0x1be>
 8007726:	6019      	str	r1, [r3, #0]
 8007728:	e002      	b.n	8007730 <_printf_i+0x1c4>
 800772a:	0668      	lsls	r0, r5, #25
 800772c:	d5fb      	bpl.n	8007726 <_printf_i+0x1ba>
 800772e:	8019      	strh	r1, [r3, #0]
 8007730:	2300      	movs	r3, #0
 8007732:	6123      	str	r3, [r4, #16]
 8007734:	4616      	mov	r6, r2
 8007736:	e7bc      	b.n	80076b2 <_printf_i+0x146>
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	6032      	str	r2, [r6, #0]
 800773e:	681e      	ldr	r6, [r3, #0]
 8007740:	6862      	ldr	r2, [r4, #4]
 8007742:	2100      	movs	r1, #0
 8007744:	4630      	mov	r0, r6
 8007746:	f7f8 fd4b 	bl	80001e0 <memchr>
 800774a:	b108      	cbz	r0, 8007750 <_printf_i+0x1e4>
 800774c:	1b80      	subs	r0, r0, r6
 800774e:	6060      	str	r0, [r4, #4]
 8007750:	6863      	ldr	r3, [r4, #4]
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	2300      	movs	r3, #0
 8007756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800775a:	e7aa      	b.n	80076b2 <_printf_i+0x146>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	4632      	mov	r2, r6
 8007760:	4649      	mov	r1, r9
 8007762:	4640      	mov	r0, r8
 8007764:	47d0      	blx	sl
 8007766:	3001      	adds	r0, #1
 8007768:	d0ad      	beq.n	80076c6 <_printf_i+0x15a>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	079b      	lsls	r3, r3, #30
 800776e:	d413      	bmi.n	8007798 <_printf_i+0x22c>
 8007770:	68e0      	ldr	r0, [r4, #12]
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	4298      	cmp	r0, r3
 8007776:	bfb8      	it	lt
 8007778:	4618      	movlt	r0, r3
 800777a:	e7a6      	b.n	80076ca <_printf_i+0x15e>
 800777c:	2301      	movs	r3, #1
 800777e:	4632      	mov	r2, r6
 8007780:	4649      	mov	r1, r9
 8007782:	4640      	mov	r0, r8
 8007784:	47d0      	blx	sl
 8007786:	3001      	adds	r0, #1
 8007788:	d09d      	beq.n	80076c6 <_printf_i+0x15a>
 800778a:	3501      	adds	r5, #1
 800778c:	68e3      	ldr	r3, [r4, #12]
 800778e:	9903      	ldr	r1, [sp, #12]
 8007790:	1a5b      	subs	r3, r3, r1
 8007792:	42ab      	cmp	r3, r5
 8007794:	dcf2      	bgt.n	800777c <_printf_i+0x210>
 8007796:	e7eb      	b.n	8007770 <_printf_i+0x204>
 8007798:	2500      	movs	r5, #0
 800779a:	f104 0619 	add.w	r6, r4, #25
 800779e:	e7f5      	b.n	800778c <_printf_i+0x220>
 80077a0:	08007999 	.word	0x08007999
 80077a4:	080079aa 	.word	0x080079aa

080077a8 <memmove>:
 80077a8:	4288      	cmp	r0, r1
 80077aa:	b510      	push	{r4, lr}
 80077ac:	eb01 0402 	add.w	r4, r1, r2
 80077b0:	d902      	bls.n	80077b8 <memmove+0x10>
 80077b2:	4284      	cmp	r4, r0
 80077b4:	4623      	mov	r3, r4
 80077b6:	d807      	bhi.n	80077c8 <memmove+0x20>
 80077b8:	1e43      	subs	r3, r0, #1
 80077ba:	42a1      	cmp	r1, r4
 80077bc:	d008      	beq.n	80077d0 <memmove+0x28>
 80077be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077c6:	e7f8      	b.n	80077ba <memmove+0x12>
 80077c8:	4402      	add	r2, r0
 80077ca:	4601      	mov	r1, r0
 80077cc:	428a      	cmp	r2, r1
 80077ce:	d100      	bne.n	80077d2 <memmove+0x2a>
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077da:	e7f7      	b.n	80077cc <memmove+0x24>

080077dc <_sbrk_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d06      	ldr	r5, [pc, #24]	@ (80077f8 <_sbrk_r+0x1c>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7f9 fb90 	bl	8000f0c <_sbrk>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_sbrk_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_sbrk_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20001268 	.word	0x20001268

080077fc <_realloc_r>:
 80077fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	4607      	mov	r7, r0
 8007802:	4614      	mov	r4, r2
 8007804:	460d      	mov	r5, r1
 8007806:	b921      	cbnz	r1, 8007812 <_realloc_r+0x16>
 8007808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780c:	4611      	mov	r1, r2
 800780e:	f7ff bc5b 	b.w	80070c8 <_malloc_r>
 8007812:	b92a      	cbnz	r2, 8007820 <_realloc_r+0x24>
 8007814:	f7ff fbec 	bl	8006ff0 <_free_r>
 8007818:	4625      	mov	r5, r4
 800781a:	4628      	mov	r0, r5
 800781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007820:	f000 f81a 	bl	8007858 <_malloc_usable_size_r>
 8007824:	4284      	cmp	r4, r0
 8007826:	4606      	mov	r6, r0
 8007828:	d802      	bhi.n	8007830 <_realloc_r+0x34>
 800782a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800782e:	d8f4      	bhi.n	800781a <_realloc_r+0x1e>
 8007830:	4621      	mov	r1, r4
 8007832:	4638      	mov	r0, r7
 8007834:	f7ff fc48 	bl	80070c8 <_malloc_r>
 8007838:	4680      	mov	r8, r0
 800783a:	b908      	cbnz	r0, 8007840 <_realloc_r+0x44>
 800783c:	4645      	mov	r5, r8
 800783e:	e7ec      	b.n	800781a <_realloc_r+0x1e>
 8007840:	42b4      	cmp	r4, r6
 8007842:	4622      	mov	r2, r4
 8007844:	4629      	mov	r1, r5
 8007846:	bf28      	it	cs
 8007848:	4632      	movcs	r2, r6
 800784a:	f7ff fbc3 	bl	8006fd4 <memcpy>
 800784e:	4629      	mov	r1, r5
 8007850:	4638      	mov	r0, r7
 8007852:	f7ff fbcd 	bl	8006ff0 <_free_r>
 8007856:	e7f1      	b.n	800783c <_realloc_r+0x40>

08007858 <_malloc_usable_size_r>:
 8007858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785c:	1f18      	subs	r0, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfbc      	itt	lt
 8007862:	580b      	ldrlt	r3, [r1, r0]
 8007864:	18c0      	addlt	r0, r0, r3
 8007866:	4770      	bx	lr

08007868 <_init>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr

08007874 <_fini>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr
