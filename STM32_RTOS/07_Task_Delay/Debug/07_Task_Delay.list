
07_Task_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000505c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080052e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  20000060  08005344  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  08005344  000071c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f15c  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f5  00000000  00000000  000161ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000187e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a67  00000000  00000000  00019588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002754a  00000000  00000000  00019fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9bf  00000000  00000000  00041539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0380  00000000  00000000  00050ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  001412bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00144e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051d4 	.word	0x080051d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080051d4 	.word	0x080051d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	200000d0 	.word	0x200000d0

080005e0 <uart_send>:
static void MX_USART2_UART_Init(void);     // Initialize UART2
void StartDefaultTask(void const * argument); // Default RTOS task

// Function to send a string over UART2
void uart_send(char *s)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    // Transmit the string through UART2
    HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 1000);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <uart_send+0x28>)
 80005fa:	f002 f971 	bl	80028e0 <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200002d0 	.word	0x200002d0

0800060c <task1_handler>:

// Task1: Prints message and LED status
void task1_handler(void *p)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b090      	sub	sp, #64	@ 0x40
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    char msg[50]; // Buffer to store messages
    while (1)     // Infinite loop
    {
        // Print the task name
        sprintf(msg, "%s\r\n", (char*)p);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4910      	ldr	r1, [pc, #64]	@ (800065c <task1_handler+0x50>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f939 	bl	8004894 <siprintf>
        uart_send(msg);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffda 	bl	80005e0 <uart_send>

        // Print the current LED status (ON=1, OFF=0)
        sprintf(msg, "LED status: %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 800062c:	2120      	movs	r1, #32
 800062e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000632:	f000 fd9d 	bl	8001170 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4908      	ldr	r1, [pc, #32]	@ (8000660 <task1_handler+0x54>)
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f927 	bl	8004894 <siprintf>
        uart_send(msg);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffc8 	bl	80005e0 <uart_send>

        // Wait for 1 second
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f003 f96c 	bl	8003930 <vTaskDelay>
        sprintf(msg, "%s\r\n", (char*)p);
 8000658:	bf00      	nop
 800065a:	e7db      	b.n	8000614 <task1_handler+0x8>
 800065c:	080051ec 	.word	0x080051ec
 8000660:	080051f4 	.word	0x080051f4

08000664 <task2_handler>:
    }
}

// Task2: Prints message and toggles LED
void task2_handler(void *p)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b090      	sub	sp, #64	@ 0x40
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    char msg[50]; // Buffer to store messages
    while (1)     // Infinite loop
    {
        // Print the task name
        sprintf(msg, "%s\r\n", (char *)p);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	490a      	ldr	r1, [pc, #40]	@ (800069c <task2_handler+0x38>)
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f90d 	bl	8004894 <siprintf>
        uart_send(msg);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffae 	bl	80005e0 <uart_send>

        // Toggle LED
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000684:	2120      	movs	r1, #32
 8000686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068a:	f000 fda1 	bl	80011d0 <HAL_GPIO_TogglePin>

        // Wait for 1 second
        vTaskDelay(pdMS_TO_TICKS(1000));
 800068e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000692:	f003 f94d 	bl	8003930 <vTaskDelay>
        sprintf(msg, "%s\r\n", (char *)p);
 8000696:	bf00      	nop
 8000698:	e7e8      	b.n	800066c <task2_handler+0x8>
 800069a:	bf00      	nop
 800069c:	080051ec 	.word	0x080051ec

080006a0 <main>:
    }
}

int main(void)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af02      	add	r7, sp, #8
    HAL_Init();              // Initialize HAL library
 80006a6:	f000 fa57 	bl	8000b58 <HAL_Init>

    SystemClock_Config();    // Configure system clock
 80006aa:	f000 f841 	bl	8000730 <SystemClock_Config>

    MX_GPIO_Init();          // Initialize GPIO
 80006ae:	f000 f8c1 	bl	8000834 <MX_GPIO_Init>
    MX_USART2_UART_Init();   // Initialize UART2
 80006b2:	f000 f88f 	bl	80007d4 <MX_USART2_UART_Init>

    // Create default RTOS task
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <main+0x68>)
 80006b8:	1d3c      	adds	r4, r7, #4
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fe83 	bl	80033d8 <osThreadCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <main+0x6c>)
 80006d6:	6013      	str	r3, [r2, #0]

    // Create Task 1
    xTaskCreate(task1_handler, "task-1", configMINIMAL_STACK_SIZE, "TASK-1", 1, &handle1);
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <main+0x70>)
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <main+0x74>)
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <main+0x78>)
 80006e6:	480d      	ldr	r0, [pc, #52]	@ (800071c <main+0x7c>)
 80006e8:	f002 ffea 	bl	80036c0 <xTaskCreate>

    // Create Task 2
    xTaskCreate(task2_handler, "task-2", configMINIMAL_STACK_SIZE, "TASK-2", 1, &handle2);
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <main+0x80>)
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	2301      	movs	r3, #1
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <main+0x84>)
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	490b      	ldr	r1, [pc, #44]	@ (8000728 <main+0x88>)
 80006fa:	480c      	ldr	r0, [pc, #48]	@ (800072c <main+0x8c>)
 80006fc:	f002 ffe0 	bl	80036c0 <xTaskCreate>

    osKernelStart();         // Start RTOS scheduler
 8000700:	f002 fe63 	bl	80033ca <osKernelStart>

    while (1)                // Should never reach here
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x64>
 8000708:	08005234 	.word	0x08005234
 800070c:	20000358 	.word	0x20000358
 8000710:	2000035c 	.word	0x2000035c
 8000714:	08005208 	.word	0x08005208
 8000718:	08005210 	.word	0x08005210
 800071c:	0800060d 	.word	0x0800060d
 8000720:	20000360 	.word	0x20000360
 8000724:	08005218 	.word	0x08005218
 8000728:	08005220 	.word	0x08005220
 800072c:	08000665 	.word	0x08000665

08000730 <SystemClock_Config>:
    }
}

// Configure system clock
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	@ 0x58
 8000734:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};  // Oscillator config structure
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2244      	movs	r2, #68	@ 0x44
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f8ca 	bl	80048d8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};  // Clock config structure
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

    // Set voltage scaling
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000752:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000756:	f000 fd63 	bl	8001220 <HAL_PWREx_ControlVoltageScaling>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x34>
    {
        Error_Handler(); // If error, call error handler
 8000760:	f000 f8d6 	bl	8000910 <Error_Handler>
    }

    // Configure HSI (High-Speed Internal oscillator) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800076c:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 800077e:	230a      	movs	r3, #10
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000782:	2307      	movs	r3, #7
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fd9a 	bl	80012cc <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x72>
    {
        Error_Handler();
 800079e:	f000 f8b7 	bl	8000910 <Error_Handler>
    }

    // Configure CPU, AHB, APB bus clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	603b      	str	r3, [r7, #0]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	2104      	movs	r1, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f962 	bl	8001a84 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
    {
        Error_Handler();
 80007c6:	f000 f8a3 	bl	8000910 <Error_Handler>
    }
}
 80007ca:	bf00      	nop
 80007cc:	3758      	adds	r7, #88	@ 0x58
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <MX_USART2_UART_Init>:

// Initialize USART2
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;                          // Select USART2
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <MX_USART2_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;                     // Set baud rate
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;       // 8 data bits
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;            // 1 stop bit
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;             // No parity
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;                // Enable TX and RX
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;       // No flow control
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;   // Oversampling by 16
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE; // Disable 1-bit sampling
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; // No advanced features
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000818:	f002 f814 	bl	8002844 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler(); // If initialization fails
 8000822:	f000 f875 	bl	8000910 <Error_Handler>
    }
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200002d0 	.word	0x200002d0
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:

// Initialize GPIO
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};  // GPIO config structure
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable clock for GPIOC
 800084a:	4b2b      	ldr	r3, [pc, #172]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a2a      	ldr	r2, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();  // Enable clock for GPIOH
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a24      	ldr	r2, [pc, #144]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable clock for GPIOA
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable clock for GPIOB
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Reset LED pin (turn OFF)
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f000 fc75 	bl	80011a0 <HAL_GPIO_WritePin>

    // Configure push button (B1) pin as interrupt on falling edge
    GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <MX_GPIO_Init+0xc8>)
 80008ce:	f000 faa5 	bl	8000e1c <HAL_GPIO_Init>

    // Configure LED (LD2) pin as output
    GPIO_InitStruct.Pin = LD2_Pin;
 80008d2:	2320      	movs	r3, #32
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f000 fa96 	bl	8000e1c <HAL_GPIO_Init>
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000800 	.word	0x48000800

08000900 <StartDefaultTask>:

// Default RTOS task
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    for (;;)           // Infinite loop
    {
        osDelay(1);    // Delay for 1 tick
 8000908:	2001      	movs	r0, #1
 800090a:	f002 fdb1 	bl	8003470 <osDelay>
 800090e:	e7fb      	b.n	8000908 <StartDefaultTask+0x8>

08000910 <Error_Handler>:
    }
}

// Error handler
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
    __disable_irq();   // Disable interrupts
    while (1)          // Infinite loop
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_MspInit+0x4c>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <HAL_MspInit+0x4c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	@ 0x60
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_MspInit+0x4c>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <HAL_MspInit+0x4c>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	@ 0x58
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_MspInit+0x4c>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	f06f 0001 	mvn.w	r0, #1
 800095a:	f000 fa36 	bl	8000dca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	@ 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2288      	movs	r2, #136	@ 0x88
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f003 ffa3 	bl	80048d8 <memset>
  if(huart->Instance==USART2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <HAL_UART_MspInit+0xb0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13b      	bne.n	8000a14 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800099c:	2302      	movs	r3, #2
 800099e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fa8f 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b4:	f7ff ffac 	bl	8000910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0xb4>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009bc:	4a18      	ldr	r2, [pc, #96]	@ (8000a20 <HAL_UART_MspInit+0xb4>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <HAL_UART_MspInit+0xb4>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <HAL_UART_MspInit+0xb4>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <HAL_UART_MspInit+0xb4>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_UART_MspInit+0xb4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e8:	230c      	movs	r3, #12
 80009ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a00:	2307      	movs	r3, #7
 8000a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a10:	f000 fa04 	bl	8000e1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a14:	bf00      	nop
 8000a16:	37b0      	adds	r7, #176	@ 0xb0
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8d7 	bl	8000c10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a62:	f003 fa95 	bl	8003f90 <xTaskGetSchedulerState>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d001      	beq.n	8000a70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a6c:	f003 fcd4 	bl	8004418 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f003 ff20 	bl	80048e8 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20018000 	.word	0x20018000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000364 	.word	0x20000364
 8000adc:	200011c0 	.word	0x200011c0

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fedf 	bl	80048f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fdb3 	bl	80006a0 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b48:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8000b4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b50:	200011c0 	.word	0x200011c0

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <HAL_Init+0x3c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_Init+0x3c>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 f920 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	200f      	movs	r0, #15
 8000b76:	f000 f80f 	bl	8000b98 <HAL_InitTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	e001      	b.n	8000b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b86:	f7ff fec9 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f91d 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f8f5 	bl	8000dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000368 	.word	0x20000368

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000368 	.word	0x20000368

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e17f      	b.n	800112c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8171 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d118      	bne.n	8000efc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ac 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b5f      	ldr	r3, [pc, #380]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fda:	4b5c      	ldr	r3, [pc, #368]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8001150 <HAL_GPIO_Init+0x334>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x242>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	@ (8001154 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x23e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x23a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	@ (800115c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x236>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x232>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x22e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x22a>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001070:	4937      	ldr	r1, [pc, #220]	@ (8001150 <HAL_GPIO_Init+0x334>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <HAL_GPIO_Init+0x350>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010cc:	4a27      	ldr	r2, [pc, #156]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f6:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <HAL_GPIO_Init+0x350>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae78 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	48001000 	.word	0x48001000
 8001164:	48001400 	.word	0x48001400
 8001168:	48001800 	.word	0x48001800
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43d9      	mvns	r1, r3
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	400b      	ands	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <HAL_PWREx_GetVoltageRange+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800122e:	d130      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800123c:	d038      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001246:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001248:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2232      	movs	r2, #50	@ 0x32
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	e002      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001278:	d102      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f2      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128c:	d110      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e00f      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129e:	d007      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012a8:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007000 	.word	0x40007000
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83

080012cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e3ca      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012de:	4b97      	ldr	r3, [pc, #604]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e8:	4b94      	ldr	r3, [pc, #592]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80e4 	beq.w	80014c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_RCC_OscConfig+0x4a>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	f040 808b 	bne.w	8001424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b01      	cmp	r3, #1
 8001312:	f040 8087 	bne.w	8001424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001316:	4b89      	ldr	r3, [pc, #548]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x62>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e3a2      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	4b82      	ldr	r3, [pc, #520]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_RCC_OscConfig+0x7c>
 800133e:	4b7f      	ldr	r3, [pc, #508]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001346:	e005      	b.n	8001354 <HAL_RCC_OscConfig+0x88>
 8001348:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001354:	4293      	cmp	r3, r2
 8001356:	d223      	bcs.n	80013a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd55 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e383      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136c:	4b73      	ldr	r3, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a72      	ldr	r2, [pc, #456]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b70      	ldr	r3, [pc, #448]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	496d      	ldr	r1, [pc, #436]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138a:	4b6c      	ldr	r3, [pc, #432]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4968      	ldr	r1, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
 800139e:	e025      	b.n	80013ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a0:	4b66      	ldr	r3, [pc, #408]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a65      	ldr	r2, [pc, #404]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b63      	ldr	r3, [pc, #396]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4960      	ldr	r1, [pc, #384]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	495b      	ldr	r1, [pc, #364]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fd15 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e343      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ec:	f000 fc4a 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b52      	ldr	r3, [pc, #328]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	4950      	ldr	r1, [pc, #320]	@ (8001540 <HAL_RCC_OscConfig+0x274>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	4a4e      	ldr	r2, [pc, #312]	@ (8001544 <HAL_RCC_OscConfig+0x278>)
 800140a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800140c:	4b4e      	ldr	r3, [pc, #312]	@ (8001548 <HAL_RCC_OscConfig+0x27c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fbc1 	bl	8000b98 <HAL_InitTick>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d052      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	e327      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d032      	beq.n	8001492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800142c:	4b43      	ldr	r3, [pc, #268]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a42      	ldr	r2, [pc, #264]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001438:	f7ff fbfe 	bl	8000c38 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001440:	f7ff fbfa 	bl	8000c38 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e310      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001452:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145e:	4b37      	ldr	r3, [pc, #220]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a36      	ldr	r2, [pc, #216]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4931      	ldr	r1, [pc, #196]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	492c      	ldr	r1, [pc, #176]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e01a      	b.n	80014c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001492:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a29      	ldr	r2, [pc, #164]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149e:	f7ff fbcb 	bl	8000c38 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a6:	f7ff fbc7 	bl	8000c38 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e2dd      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1da>
 80014c4:	e000      	b.n	80014c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d074      	beq.n	80015be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x21a>
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d10e      	bne.n	80014fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d10b      	bne.n	80014fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d064      	beq.n	80015bc <HAL_RCC_OscConfig+0x2f0>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d160      	bne.n	80015bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e2ba      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x24a>
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e026      	b.n	8001564 <HAL_RCC_OscConfig+0x298>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151e:	d115      	bne.n	800154c <HAL_RCC_OscConfig+0x280>
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a05      	ldr	r2, [pc, #20]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a02      	ldr	r2, [pc, #8]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x298>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	08005258 	.word	0x08005258
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004
 800154c:	4ba0      	ldr	r3, [pc, #640]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a9f      	ldr	r2, [pc, #636]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b9d      	ldr	r3, [pc, #628]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a9c      	ldr	r2, [pc, #624]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb64 	bl	8000c38 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fb60 	bl	8000c38 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e276      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	4b92      	ldr	r3, [pc, #584]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2a8>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fb50 	bl	8000c38 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fb4c 	bl	8000c38 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e262      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ae:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x2d0>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d060      	beq.n	800168c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x310>
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d119      	bne.n	800160a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d116      	bne.n	800160a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	4b7c      	ldr	r3, [pc, #496]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x328>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e23f      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b76      	ldr	r3, [pc, #472]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	4973      	ldr	r1, [pc, #460]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	e040      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001612:	4b6f      	ldr	r3, [pc, #444]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a6e      	ldr	r2, [pc, #440]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fb0b 	bl	8000c38 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fb07 	bl	8000c38 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e21d      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	4b65      	ldr	r3, [pc, #404]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b62      	ldr	r3, [pc, #392]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	495f      	ldr	r1, [pc, #380]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
 8001658:	e018      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165a:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a5c      	ldr	r2, [pc, #368]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff fae7 	bl	8000c38 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fae3 	bl	8000c38 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1f9      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001680:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d03c      	beq.n	8001712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01c      	beq.n	80016da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a0:	4b4b      	ldr	r3, [pc, #300]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a6:	4a4a      	ldr	r2, [pc, #296]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fac2 	bl	8000c38 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fabe 	bl	8000c38 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1d4      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ca:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x3ec>
 80016d8:	e01b      	b.n	8001712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e0:	4a3b      	ldr	r2, [pc, #236]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff faa5 	bl	8000c38 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff faa1 	bl	8000c38 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1b7      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001704:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ef      	bne.n	80016f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80a6 	beq.w	800186c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10d      	bne.n	800174c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001748:	2301      	movs	r3, #1
 800174a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174c:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <HAL_RCC_OscConfig+0x508>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d118      	bne.n	800178a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <HAL_RCC_OscConfig+0x508>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_RCC_OscConfig+0x508>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001764:	f7ff fa68 	bl	8000c38 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176c:	f7ff fa64 	bl	8000c38 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e17a      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_RCC_OscConfig+0x508>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4d8>
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a2:	e029      	b.n	80017f8 <HAL_RCC_OscConfig+0x52c>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d115      	bne.n	80017d8 <HAL_RCC_OscConfig+0x50c>
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b2:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c2:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x52c>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40007000 	.word	0x40007000
 80017d8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017de:	4a9b      	ldr	r2, [pc, #620]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e8:	4b98      	ldr	r3, [pc, #608]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ee:	4a97      	ldr	r2, [pc, #604]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d016      	beq.n	800182e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fa1a 	bl	8000c38 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fa16 	bl	8000c38 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e12a      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ed      	beq.n	8001808 <HAL_RCC_OscConfig+0x53c>
 800182c:	e015      	b.n	800185a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff fa03 	bl	8000c38 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001834:	e00a      	b.n	800184c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7ff f9ff 	bl	8000c38 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e113      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ed      	bne.n	8001836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185a:	7ffb      	ldrb	r3, [r7, #31]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001860:	4b7a      	ldr	r3, [pc, #488]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	4a79      	ldr	r2, [pc, #484]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80fe 	beq.w	8001a72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	2b02      	cmp	r3, #2
 800187c:	f040 80d0 	bne.w	8001a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001880:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	429a      	cmp	r2, r3
 8001892:	d130      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	3b01      	subs	r3, #1
 80018a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d127      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d11f      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018c0:	2a07      	cmp	r2, #7
 80018c2:	bf14      	ite	ne
 80018c4:	2201      	movne	r2, #1
 80018c6:	2200      	moveq	r2, #0
 80018c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d113      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d06e      	beq.n	80019d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d069      	beq.n	80019d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018fc:	4b53      	ldr	r3, [pc, #332]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001908:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0ad      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001918:	4b4c      	ldr	r3, [pc, #304]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800191e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001924:	f7ff f988 	bl	8000c38 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f984 	bl	8000c38 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e09a      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194a:	4b40      	ldr	r3, [pc, #256]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <HAL_RCC_OscConfig+0x784>)
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800195a:	3a01      	subs	r2, #1
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001964:	0212      	lsls	r2, r2, #8
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800196c:	0852      	lsrs	r2, r2, #1
 800196e:	3a01      	subs	r2, #1
 8001970:	0552      	lsls	r2, r2, #21
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001978:	0852      	lsrs	r2, r2, #1
 800197a:	3a01      	subs	r2, #1
 800197c:	0652      	lsls	r2, r2, #25
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001984:	0912      	lsrs	r2, r2, #4
 8001986:	0452      	lsls	r2, r2, #17
 8001988:	430a      	orrs	r2, r1
 800198a:	4930      	ldr	r1, [pc, #192]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001990:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a2d      	ldr	r2, [pc, #180]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800199c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a8:	f7ff f946 	bl	8000c38 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f942 	bl	8000c38 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e058      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ce:	e050      	b.n	8001a72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e04f      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d148      	bne.n	8001a72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019f8:	f7ff f91e 	bl	8000c38 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f91a 	bl	8000c38 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e030      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x734>
 8001a1e:	e028      	b.n	8001a72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d023      	beq.n	8001a6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	@ (8001a4c <HAL_RCC_OscConfig+0x780>)
 8001a2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f901 	bl	8000c38 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	e00c      	b.n	8001a54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f8fd 	bl	8000c38 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d905      	bls.n	8001a54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x7b0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ec      	bne.n	8001a3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_RCC_OscConfig+0x7b0>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4905      	ldr	r1, [pc, #20]	@ (8001a7c <HAL_RCC_OscConfig+0x7b0>)
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_RCC_OscConfig+0x7b4>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e001      	b.n	8001a72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	feeefffc 	.word	0xfeeefffc

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0e7      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b75      	ldr	r3, [pc, #468]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d910      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b72      	ldr	r3, [pc, #456]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 0207 	bic.w	r2, r3, #7
 8001aae:	4970      	ldr	r1, [pc, #448]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0cf      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b66      	ldr	r3, [pc, #408]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d908      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b63      	ldr	r3, [pc, #396]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4960      	ldr	r1, [pc, #384]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d04c      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0a6      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b22:	4b54      	ldr	r3, [pc, #336]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d115      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e09a      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e08e      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e086      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b46      	ldr	r3, [pc, #280]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4943      	ldr	r1, [pc, #268]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f864 	bl	8000c38 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff f860 	bl	8000c38 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e06e      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d208      	bcs.n	8001bca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	492b      	ldr	r1, [pc, #172]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bca:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d210      	bcs.n	8001bfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 0207 	bic.w	r2, r3, #7
 8001be0:	4923      	ldr	r1, [pc, #140]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <HAL_RCC_ClockConfig+0x1ec>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e036      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	4918      	ldr	r1, [pc, #96]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d009      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4910      	ldr	r1, [pc, #64]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c38:	f000 f824 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	490b      	ldr	r1, [pc, #44]	@ (8001c78 <HAL_RCC_ClockConfig+0x1f4>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	4a09      	ldr	r2, [pc, #36]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_ClockConfig+0x1fc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe ff9b 	bl	8000b98 <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c66:	7afb      	ldrb	r3, [r7, #11]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08005258 	.word	0x08005258
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b3e      	ldr	r3, [pc, #248]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11e      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb8:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc4:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	e004      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d134      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d003      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0xac>
 8001d28:	e005      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d2c:	617b      	str	r3, [r7, #20]
      break;
 8001d2e:	e005      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d32:	617b      	str	r3, [r7, #20]
      break;
 8001d34:	e002      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	fb03 f202 	mul.w	r2, r3, r2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	0e5b      	lsrs	r3, r3, #25
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08005270 	.word	0x08005270
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4904      	ldr	r1, [pc, #16]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08005268 	.word	0x08005268

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de4:	f7ff ffda 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4904      	ldr	r1, [pc, #16]	@ (8001e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08005268 	.word	0x08005268

08001e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff f9ee 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
 8001e2a:	e014      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f9de 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5c:	d10b      	bne.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	@ 0x80
 8001e62:	d919      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e68:	d902      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e013      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e010      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	@ 0x80
 8001e7a:	d902      	bls.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00a      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	@ 0x80
 8001e86:	d102      	bne.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e004      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b70      	cmp	r3, #112	@ 0x70
 8001e92:	d101      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4909      	ldr	r1, [pc, #36]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d041      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ef0:	d02a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ef6:	d824      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001efe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f02:	d81e      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f10:	4b86      	ldr	r3, [pc, #536]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a85      	ldr	r2, [pc, #532]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fabb 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3320      	adds	r3, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fba6 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	74fb      	strb	r3, [r7, #19]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f50:	4b76      	ldr	r3, [pc, #472]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f5e:	4973      	ldr	r1, [pc, #460]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f66:	e001      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d041      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f80:	d02a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f86:	d824      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f92:	d81e      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a61      	ldr	r2, [pc, #388]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e015      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fa73 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbe:	e00c      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb5e 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd0:	e003      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fd6:	e000      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fee:	494f      	ldr	r1, [pc, #316]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ff6:	e001      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a0 	beq.w	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200e:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	4a40      	ldr	r2, [pc, #256]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002030:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203c:	2301      	movs	r3, #1
 800203e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4b3b      	ldr	r3, [pc, #236]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3a      	ldr	r2, [pc, #232]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204c:	f7fe fdf4 	bl	8000c38 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002052:	e009      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7fe fdf0 	bl	8000c38 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	74fb      	strb	r3, [r7, #19]
        break;
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002068:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d15c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207a:	4b2c      	ldr	r3, [pc, #176]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01f      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d019      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002098:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	4b21      	ldr	r3, [pc, #132]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	4a20      	ldr	r2, [pc, #128]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fdaf 	bl	8000c38 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fdab 	bl	8000c38 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d902      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	74fb      	strb	r3, [r7, #19]
            break;
 80020f4:	e006      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ec      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800211a:	4904      	ldr	r1, [pc, #16]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002122:	e009      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
 8002128:	e006      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002138:	7c7b      	ldrb	r3, [r7, #17]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b9e      	ldr	r3, [pc, #632]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	4a9d      	ldr	r2, [pc, #628]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002156:	4b98      	ldr	r3, [pc, #608]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f023 0203 	bic.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	4994      	ldr	r1, [pc, #592]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002178:	4b8f      	ldr	r3, [pc, #572]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 020c 	bic.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	498c      	ldr	r1, [pc, #560]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219a:	4b87      	ldr	r3, [pc, #540]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	4983      	ldr	r1, [pc, #524]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021bc:	4b7e      	ldr	r3, [pc, #504]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	497b      	ldr	r1, [pc, #492]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021de:	4b76      	ldr	r3, [pc, #472]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ec:	4972      	ldr	r1, [pc, #456]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002200:	4b6d      	ldr	r3, [pc, #436]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	496a      	ldr	r1, [pc, #424]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002222:	4b65      	ldr	r3, [pc, #404]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002228:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	4961      	ldr	r1, [pc, #388]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002244:	4b5c      	ldr	r3, [pc, #368]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	4959      	ldr	r1, [pc, #356]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b54      	ldr	r3, [pc, #336]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002274:	4950      	ldr	r1, [pc, #320]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002288:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	4948      	ldr	r1, [pc, #288]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	493f      	ldr	r1, [pc, #252]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d028      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022cc:	4b3a      	ldr	r3, [pc, #232]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022da:	4937      	ldr	r1, [pc, #220]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ea:	d106      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b32      	ldr	r3, [pc, #200]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a31      	ldr	r2, [pc, #196]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e011      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002302:	d10c      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f8c8 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d028      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002330:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002338:	491f      	ldr	r1, [pc, #124]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234a:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002354:	60d3      	str	r3, [r2, #12]
 8002356:	e011      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f899 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02b      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002396:	4908      	ldr	r1, [pc, #32]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a02      	ldr	r2, [pc, #8]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e014      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f867 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ec:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023fa:	4928      	ldr	r1, [pc, #160]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800240a:	d10d      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f844 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	74bb      	strb	r3, [r7, #18]
 8002426:	e011      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002430:	d10c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3320      	adds	r3, #32
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f925 	bl	8002688 <RCCEx_PLLSAI2_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002458:	4b10      	ldr	r3, [pc, #64]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002466:	490d      	ldr	r1, [pc, #52]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002480:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800248a:	4904      	ldr	r1, [pc, #16]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002492:	7cbb      	ldrb	r3, [r7, #18]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ae:	4b75      	ldr	r3, [pc, #468]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ba:	4b72      	ldr	r3, [pc, #456]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
       ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
       ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d047      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e044      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d018      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x86>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d825      	bhi.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x62>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d009      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x74>
 8002500:	e020      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002502:	4b60      	ldr	r3, [pc, #384]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e01a      	b.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e013      	b.n	800254e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002526:	4b57      	ldr	r3, [pc, #348]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002542:	e006      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e004      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
    }

    if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255a:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	430b      	orrs	r3, r1
 8002570:	4944      	ldr	r1, [pc, #272]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d17d      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800257c:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a40      	ldr	r2, [pc, #256]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fb56 	bl	8000c38 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002590:	f7fe fb52 	bl	8000c38 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a4:	4b37      	ldr	r3, [pc, #220]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d160      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	0912      	lsrs	r2, r2, #4
 80025d4:	0452      	lsls	r2, r2, #17
 80025d6:	430a      	orrs	r2, r1
 80025d8:	492a      	ldr	r1, [pc, #168]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]
 80025de:	e027      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d112      	bne.n	800260c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e6:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0211      	lsls	r1, r2, #8
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6912      	ldr	r2, [r2, #16]
 80025fc:	0852      	lsrs	r2, r2, #1
 80025fe:	3a01      	subs	r2, #1
 8002600:	0552      	lsls	r2, r2, #21
 8002602:	430a      	orrs	r2, r1
 8002604:	491f      	ldr	r1, [pc, #124]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]
 800260a:	e011      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260c:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002614:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6952      	ldr	r2, [r2, #20]
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	3a01      	subs	r2, #1
 8002626:	0652      	lsls	r2, r2, #25
 8002628:	430a      	orrs	r2, r1
 800262a:	4916      	ldr	r1, [pc, #88]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800263a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fafc 	bl	8000c38 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002644:	f7fe faf8 	bl	8000c38 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
          break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002658:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4904      	ldr	r1, [pc, #16]	@ (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002696:	4b6a      	ldr	r3, [pc, #424]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026a2:	4b67      	ldr	r3, [pc, #412]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
       ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026ba:	4b61      	ldr	r3, [pc, #388]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d047      	beq.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e044      	b.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d018      	beq.n	800270e <RCCEx_PLLSAI2_Config+0x86>
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d825      	bhi.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d002      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x62>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d009      	beq.n	80026fc <RCCEx_PLLSAI2_Config+0x74>
 80026e8:	e020      	b.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ea:	4b55      	ldr	r3, [pc, #340]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e01a      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fc:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e013      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270e:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271a:	4b49      	ldr	r3, [pc, #292]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272a:	e006      	b.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e004      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002742:	4b3f      	ldr	r3, [pc, #252]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	430b      	orrs	r3, r1
 8002758:	4939      	ldr	r1, [pc, #228]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d167      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a35      	ldr	r2, [pc, #212]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fa62 	bl	8000c38 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002776:	e009      	b.n	800278c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002778:	f7fe fa5e 	bl	8000c38 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	73fb      	strb	r3, [r7, #15]
        break;
 800278a:	e005      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800278c:	4b2c      	ldr	r3, [pc, #176]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ef      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d14a      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a4:	4b26      	ldr	r3, [pc, #152]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0912      	lsrs	r2, r2, #4
 80027bc:	0452      	lsls	r2, r2, #17
 80027be:	430a      	orrs	r2, r1
 80027c0:	491f      	ldr	r1, [pc, #124]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	614b      	str	r3, [r1, #20]
 80027c6:	e011      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6912      	ldr	r2, [r2, #16]
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0652      	lsls	r2, r2, #25
 80027e4:	430a      	orrs	r2, r1
 80027e6:	4916      	ldr	r1, [pc, #88]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ec:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fa1e 	bl	8000c38 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002800:	f7fe fa1a 	bl	8000c38 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
          break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002814:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4904      	ldr	r1, [pc, #16]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e040      	b.n	80028d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe f880 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fb6a 	bl	8002f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f8af 	bl	80029f4 <UART_SetConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e01b      	b.n	80028d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fbe9 	bl	80030a8 <UART_CheckIdleState>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d177      	bne.n	80029e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_UART_Transmit+0x24>
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e070      	b.n	80029ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2221      	movs	r2, #33	@ 0x21
 8002914:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002916:	f7fe f98f 	bl	8000c38 <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002934:	d108      	bne.n	8002948 <HAL_UART_Transmit+0x68>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d104      	bne.n	8002948 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e003      	b.n	8002950 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002950:	e02f      	b.n	80029b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	2180      	movs	r1, #128	@ 0x80
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fc4b 	bl	80031f8 <UART_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e03b      	b.n	80029ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002984:	b292      	uxth	r2, r2
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3302      	adds	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	e007      	b.n	80029a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1c9      	bne.n	8002952 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2140      	movs	r1, #64	@ 0x40
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fc15 	bl	80031f8 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e005      	b.n	80029ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b08a      	sub	sp, #40	@ 0x28
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4ba4      	ldr	r3, [pc, #656]	@ (8002cb4 <UART_SetConfig+0x2c0>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a99      	ldr	r2, [pc, #612]	@ (8002cb8 <UART_SetConfig+0x2c4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a90      	ldr	r2, [pc, #576]	@ (8002cbc <UART_SetConfig+0x2c8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d126      	bne.n	8002acc <UART_SetConfig+0xd8>
 8002a7e:	4b90      	ldr	r3, [pc, #576]	@ (8002cc0 <UART_SetConfig+0x2cc>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d81b      	bhi.n	8002ac4 <UART_SetConfig+0xd0>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <UART_SetConfig+0xa0>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002ab5 	.word	0x08002ab5
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002abd 	.word	0x08002abd
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aaa:	e116      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002aac:	2302      	movs	r3, #2
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab2:	e112      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aba:	e10e      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002abc:	2308      	movs	r3, #8
 8002abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac2:	e10a      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aca:	e106      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a7c      	ldr	r2, [pc, #496]	@ (8002cc4 <UART_SetConfig+0x2d0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d138      	bne.n	8002b48 <UART_SetConfig+0x154>
 8002ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc0 <UART_SetConfig+0x2cc>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d82d      	bhi.n	8002b40 <UART_SetConfig+0x14c>
 8002ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aec <UART_SetConfig+0xf8>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002b41 	.word	0x08002b41
 8002af4:	08002b41 	.word	0x08002b41
 8002af8:	08002b41 	.word	0x08002b41
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002b41 	.word	0x08002b41
 8002b04:	08002b41 	.word	0x08002b41
 8002b08:	08002b41 	.word	0x08002b41
 8002b0c:	08002b29 	.word	0x08002b29
 8002b10:	08002b41 	.word	0x08002b41
 8002b14:	08002b41 	.word	0x08002b41
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	08002b39 	.word	0x08002b39
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e0d8      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2e:	e0d4      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b30:	2304      	movs	r3, #4
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b36:	e0d0      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b38:	2308      	movs	r3, #8
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b3e:	e0cc      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b40:	2310      	movs	r3, #16
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b46:	e0c8      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5e      	ldr	r2, [pc, #376]	@ (8002cc8 <UART_SetConfig+0x2d4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d125      	bne.n	8002b9e <UART_SetConfig+0x1aa>
 8002b52:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc0 <UART_SetConfig+0x2cc>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b5c:	2b30      	cmp	r3, #48	@ 0x30
 8002b5e:	d016      	beq.n	8002b8e <UART_SetConfig+0x19a>
 8002b60:	2b30      	cmp	r3, #48	@ 0x30
 8002b62:	d818      	bhi.n	8002b96 <UART_SetConfig+0x1a2>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d00a      	beq.n	8002b7e <UART_SetConfig+0x18a>
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d814      	bhi.n	8002b96 <UART_SetConfig+0x1a2>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <UART_SetConfig+0x182>
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d008      	beq.n	8002b86 <UART_SetConfig+0x192>
 8002b74:	e00f      	b.n	8002b96 <UART_SetConfig+0x1a2>
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7c:	e0ad      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b84:	e0a9      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b86:	2304      	movs	r3, #4
 8002b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b8c:	e0a5      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b94:	e0a1      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b96:	2310      	movs	r3, #16
 8002b98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b9c:	e09d      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <UART_SetConfig+0x2d8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d125      	bne.n	8002bf4 <UART_SetConfig+0x200>
 8002ba8:	4b45      	ldr	r3, [pc, #276]	@ (8002cc0 <UART_SetConfig+0x2cc>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bb4:	d016      	beq.n	8002be4 <UART_SetConfig+0x1f0>
 8002bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bb8:	d818      	bhi.n	8002bec <UART_SetConfig+0x1f8>
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d00a      	beq.n	8002bd4 <UART_SetConfig+0x1e0>
 8002bbe:	2b80      	cmp	r3, #128	@ 0x80
 8002bc0:	d814      	bhi.n	8002bec <UART_SetConfig+0x1f8>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <UART_SetConfig+0x1d8>
 8002bc6:	2b40      	cmp	r3, #64	@ 0x40
 8002bc8:	d008      	beq.n	8002bdc <UART_SetConfig+0x1e8>
 8002bca:	e00f      	b.n	8002bec <UART_SetConfig+0x1f8>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd2:	e082      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bda:	e07e      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002be2:	e07a      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002be4:	2308      	movs	r3, #8
 8002be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bea:	e076      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002bec:	2310      	movs	r3, #16
 8002bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bf2:	e072      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a35      	ldr	r2, [pc, #212]	@ (8002cd0 <UART_SetConfig+0x2dc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d12a      	bne.n	8002c54 <UART_SetConfig+0x260>
 8002bfe:	4b30      	ldr	r3, [pc, #192]	@ (8002cc0 <UART_SetConfig+0x2cc>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c0c:	d01a      	beq.n	8002c44 <UART_SetConfig+0x250>
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c12:	d81b      	bhi.n	8002c4c <UART_SetConfig+0x258>
 8002c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c18:	d00c      	beq.n	8002c34 <UART_SetConfig+0x240>
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c1e:	d815      	bhi.n	8002c4c <UART_SetConfig+0x258>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <UART_SetConfig+0x238>
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c28:	d008      	beq.n	8002c3c <UART_SetConfig+0x248>
 8002c2a:	e00f      	b.n	8002c4c <UART_SetConfig+0x258>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c32:	e052      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c3a:	e04e      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c42:	e04a      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c44:	2308      	movs	r3, #8
 8002c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c4a:	e046      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c52:	e042      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <UART_SetConfig+0x2c4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d13a      	bne.n	8002cd4 <UART_SetConfig+0x2e0>
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <UART_SetConfig+0x2cc>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c6c:	d01a      	beq.n	8002ca4 <UART_SetConfig+0x2b0>
 8002c6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c72:	d81b      	bhi.n	8002cac <UART_SetConfig+0x2b8>
 8002c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c78:	d00c      	beq.n	8002c94 <UART_SetConfig+0x2a0>
 8002c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c7e:	d815      	bhi.n	8002cac <UART_SetConfig+0x2b8>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <UART_SetConfig+0x298>
 8002c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c88:	d008      	beq.n	8002c9c <UART_SetConfig+0x2a8>
 8002c8a:	e00f      	b.n	8002cac <UART_SetConfig+0x2b8>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c92:	e022      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c94:	2302      	movs	r3, #2
 8002c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c9a:	e01e      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ca2:	e01a      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002caa:	e016      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002cac:	2310      	movs	r3, #16
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cb2:	e012      	b.n	8002cda <UART_SetConfig+0x2e6>
 8002cb4:	efff69f3 	.word	0xefff69f3
 8002cb8:	40008000 	.word	0x40008000
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40004400 	.word	0x40004400
 8002cc8:	40004800 	.word	0x40004800
 8002ccc:	40004c00 	.word	0x40004c00
 8002cd0:	40005000 	.word	0x40005000
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a9f      	ldr	r2, [pc, #636]	@ (8002f5c <UART_SetConfig+0x568>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d17a      	bne.n	8002dda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d824      	bhi.n	8002d36 <UART_SetConfig+0x342>
 8002cec:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf4 <UART_SetConfig+0x300>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d19 	.word	0x08002d19
 8002cf8:	08002d37 	.word	0x08002d37
 8002cfc:	08002d21 	.word	0x08002d21
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	08002d27 	.word	0x08002d27
 8002d08:	08002d37 	.word	0x08002d37
 8002d0c:	08002d37 	.word	0x08002d37
 8002d10:	08002d37 	.word	0x08002d37
 8002d14:	08002d2f 	.word	0x08002d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d18:	f7ff f84c 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002d1c:	61f8      	str	r0, [r7, #28]
        break;
 8002d1e:	e010      	b.n	8002d42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d20:	4b8f      	ldr	r3, [pc, #572]	@ (8002f60 <UART_SetConfig+0x56c>)
 8002d22:	61fb      	str	r3, [r7, #28]
        break;
 8002d24:	e00d      	b.n	8002d42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d26:	f7fe ffad 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002d2a:	61f8      	str	r0, [r7, #28]
        break;
 8002d2c:	e009      	b.n	8002d42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d32:	61fb      	str	r3, [r7, #28]
        break;
 8002d34:	e005      	b.n	8002d42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80fb 	beq.w	8002f40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d305      	bcc.n	8002d66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d903      	bls.n	8002d6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d6c:	e0e8      	b.n	8002f40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	2200      	movs	r2, #0
 8002d72:	461c      	mov	r4, r3
 8002d74:	4615      	mov	r5, r2
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	022b      	lsls	r3, r5, #8
 8002d80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d84:	0222      	lsls	r2, r4, #8
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	6849      	ldr	r1, [r1, #4]
 8002d8a:	0849      	lsrs	r1, r1, #1
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	4688      	mov	r8, r1
 8002d90:	4681      	mov	r9, r0
 8002d92:	eb12 0a08 	adds.w	sl, r2, r8
 8002d96:	eb43 0b09 	adc.w	fp, r3, r9
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002da8:	4650      	mov	r0, sl
 8002daa:	4659      	mov	r1, fp
 8002dac:	f7fd fa68 	bl	8000280 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dbe:	d308      	bcc.n	8002dd2 <UART_SetConfig+0x3de>
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dc6:	d204      	bcs.n	8002dd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	e0b6      	b.n	8002f40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002dd8:	e0b2      	b.n	8002f40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de2:	d15e      	bne.n	8002ea2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d828      	bhi.n	8002e3e <UART_SetConfig+0x44a>
 8002dec:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <UART_SetConfig+0x400>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e2f 	.word	0x08002e2f
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7fe ffcc 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	61f8      	str	r0, [r7, #28]
        break;
 8002e1e:	e014      	b.n	8002e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7fe ffde 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8002e24:	61f8      	str	r0, [r7, #28]
        break;
 8002e26:	e010      	b.n	8002e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b4d      	ldr	r3, [pc, #308]	@ (8002f60 <UART_SetConfig+0x56c>)
 8002e2a:	61fb      	str	r3, [r7, #28]
        break;
 8002e2c:	e00d      	b.n	8002e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7fe ff29 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002e32:	61f8      	str	r0, [r7, #28]
        break;
 8002e34:	e009      	b.n	8002e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e3a:	61fb      	str	r3, [r7, #28]
        break;
 8002e3c:	e005      	b.n	8002e4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d077      	beq.n	8002f40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005a      	lsls	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d916      	bls.n	8002e9a <UART_SetConfig+0x4a6>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e72:	d212      	bcs.n	8002e9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	8afb      	ldrh	r3, [r7, #22]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	8afa      	ldrh	r2, [r7, #22]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	e052      	b.n	8002f40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ea0:	e04e      	b.n	8002f40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d827      	bhi.n	8002efa <UART_SetConfig+0x506>
 8002eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <UART_SetConfig+0x4bc>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ed5 	.word	0x08002ed5
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002efb 	.word	0x08002efb
 8002ec0:	08002eeb 	.word	0x08002eeb
 8002ec4:	08002efb 	.word	0x08002efb
 8002ec8:	08002efb 	.word	0x08002efb
 8002ecc:	08002efb 	.word	0x08002efb
 8002ed0:	08002ef3 	.word	0x08002ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7fe ff6e 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002ed8:	61f8      	str	r0, [r7, #28]
        break;
 8002eda:	e014      	b.n	8002f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7fe ff80 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	61f8      	str	r0, [r7, #28]
        break;
 8002ee2:	e010      	b.n	8002f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <UART_SetConfig+0x56c>)
 8002ee6:	61fb      	str	r3, [r7, #28]
        break;
 8002ee8:	e00d      	b.n	8002f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eea:	f7fe fecb 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002eee:	61f8      	str	r0, [r7, #28]
        break;
 8002ef0:	e009      	b.n	8002f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ef6:	61fb      	str	r3, [r7, #28]
        break;
 8002ef8:	e005      	b.n	8002f06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f04:	bf00      	nop
    }

    if (pclk != 0U)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d019      	beq.n	8002f40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	085a      	lsrs	r2, r3, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	441a      	add	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	d909      	bls.n	8002f3a <UART_SetConfig+0x546>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2c:	d205      	bcs.n	8002f3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	e002      	b.n	8002f40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3728      	adds	r7, #40	@ 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40008000 	.word	0x40008000
 8002f60:	00f42400 	.word	0x00f42400

08002f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01a      	beq.n	800307a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003062:	d10a      	bne.n	800307a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b098      	sub	sp, #96	@ 0x60
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030b8:	f7fd fdbe 	bl	8000c38 <HAL_GetTick>
 80030bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d12e      	bne.n	800312a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f88c 	bl	80031f8 <UART_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d021      	beq.n	800312a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003104:	647b      	str	r3, [r7, #68]	@ 0x44
 8003106:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800310a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e6      	bne.n	80030e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e062      	b.n	80031f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d149      	bne.n	80031cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003138:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f856 	bl	80031f8 <UART_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d03c      	beq.n	80031cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	623b      	str	r3, [r7, #32]
   return(result);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003170:	633b      	str	r3, [r7, #48]	@ 0x30
 8003172:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e6      	bne.n	8003152 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	60fb      	str	r3, [r7, #12]
   return(result);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3308      	adds	r3, #8
 80031a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031a4:	61fa      	str	r2, [r7, #28]
 80031a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	617b      	str	r3, [r7, #20]
   return(result);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e5      	bne.n	8003184 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e011      	b.n	80031f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3758      	adds	r7, #88	@ 0x58
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003208:	e04f      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d04b      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fd fd11 	bl	8000c38 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <UART_WaitOnFlagUntilTimeout+0x30>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e04e      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d037      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b80      	cmp	r3, #128	@ 0x80
 800323e:	d034      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b40      	cmp	r3, #64	@ 0x40
 8003244:	d031      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b08      	cmp	r3, #8
 8003252:	d110      	bne.n	8003276 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2208      	movs	r2, #8
 800325a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f838 	bl	80032d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2208      	movs	r2, #8
 8003266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e029      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003284:	d111      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800328e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f81e 	bl	80032d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e00f      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d0a0      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b095      	sub	sp, #84	@ 0x54
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80032fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e6      	bne.n	80032da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3308      	adds	r3, #8
 8003312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	61fb      	str	r3, [r7, #28]
   return(result);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3308      	adds	r3, #8
 800332a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800332c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800332e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e5      	bne.n	800330c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003344:	2b01      	cmp	r3, #1
 8003346:	d118      	bne.n	800337a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	60bb      	str	r3, [r7, #8]
   return(result);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f023 0310 	bic.w	r3, r3, #16
 800335c:	647b      	str	r3, [r7, #68]	@ 0x44
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6979      	ldr	r1, [r7, #20]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	613b      	str	r3, [r7, #16]
   return(result);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e6      	bne.n	8003348 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800338e:	bf00      	nop
 8003390:	3754      	adds	r7, #84	@ 0x54
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ac:	2b84      	cmp	r3, #132	@ 0x84
 80033ae:	d005      	beq.n	80033bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	3303      	adds	r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033bc:	68fb      	ldr	r3, [r7, #12]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033ce:	f000 fae5 	bl	800399c <vTaskStartScheduler>
  
  return osOK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033da:	b089      	sub	sp, #36	@ 0x24
 80033dc:	af04      	add	r7, sp, #16
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d020      	beq.n	800342c <osThreadCreate+0x54>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01c      	beq.n	800342c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685c      	ldr	r4, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691e      	ldr	r6, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ffc8 	bl	800339a <makeFreeRtosPriority>
 800340a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003414:	9202      	str	r2, [sp, #8]
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	9100      	str	r1, [sp, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4632      	mov	r2, r6
 800341e:	4629      	mov	r1, r5
 8003420:	4620      	mov	r0, r4
 8003422:	f000 f8ed 	bl	8003600 <xTaskCreateStatic>
 8003426:	4603      	mov	r3, r0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e01c      	b.n	8003466 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685c      	ldr	r4, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003438:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ffaa 	bl	800339a <makeFreeRtosPriority>
 8003446:	4602      	mov	r2, r0
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	9200      	str	r2, [sp, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4632      	mov	r2, r6
 8003454:	4629      	mov	r1, r5
 8003456:	4620      	mov	r0, r4
 8003458:	f000 f932 	bl	80036c0 <xTaskCreate>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003470 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <osDelay+0x16>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	e000      	b.n	8003488 <osDelay+0x18>
 8003486:	2301      	movs	r3, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fa51 	bl	8003930 <vTaskDelay>
  
  return osOK;
 800348e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f103 0208 	add.w	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f103 0208 	add.w	r2, r3, #8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 0208 	add.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d103      	bne.n	800355a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e00c      	b.n	8003574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3308      	adds	r3, #8
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e002      	b.n	8003568 <vListInsert+0x2e>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d2f6      	bcs.n	8003562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6852      	ldr	r2, [r2, #4]
 80035cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d103      	bne.n	80035e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08e      	sub	sp, #56	@ 0x38
 8003604:	af04      	add	r7, sp, #16
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800360e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	61fb      	str	r3, [r7, #28]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800364a:	2354      	movs	r3, #84	@ 0x54
 800364c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b54      	cmp	r3, #84	@ 0x54
 8003652:	d00b      	beq.n	800366c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61bb      	str	r3, [r7, #24]
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800366c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800366e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <xTaskCreateStatic+0xb2>
 8003674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01b      	beq.n	80036b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800368c:	2300      	movs	r3, #0
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f850 	bl	800374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036ac:	f000 f8d6 	bl	800385c <prvAddNewTaskToReadyList>
 80036b0:	e001      	b.n	80036b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036b6:	697b      	ldr	r3, [r7, #20]
	}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	@ 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	@ 0x30
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 feef 	bl	80044b8 <pvPortMalloc>
 80036da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036e2:	2054      	movs	r0, #84	@ 0x54
 80036e4:	f000 fee8 	bl	80044b8 <pvPortMalloc>
 80036e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80036f6:	e005      	b.n	8003704 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f000 ffab 	bl	8004654 <vPortFree>
 80036fe:	e001      	b.n	8003704 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d017      	beq.n	800373a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	2300      	movs	r3, #0
 8003716:	9303      	str	r3, [sp, #12]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f80e 	bl	800374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372e:	69f8      	ldr	r0, [r7, #28]
 8003730:	f000 f894 	bl	800385c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003734:	2301      	movs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e002      	b.n	8003740 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003740:	69bb      	ldr	r3, [r7, #24]
	}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003762:	3b01      	subs	r3, #1
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	617b      	str	r3, [r7, #20]
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01f      	beq.n	80037da <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e012      	b.n	80037c6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	7819      	ldrb	r1, [r3, #0]
 80037a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	3334      	adds	r3, #52	@ 0x34
 80037b0:	460a      	mov	r2, r1
 80037b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3301      	adds	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d9e9      	bls.n	80037a0 <prvInitialiseNewTask+0x56>
 80037cc:	e000      	b.n	80037d0 <prvInitialiseNewTask+0x86>
			{
				break;
 80037ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d8:	e003      	b.n	80037e2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	2b06      	cmp	r3, #6
 80037e6:	d901      	bls.n	80037ec <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037e8:	2306      	movs	r3, #6
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	2200      	movs	r2, #0
 80037fc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	3304      	adds	r3, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fe68 	bl	80034d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	3318      	adds	r3, #24
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe63 	bl	80034d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003816:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	f1c3 0207 	rsb	r2, r3, #7
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	69b8      	ldr	r0, [r7, #24]
 800383c:	f000 fc2c 	bl	8004098 <pxPortInitialiseStack>
 8003840:	4602      	mov	r2, r0
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003852:	bf00      	nop
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003864:	f000 fd48 	bl	80042f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003868:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <prvAddNewTaskToReadyList+0xb8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <prvAddNewTaskToReadyList+0xb8>)
 8003870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800387a:	4a27      	ldr	r2, [pc, #156]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003880:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <prvAddNewTaskToReadyList+0xb8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d110      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003888:	f000 fac4 	bl	8003e14 <prvInitialiseTaskLists>
 800388c:	e00d      	b.n	80038aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800388e:	4b23      	ldr	r3, [pc, #140]	@ (800391c <prvAddNewTaskToReadyList+0xc0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003896:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d802      	bhi.n	80038aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003920 <prvAddNewTaskToReadyList+0xc4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <prvAddNewTaskToReadyList+0xc4>)
 80038b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <prvAddNewTaskToReadyList+0xc8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <prvAddNewTaskToReadyList+0xc8>)
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <prvAddNewTaskToReadyList+0xcc>)
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7ff fe08 	bl	80034f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038e2:	f000 fd3b 	bl	800435c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <prvAddNewTaskToReadyList+0xc0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00e      	beq.n	800390c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d207      	bcs.n	800390c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000046c 	.word	0x2000046c
 8003918:	2000036c 	.word	0x2000036c
 800391c:	20000478 	.word	0x20000478
 8003920:	20000488 	.word	0x20000488
 8003924:	20000474 	.word	0x20000474
 8003928:	20000370 	.word	0x20000370
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <vTaskDelay+0x64>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <vTaskDelay+0x32>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	60bb      	str	r3, [r7, #8]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003962:	f000 f87d 	bl	8003a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003966:	2100      	movs	r1, #0
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fb2f 	bl	8003fcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800396e:	f000 f885 	bl	8003a7c <xTaskResumeAll>
 8003972:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800397a:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <vTaskDelay+0x68>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000494 	.word	0x20000494
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039aa:	463a      	mov	r2, r7
 80039ac:	1d39      	adds	r1, r7, #4
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fdfa 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	9202      	str	r2, [sp, #8]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	460a      	mov	r2, r1
 80039ca:	491f      	ldr	r1, [pc, #124]	@ (8003a48 <vTaskStartScheduler+0xac>)
 80039cc:	481f      	ldr	r0, [pc, #124]	@ (8003a4c <vTaskStartScheduler+0xb0>)
 80039ce:	f7ff fe17 	bl	8003600 <xTaskCreateStatic>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <vTaskStartScheduler+0xb4>)
 80039d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <vTaskStartScheduler+0xb4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e001      	b.n	80039ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d116      	bne.n	8003a1e <vTaskStartScheduler+0x82>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	613b      	str	r3, [r7, #16]
}
 8003a02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a04:	4b13      	ldr	r3, [pc, #76]	@ (8003a54 <vTaskStartScheduler+0xb8>)
 8003a06:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <vTaskStartScheduler+0xbc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a12:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <vTaskStartScheduler+0xc0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a18:	f000 fbca 	bl	80041b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a1c:	e00f      	b.n	8003a3e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d10b      	bne.n	8003a3e <vTaskStartScheduler+0xa2>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	60fb      	str	r3, [r7, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	e7fd      	b.n	8003a3a <vTaskStartScheduler+0x9e>
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08005250 	.word	0x08005250
 8003a4c:	08003de5 	.word	0x08003de5
 8003a50:	20000490 	.word	0x20000490
 8003a54:	2000048c 	.word	0x2000048c
 8003a58:	20000478 	.word	0x20000478
 8003a5c:	20000470 	.word	0x20000470

08003a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a64:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <vTaskSuspendAll+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a03      	ldr	r2, [pc, #12]	@ (8003a78 <vTaskSuspendAll+0x18>)
 8003a6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20000494 	.word	0x20000494

08003a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a8a:	4b42      	ldr	r3, [pc, #264]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <xTaskResumeAll+0x2e>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aaa:	f000 fc25 	bl	80042f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aae:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a37      	ldr	r2, [pc, #220]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003ab6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab8:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d161      	bne.n	8003b84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ac0:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <xTaskResumeAll+0x11c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05d      	beq.n	8003b84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac8:	e02e      	b.n	8003b28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <xTaskResumeAll+0x120>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fd68 	bl	80035ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fd63 	bl	80035ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba0 <xTaskResumeAll+0x124>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba0 <xTaskResumeAll+0x124>)
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4a27      	ldr	r2, [pc, #156]	@ (8003ba4 <xTaskResumeAll+0x128>)
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7ff fcef 	bl	80034f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b18:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <xTaskResumeAll+0x12c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b22:	4b22      	ldr	r3, [pc, #136]	@ (8003bac <xTaskResumeAll+0x130>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b28:	4b1c      	ldr	r3, [pc, #112]	@ (8003b9c <xTaskResumeAll+0x120>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1cc      	bne.n	8003aca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b36:	f000 fa0b 	bl	8003f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb0 <xTaskResumeAll+0x134>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b46:	f000 f837 	bl	8003bb8 <xTaskIncrementTick>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b50:	4b16      	ldr	r3, [pc, #88]	@ (8003bac <xTaskResumeAll+0x130>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f1      	bne.n	8003b46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b62:	4b13      	ldr	r3, [pc, #76]	@ (8003bb0 <xTaskResumeAll+0x134>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b68:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <xTaskResumeAll+0x130>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b74:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <xTaskResumeAll+0x138>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b84:	f000 fbea 	bl	800435c <vPortExitCritical>

	return xAlreadyYielded;
 8003b88:	68bb      	ldr	r3, [r7, #8]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000494 	.word	0x20000494
 8003b98:	2000046c 	.word	0x2000046c
 8003b9c:	2000042c 	.word	0x2000042c
 8003ba0:	20000474 	.word	0x20000474
 8003ba4:	20000370 	.word	0x20000370
 8003ba8:	2000036c 	.word	0x2000036c
 8003bac:	20000480 	.word	0x20000480
 8003bb0:	2000047c 	.word	0x2000047c
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d00 <xTaskIncrementTick+0x148>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 808f 	bne.w	8003cea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d04 <xTaskIncrementTick+0x14c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d04 <xTaskIncrementTick+0x14c>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d121      	bne.n	8003c24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003be0:	4b49      	ldr	r3, [pc, #292]	@ (8003d08 <xTaskIncrementTick+0x150>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	603b      	str	r3, [r7, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <xTaskIncrementTick+0x46>
 8003c02:	4b41      	ldr	r3, [pc, #260]	@ (8003d08 <xTaskIncrementTick+0x150>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	4b40      	ldr	r3, [pc, #256]	@ (8003d0c <xTaskIncrementTick+0x154>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d08 <xTaskIncrementTick+0x150>)
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4a3e      	ldr	r2, [pc, #248]	@ (8003d0c <xTaskIncrementTick+0x154>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b3e      	ldr	r3, [pc, #248]	@ (8003d10 <xTaskIncrementTick+0x158>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d10 <xTaskIncrementTick+0x158>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	f000 f996 	bl	8003f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c24:	4b3b      	ldr	r3, [pc, #236]	@ (8003d14 <xTaskIncrementTick+0x15c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d348      	bcc.n	8003cc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c2e:	4b36      	ldr	r3, [pc, #216]	@ (8003d08 <xTaskIncrementTick+0x150>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c38:	4b36      	ldr	r3, [pc, #216]	@ (8003d14 <xTaskIncrementTick+0x15c>)
 8003c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3e:	601a      	str	r2, [r3, #0]
					break;
 8003c40:	e03e      	b.n	8003cc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c42:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <xTaskIncrementTick+0x150>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d203      	bcs.n	8003c62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d14 <xTaskIncrementTick+0x15c>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c60:	e02e      	b.n	8003cc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fca0 	bl	80035ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3318      	adds	r3, #24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fc97 	bl	80035ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	2201      	movs	r2, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <xTaskIncrementTick+0x160>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <xTaskIncrementTick+0x160>)
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003d1c <xTaskIncrementTick+0x164>)
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7ff fc23 	bl	80034f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <xTaskIncrementTick+0x168>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3b9      	bcc.n	8003c2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cbe:	e7b6      	b.n	8003c2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cc0:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <xTaskIncrementTick+0x168>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4915      	ldr	r1, [pc, #84]	@ (8003d1c <xTaskIncrementTick+0x164>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d901      	bls.n	8003cdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <xTaskIncrementTick+0x16c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e004      	b.n	8003cf4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cea:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <xTaskIncrementTick+0x170>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d28 <xTaskIncrementTick+0x170>)
 8003cf2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cf4:	697b      	ldr	r3, [r7, #20]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000494 	.word	0x20000494
 8003d04:	20000470 	.word	0x20000470
 8003d08:	20000424 	.word	0x20000424
 8003d0c:	20000428 	.word	0x20000428
 8003d10:	20000484 	.word	0x20000484
 8003d14:	2000048c 	.word	0x2000048c
 8003d18:	20000474 	.word	0x20000474
 8003d1c:	20000370 	.word	0x20000370
 8003d20:	2000036c 	.word	0x2000036c
 8003d24:	20000480 	.word	0x20000480
 8003d28:	2000047c 	.word	0x2000047c

08003d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d32:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <vTaskSwitchContext+0xa4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d3a:	4b26      	ldr	r3, [pc, #152]	@ (8003dd4 <vTaskSwitchContext+0xa8>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d40:	e040      	b.n	8003dc4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003d42:	4b24      	ldr	r3, [pc, #144]	@ (8003dd4 <vTaskSwitchContext+0xa8>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d48:	4b23      	ldr	r3, [pc, #140]	@ (8003dd8 <vTaskSwitchContext+0xac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	f1c3 031f 	rsb	r3, r3, #31
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	491f      	ldr	r1, [pc, #124]	@ (8003ddc <vTaskSwitchContext+0xb0>)
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	607b      	str	r3, [r7, #4]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <vTaskSwitchContext+0x5a>
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4a11      	ldr	r2, [pc, #68]	@ (8003ddc <vTaskSwitchContext+0xb0>)
 8003d96:	4413      	add	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	3308      	adds	r3, #8
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d104      	bne.n	8003dba <vTaskSwitchContext+0x8e>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a07      	ldr	r2, [pc, #28]	@ (8003de0 <vTaskSwitchContext+0xb4>)
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	20000494 	.word	0x20000494
 8003dd4:	20000480 	.word	0x20000480
 8003dd8:	20000474 	.word	0x20000474
 8003ddc:	20000370 	.word	0x20000370
 8003de0:	2000036c 	.word	0x2000036c

08003de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dec:	f000 f852 	bl	8003e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <prvIdleTask+0x28>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d9f9      	bls.n	8003dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <prvIdleTask+0x2c>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e08:	e7f0      	b.n	8003dec <prvIdleTask+0x8>
 8003e0a:	bf00      	nop
 8003e0c:	20000370 	.word	0x20000370
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	e00c      	b.n	8003e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4a12      	ldr	r2, [pc, #72]	@ (8003e74 <prvInitialiseTaskLists+0x60>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fb32 	bl	8003498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3301      	adds	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b06      	cmp	r3, #6
 8003e3e:	d9ef      	bls.n	8003e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e40:	480d      	ldr	r0, [pc, #52]	@ (8003e78 <prvInitialiseTaskLists+0x64>)
 8003e42:	f7ff fb29 	bl	8003498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e46:	480d      	ldr	r0, [pc, #52]	@ (8003e7c <prvInitialiseTaskLists+0x68>)
 8003e48:	f7ff fb26 	bl	8003498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e4c:	480c      	ldr	r0, [pc, #48]	@ (8003e80 <prvInitialiseTaskLists+0x6c>)
 8003e4e:	f7ff fb23 	bl	8003498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e52:	480c      	ldr	r0, [pc, #48]	@ (8003e84 <prvInitialiseTaskLists+0x70>)
 8003e54:	f7ff fb20 	bl	8003498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e58:	480b      	ldr	r0, [pc, #44]	@ (8003e88 <prvInitialiseTaskLists+0x74>)
 8003e5a:	f7ff fb1d 	bl	8003498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <prvInitialiseTaskLists+0x78>)
 8003e60:	4a05      	ldr	r2, [pc, #20]	@ (8003e78 <prvInitialiseTaskLists+0x64>)
 8003e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <prvInitialiseTaskLists+0x7c>)
 8003e66:	4a05      	ldr	r2, [pc, #20]	@ (8003e7c <prvInitialiseTaskLists+0x68>)
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000370 	.word	0x20000370
 8003e78:	200003fc 	.word	0x200003fc
 8003e7c:	20000410 	.word	0x20000410
 8003e80:	2000042c 	.word	0x2000042c
 8003e84:	20000440 	.word	0x20000440
 8003e88:	20000458 	.word	0x20000458
 8003e8c:	20000424 	.word	0x20000424
 8003e90:	20000428 	.word	0x20000428

08003e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e9a:	e019      	b.n	8003ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e9c:	f000 fa2c 	bl	80042f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea0:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <prvCheckTasksWaitingTermination+0x50>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fb7d 	bl	80035ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <prvCheckTasksWaitingTermination+0x54>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee8 <prvCheckTasksWaitingTermination+0x54>)
 8003eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <prvCheckTasksWaitingTermination+0x58>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <prvCheckTasksWaitingTermination+0x58>)
 8003ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ec6:	f000 fa49 	bl	800435c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f810 	bl	8003ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed0:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <prvCheckTasksWaitingTermination+0x58>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e1      	bne.n	8003e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000440 	.word	0x20000440
 8003ee8:	2000046c 	.word	0x2000046c
 8003eec:	20000454 	.word	0x20000454

08003ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fba4 	bl	8004654 <vPortFree>
				vPortFree( pxTCB );
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fba1 	bl	8004654 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f12:	e019      	b.n	8003f48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d103      	bne.n	8003f26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fb98 	bl	8004654 <vPortFree>
	}
 8003f24:	e010      	b.n	8003f48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d00b      	beq.n	8003f48 <prvDeleteTCB+0x58>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60fb      	str	r3, [r7, #12]
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <prvDeleteTCB+0x54>
	}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f56:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <prvResetNextTaskUnblockTime+0x38>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <prvResetNextTaskUnblockTime+0x3c>)
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f68:	e008      	b.n	8003f7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6a:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <prvResetNextTaskUnblockTime+0x38>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <prvResetNextTaskUnblockTime+0x3c>)
 8003f7a:	6013      	str	r3, [r2, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	20000424 	.word	0x20000424
 8003f8c:	2000048c 	.word	0x2000048c

08003f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f96:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <xTaskGetSchedulerState+0x34>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	e008      	b.n	8003fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa4:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <xTaskGetSchedulerState+0x38>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fac:	2302      	movs	r3, #2
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	e001      	b.n	8003fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fb6:	687b      	ldr	r3, [r7, #4]
	}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000478 	.word	0x20000478
 8003fc8:	20000494 	.word	0x20000494

08003fcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fd6:	4b29      	ldr	r3, [pc, #164]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fdc:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fae2 	bl	80035ac <uxListRemove>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	4b21      	ldr	r3, [pc, #132]	@ (8004084 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4013      	ands	r3, r2
 8004002:	4a20      	ldr	r2, [pc, #128]	@ (8004084 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004004:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d10a      	bne.n	8004024 <prvAddCurrentTaskToDelayedList+0x58>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004014:	4b1a      	ldr	r3, [pc, #104]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	481a      	ldr	r0, [pc, #104]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xbc>)
 800401e:	f7ff fa68 	bl	80034f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004022:	e026      	b.n	8004072 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800402c:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	429a      	cmp	r2, r3
 800403a:	d209      	bcs.n	8004050 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800403c:	4b13      	ldr	r3, [pc, #76]	@ (800408c <prvAddCurrentTaskToDelayedList+0xc0>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3304      	adds	r3, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f7ff fa76 	bl	800353a <vListInsert>
}
 800404e:	e010      	b.n	8004072 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004050:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7ff fa6c 	bl	800353a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004062:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	d202      	bcs.n	8004072 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800406c:	4a09      	ldr	r2, [pc, #36]	@ (8004094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6013      	str	r3, [r2, #0]
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000470 	.word	0x20000470
 8004080:	2000036c 	.word	0x2000036c
 8004084:	20000474 	.word	0x20000474
 8004088:	20000458 	.word	0x20000458
 800408c:	20000428 	.word	0x20000428
 8004090:	20000424 	.word	0x20000424
 8004094:	2000048c 	.word	0x2000048c

08004098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b04      	subs	r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3b04      	subs	r3, #4
 80040b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b04      	subs	r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040c8:	4a0c      	ldr	r2, [pc, #48]	@ (80040fc <pxPortInitialiseStack+0x64>)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3b14      	subs	r3, #20
 80040d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b04      	subs	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f06f 0202 	mvn.w	r2, #2
 80040e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3b20      	subs	r3, #32
 80040ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	08004101 	.word	0x08004101

08004100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800410a:	4b13      	ldr	r3, [pc, #76]	@ (8004158 <prvTaskExitError+0x58>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d00b      	beq.n	800412c <prvTaskExitError+0x2c>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	60fb      	str	r3, [r7, #12]
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <prvTaskExitError+0x28>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60bb      	str	r3, [r7, #8]
}
 800413e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004140:	bf00      	nop
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0fc      	beq.n	8004142 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	2000000c 	.word	0x2000000c
 800415c:	00000000 	.word	0x00000000

08004160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <pxCurrentTCBConst2>)
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	f380 8809 	msr	PSP, r0
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8811 	msr	BASEPRI, r0
 800417a:	4770      	bx	lr
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst2>:
 8004180:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004188:	4808      	ldr	r0, [pc, #32]	@ (80041ac <prvPortStartFirstTask+0x24>)
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	6800      	ldr	r0, [r0, #0]
 800418e:	f380 8808 	msr	MSP, r0
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8814 	msr	CONTROL, r0
 800419a:	b662      	cpsie	i
 800419c:	b661      	cpsie	f
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	df00      	svc	0
 80041a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041aa:	bf00      	nop
 80041ac:	e000ed08 	.word	0xe000ed08

080041b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041b6:	4b47      	ldr	r3, [pc, #284]	@ (80042d4 <xPortStartScheduler+0x124>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a47      	ldr	r2, [pc, #284]	@ (80042d8 <xPortStartScheduler+0x128>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10b      	bne.n	80041d8 <xPortStartScheduler+0x28>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	60fb      	str	r3, [r7, #12]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041d8:	4b3e      	ldr	r3, [pc, #248]	@ (80042d4 <xPortStartScheduler+0x124>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3f      	ldr	r2, [pc, #252]	@ (80042dc <xPortStartScheduler+0x12c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10b      	bne.n	80041fa <xPortStartScheduler+0x4a>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	613b      	str	r3, [r7, #16]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041fa:	4b39      	ldr	r3, [pc, #228]	@ (80042e0 <xPortStartScheduler+0x130>)
 80041fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	22ff      	movs	r2, #255	@ 0xff
 800420a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b31      	ldr	r3, [pc, #196]	@ (80042e4 <xPortStartScheduler+0x134>)
 8004220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004222:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <xPortStartScheduler+0x138>)
 8004224:	2207      	movs	r2, #7
 8004226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004228:	e009      	b.n	800423e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800422a:	4b2f      	ldr	r3, [pc, #188]	@ (80042e8 <xPortStartScheduler+0x138>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3b01      	subs	r3, #1
 8004230:	4a2d      	ldr	r2, [pc, #180]	@ (80042e8 <xPortStartScheduler+0x138>)
 8004232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	2b80      	cmp	r3, #128	@ 0x80
 8004248:	d0ef      	beq.n	800422a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800424a:	4b27      	ldr	r3, [pc, #156]	@ (80042e8 <xPortStartScheduler+0x138>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b04      	cmp	r3, #4
 8004254:	d00b      	beq.n	800426e <xPortStartScheduler+0xbe>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60bb      	str	r3, [r7, #8]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800426e:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <xPortStartScheduler+0x138>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <xPortStartScheduler+0x138>)
 8004276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004278:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <xPortStartScheduler+0x138>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <xPortStartScheduler+0x138>)
 8004282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800428c:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <xPortStartScheduler+0x13c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a16      	ldr	r2, [pc, #88]	@ (80042ec <xPortStartScheduler+0x13c>)
 8004292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004298:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <xPortStartScheduler+0x13c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a13      	ldr	r2, [pc, #76]	@ (80042ec <xPortStartScheduler+0x13c>)
 800429e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042a4:	f000 f8da 	bl	800445c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042a8:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <xPortStartScheduler+0x140>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042ae:	f000 f8f9 	bl	80044a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <xPortStartScheduler+0x144>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a0f      	ldr	r2, [pc, #60]	@ (80042f4 <xPortStartScheduler+0x144>)
 80042b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042be:	f7ff ff63 	bl	8004188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042c2:	f7ff fd33 	bl	8003d2c <vTaskSwitchContext>
	prvTaskExitError();
 80042c6:	f7ff ff1b 	bl	8004100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	e000ed00 	.word	0xe000ed00
 80042d8:	410fc271 	.word	0x410fc271
 80042dc:	410fc270 	.word	0x410fc270
 80042e0:	e000e400 	.word	0xe000e400
 80042e4:	20000498 	.word	0x20000498
 80042e8:	2000049c 	.word	0x2000049c
 80042ec:	e000ed20 	.word	0xe000ed20
 80042f0:	2000000c 	.word	0x2000000c
 80042f4:	e000ef34 	.word	0xe000ef34

080042f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	607b      	str	r3, [r7, #4]
}
 8004310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <vPortEnterCritical+0x5c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	4a0e      	ldr	r2, [pc, #56]	@ (8004354 <vPortEnterCritical+0x5c>)
 800431a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <vPortEnterCritical+0x5c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d110      	bne.n	8004346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <vPortEnterCritical+0x60>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <vPortEnterCritical+0x4e>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	603b      	str	r3, [r7, #0]
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <vPortEnterCritical+0x4a>
	}
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <vPortExitCritical+0x50>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <vPortExitCritical+0x26>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	607b      	str	r3, [r7, #4]
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <vPortExitCritical+0x50>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3b01      	subs	r3, #1
 8004388:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <vPortExitCritical+0x50>)
 800438a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800438c:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <vPortExitCritical+0x50>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <vPortExitCritical+0x44>
 8004394:	2300      	movs	r3, #0
 8004396:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800439e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043b0:	f3ef 8009 	mrs	r0, PSP
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4b15      	ldr	r3, [pc, #84]	@ (8004410 <pxCurrentTCBConst>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	f01e 0f10 	tst.w	lr, #16
 80043c0:	bf08      	it	eq
 80043c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ca:	6010      	str	r0, [r2, #0]
 80043cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043d4:	f380 8811 	msr	BASEPRI, r0
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f7ff fca4 	bl	8003d2c <vTaskSwitchContext>
 80043e4:	f04f 0000 	mov.w	r0, #0
 80043e8:	f380 8811 	msr	BASEPRI, r0
 80043ec:	bc09      	pop	{r0, r3}
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	6808      	ldr	r0, [r1, #0]
 80043f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f6:	f01e 0f10 	tst.w	lr, #16
 80043fa:	bf08      	it	eq
 80043fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004400:	f380 8809 	msr	PSP, r0
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	f3af 8000 	nop.w

08004410 <pxCurrentTCBConst>:
 8004410:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop

08004418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	607b      	str	r3, [r7, #4]
}
 8004430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004432:	f7ff fbc1 	bl	8003bb8 <xTaskIncrementTick>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <xPortSysTickHandler+0x40>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f383 8811 	msr	BASEPRI, r3
}
 800444e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <vPortSetupTimerInterrupt+0x34>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <vPortSetupTimerInterrupt+0x38>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800446c:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <vPortSetupTimerInterrupt+0x3c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0a      	ldr	r2, [pc, #40]	@ (800449c <vPortSetupTimerInterrupt+0x40>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <vPortSetupTimerInterrupt+0x44>)
 800447a:	3b01      	subs	r3, #1
 800447c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800447e:	4b04      	ldr	r3, [pc, #16]	@ (8004490 <vPortSetupTimerInterrupt+0x34>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000e010 	.word	0xe000e010
 8004494:	e000e018 	.word	0xe000e018
 8004498:	20000000 	.word	0x20000000
 800449c:	10624dd3 	.word	0x10624dd3
 80044a0:	e000e014 	.word	0xe000e014

080044a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80044b4 <vPortEnableVFP+0x10>
 80044a8:	6801      	ldr	r1, [r0, #0]
 80044aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044ae:	6001      	str	r1, [r0, #0]
 80044b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044b2:	bf00      	nop
 80044b4:	e000ed88 	.word	0xe000ed88

080044b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044c4:	f7ff facc 	bl	8003a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044c8:	4b5c      	ldr	r3, [pc, #368]	@ (800463c <pvPortMalloc+0x184>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044d0:	f000 f924 	bl	800471c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004640 <pvPortMalloc+0x188>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 8095 	bne.w	800460c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01e      	beq.n	8004526 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044e8:	2208      	movs	r2, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	3308      	adds	r3, #8
 8004502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <pvPortMalloc+0x6e>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	617b      	str	r3, [r7, #20]
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d06f      	beq.n	800460c <pvPortMalloc+0x154>
 800452c:	4b45      	ldr	r3, [pc, #276]	@ (8004644 <pvPortMalloc+0x18c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d86a      	bhi.n	800460c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004536:	4b44      	ldr	r3, [pc, #272]	@ (8004648 <pvPortMalloc+0x190>)
 8004538:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <pvPortMalloc+0x190>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004540:	e004      	b.n	800454c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d903      	bls.n	800455e <pvPortMalloc+0xa6>
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f1      	bne.n	8004542 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800455e:	4b37      	ldr	r3, [pc, #220]	@ (800463c <pvPortMalloc+0x184>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004564:	429a      	cmp	r2, r3
 8004566:	d051      	beq.n	800460c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	4413      	add	r3, r2
 8004570:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	2308      	movs	r3, #8
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	429a      	cmp	r2, r3
 8004588:	d920      	bls.n	80045cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800458a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <pvPortMalloc+0xfc>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	613b      	str	r3, [r7, #16]
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045c6:	69b8      	ldr	r0, [r7, #24]
 80045c8:	f000 f90a 	bl	80047e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <pvPortMalloc+0x18c>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <pvPortMalloc+0x18c>)
 80045d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045da:	4b1a      	ldr	r3, [pc, #104]	@ (8004644 <pvPortMalloc+0x18c>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <pvPortMalloc+0x194>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d203      	bcs.n	80045ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045e6:	4b17      	ldr	r3, [pc, #92]	@ (8004644 <pvPortMalloc+0x18c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <pvPortMalloc+0x194>)
 80045ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4b13      	ldr	r3, [pc, #76]	@ (8004640 <pvPortMalloc+0x188>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004602:	4b13      	ldr	r3, [pc, #76]	@ (8004650 <pvPortMalloc+0x198>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <pvPortMalloc+0x198>)
 800460a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800460c:	f7ff fa36 	bl	8003a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <pvPortMalloc+0x17a>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60fb      	str	r3, [r7, #12]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <pvPortMalloc+0x176>
	return pvReturn;
 8004632:	69fb      	ldr	r3, [r7, #28]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3728      	adds	r7, #40	@ 0x28
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20001060 	.word	0x20001060
 8004640:	20001074 	.word	0x20001074
 8004644:	20001064 	.word	0x20001064
 8004648:	20001058 	.word	0x20001058
 800464c:	20001068 	.word	0x20001068
 8004650:	2000106c 	.word	0x2000106c

08004654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d04f      	beq.n	8004706 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004666:	2308      	movs	r3, #8
 8004668:	425b      	negs	r3, r3
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4b25      	ldr	r3, [pc, #148]	@ (8004710 <vPortFree+0xbc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <vPortFree+0x46>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60fb      	str	r3, [r7, #12]
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <vPortFree+0x66>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60bb      	str	r3, [r7, #8]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4b14      	ldr	r3, [pc, #80]	@ (8004710 <vPortFree+0xbc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01e      	beq.n	8004706 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11a      	bne.n	8004706 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004710 <vPortFree+0xbc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	43db      	mvns	r3, r3
 80046da:	401a      	ands	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046e0:	f7ff f9be 	bl	8003a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004714 <vPortFree+0xc0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4413      	add	r3, r2
 80046ee:	4a09      	ldr	r2, [pc, #36]	@ (8004714 <vPortFree+0xc0>)
 80046f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046f2:	6938      	ldr	r0, [r7, #16]
 80046f4:	f000 f874 	bl	80047e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046f8:	4b07      	ldr	r3, [pc, #28]	@ (8004718 <vPortFree+0xc4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4a06      	ldr	r2, [pc, #24]	@ (8004718 <vPortFree+0xc4>)
 8004700:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004702:	f7ff f9bb 	bl	8003a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20001074 	.word	0x20001074
 8004714:	20001064 	.word	0x20001064
 8004718:	20001070 	.word	0x20001070

0800471c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004722:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004726:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004728:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <prvHeapInit+0xac>)
 800472a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3307      	adds	r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <prvHeapInit+0xac>)
 800474c:	4413      	add	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004754:	4a1d      	ldr	r2, [pc, #116]	@ (80047cc <prvHeapInit+0xb0>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800475a:	4b1c      	ldr	r3, [pc, #112]	@ (80047cc <prvHeapInit+0xb0>)
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004768:	2208      	movs	r2, #8
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0307 	bic.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <prvHeapInit+0xb4>)
 800477c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800477e:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <prvHeapInit+0xb4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <prvHeapInit+0xb4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <prvHeapInit+0xb4>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	@ (80047d4 <prvHeapInit+0xb8>)
 80047aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <prvHeapInit+0xbc>)
 80047b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <prvHeapInit+0xc0>)
 80047b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	200004a0 	.word	0x200004a0
 80047cc:	20001058 	.word	0x20001058
 80047d0:	20001060 	.word	0x20001060
 80047d4:	20001068 	.word	0x20001068
 80047d8:	20001064 	.word	0x20001064
 80047dc:	20001074 	.word	0x20001074

080047e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <prvInsertBlockIntoFreeList+0xac>)
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e002      	b.n	80047f4 <prvInsertBlockIntoFreeList+0x14>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d8f7      	bhi.n	80047ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d108      	bne.n	8004822 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d118      	bne.n	8004868 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b15      	ldr	r3, [pc, #84]	@ (8004890 <prvInsertBlockIntoFreeList+0xb0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d00d      	beq.n	800485e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	441a      	add	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e008      	b.n	8004870 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800485e:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <prvInsertBlockIntoFreeList+0xb0>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e003      	b.n	8004870 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d002      	beq.n	800487e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20001058 	.word	0x20001058
 8004890:	20001060 	.word	0x20001060

08004894 <siprintf>:
 8004894:	b40e      	push	{r1, r2, r3}
 8004896:	b510      	push	{r4, lr}
 8004898:	b09d      	sub	sp, #116	@ 0x74
 800489a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800489c:	9002      	str	r0, [sp, #8]
 800489e:	9006      	str	r0, [sp, #24]
 80048a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048a4:	480a      	ldr	r0, [pc, #40]	@ (80048d0 <siprintf+0x3c>)
 80048a6:	9107      	str	r1, [sp, #28]
 80048a8:	9104      	str	r1, [sp, #16]
 80048aa:	490a      	ldr	r1, [pc, #40]	@ (80048d4 <siprintf+0x40>)
 80048ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b0:	9105      	str	r1, [sp, #20]
 80048b2:	2400      	movs	r4, #0
 80048b4:	a902      	add	r1, sp, #8
 80048b6:	6800      	ldr	r0, [r0, #0]
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048bc:	f000 f9a2 	bl	8004c04 <_svfiprintf_r>
 80048c0:	9b02      	ldr	r3, [sp, #8]
 80048c2:	701c      	strb	r4, [r3, #0]
 80048c4:	b01d      	add	sp, #116	@ 0x74
 80048c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ca:	b003      	add	sp, #12
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000010 	.word	0x20000010
 80048d4:	ffff0208 	.word	0xffff0208

080048d8 <memset>:
 80048d8:	4402      	add	r2, r0
 80048da:	4603      	mov	r3, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <__errno>:
 80048e8:	4b01      	ldr	r3, [pc, #4]	@ (80048f0 <__errno+0x8>)
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000010 	.word	0x20000010

080048f4 <__libc_init_array>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4d0d      	ldr	r5, [pc, #52]	@ (800492c <__libc_init_array+0x38>)
 80048f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004930 <__libc_init_array+0x3c>)
 80048fa:	1b64      	subs	r4, r4, r5
 80048fc:	10a4      	asrs	r4, r4, #2
 80048fe:	2600      	movs	r6, #0
 8004900:	42a6      	cmp	r6, r4
 8004902:	d109      	bne.n	8004918 <__libc_init_array+0x24>
 8004904:	4d0b      	ldr	r5, [pc, #44]	@ (8004934 <__libc_init_array+0x40>)
 8004906:	4c0c      	ldr	r4, [pc, #48]	@ (8004938 <__libc_init_array+0x44>)
 8004908:	f000 fc64 	bl	80051d4 <_init>
 800490c:	1b64      	subs	r4, r4, r5
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	2600      	movs	r6, #0
 8004912:	42a6      	cmp	r6, r4
 8004914:	d105      	bne.n	8004922 <__libc_init_array+0x2e>
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	f855 3b04 	ldr.w	r3, [r5], #4
 800491c:	4798      	blx	r3
 800491e:	3601      	adds	r6, #1
 8004920:	e7ee      	b.n	8004900 <__libc_init_array+0xc>
 8004922:	f855 3b04 	ldr.w	r3, [r5], #4
 8004926:	4798      	blx	r3
 8004928:	3601      	adds	r6, #1
 800492a:	e7f2      	b.n	8004912 <__libc_init_array+0x1e>
 800492c:	080052dc 	.word	0x080052dc
 8004930:	080052dc 	.word	0x080052dc
 8004934:	080052dc 	.word	0x080052dc
 8004938:	080052e0 	.word	0x080052e0

0800493c <__retarget_lock_acquire_recursive>:
 800493c:	4770      	bx	lr

0800493e <__retarget_lock_release_recursive>:
 800493e:	4770      	bx	lr

08004940 <memcpy>:
 8004940:	440a      	add	r2, r1
 8004942:	4291      	cmp	r1, r2
 8004944:	f100 33ff 	add.w	r3, r0, #4294967295
 8004948:	d100      	bne.n	800494c <memcpy+0xc>
 800494a:	4770      	bx	lr
 800494c:	b510      	push	{r4, lr}
 800494e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004956:	4291      	cmp	r1, r2
 8004958:	d1f9      	bne.n	800494e <memcpy+0xe>
 800495a:	bd10      	pop	{r4, pc}

0800495c <_free_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4605      	mov	r5, r0
 8004960:	2900      	cmp	r1, #0
 8004962:	d041      	beq.n	80049e8 <_free_r+0x8c>
 8004964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004968:	1f0c      	subs	r4, r1, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfb8      	it	lt
 800496e:	18e4      	addlt	r4, r4, r3
 8004970:	f000 f8e0 	bl	8004b34 <__malloc_lock>
 8004974:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <_free_r+0x90>)
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	b933      	cbnz	r3, 8004988 <_free_r+0x2c>
 800497a:	6063      	str	r3, [r4, #4]
 800497c:	6014      	str	r4, [r2, #0]
 800497e:	4628      	mov	r0, r5
 8004980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004984:	f000 b8dc 	b.w	8004b40 <__malloc_unlock>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d908      	bls.n	800499e <_free_r+0x42>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	1821      	adds	r1, r4, r0
 8004990:	428b      	cmp	r3, r1
 8004992:	bf01      	itttt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	1809      	addeq	r1, r1, r0
 800499a:	6021      	streq	r1, [r4, #0]
 800499c:	e7ed      	b.n	800497a <_free_r+0x1e>
 800499e:	461a      	mov	r2, r3
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	b10b      	cbz	r3, 80049a8 <_free_r+0x4c>
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	d9fa      	bls.n	800499e <_free_r+0x42>
 80049a8:	6811      	ldr	r1, [r2, #0]
 80049aa:	1850      	adds	r0, r2, r1
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	d10b      	bne.n	80049c8 <_free_r+0x6c>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	4401      	add	r1, r0
 80049b4:	1850      	adds	r0, r2, r1
 80049b6:	4283      	cmp	r3, r0
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	d1e0      	bne.n	800497e <_free_r+0x22>
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	6053      	str	r3, [r2, #4]
 80049c2:	4408      	add	r0, r1
 80049c4:	6010      	str	r0, [r2, #0]
 80049c6:	e7da      	b.n	800497e <_free_r+0x22>
 80049c8:	d902      	bls.n	80049d0 <_free_r+0x74>
 80049ca:	230c      	movs	r3, #12
 80049cc:	602b      	str	r3, [r5, #0]
 80049ce:	e7d6      	b.n	800497e <_free_r+0x22>
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	1821      	adds	r1, r4, r0
 80049d4:	428b      	cmp	r3, r1
 80049d6:	bf04      	itt	eq
 80049d8:	6819      	ldreq	r1, [r3, #0]
 80049da:	685b      	ldreq	r3, [r3, #4]
 80049dc:	6063      	str	r3, [r4, #4]
 80049de:	bf04      	itt	eq
 80049e0:	1809      	addeq	r1, r1, r0
 80049e2:	6021      	streq	r1, [r4, #0]
 80049e4:	6054      	str	r4, [r2, #4]
 80049e6:	e7ca      	b.n	800497e <_free_r+0x22>
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	200011bc 	.word	0x200011bc

080049f0 <sbrk_aligned>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004a30 <sbrk_aligned+0x40>)
 80049f4:	460c      	mov	r4, r1
 80049f6:	6831      	ldr	r1, [r6, #0]
 80049f8:	4605      	mov	r5, r0
 80049fa:	b911      	cbnz	r1, 8004a02 <sbrk_aligned+0x12>
 80049fc:	f000 fba4 	bl	8005148 <_sbrk_r>
 8004a00:	6030      	str	r0, [r6, #0]
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 fb9f 	bl	8005148 <_sbrk_r>
 8004a0a:	1c43      	adds	r3, r0, #1
 8004a0c:	d103      	bne.n	8004a16 <sbrk_aligned+0x26>
 8004a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8004a12:	4620      	mov	r0, r4
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
 8004a16:	1cc4      	adds	r4, r0, #3
 8004a18:	f024 0403 	bic.w	r4, r4, #3
 8004a1c:	42a0      	cmp	r0, r4
 8004a1e:	d0f8      	beq.n	8004a12 <sbrk_aligned+0x22>
 8004a20:	1a21      	subs	r1, r4, r0
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 fb90 	bl	8005148 <_sbrk_r>
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d1f2      	bne.n	8004a12 <sbrk_aligned+0x22>
 8004a2c:	e7ef      	b.n	8004a0e <sbrk_aligned+0x1e>
 8004a2e:	bf00      	nop
 8004a30:	200011b8 	.word	0x200011b8

08004a34 <_malloc_r>:
 8004a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a38:	1ccd      	adds	r5, r1, #3
 8004a3a:	f025 0503 	bic.w	r5, r5, #3
 8004a3e:	3508      	adds	r5, #8
 8004a40:	2d0c      	cmp	r5, #12
 8004a42:	bf38      	it	cc
 8004a44:	250c      	movcc	r5, #12
 8004a46:	2d00      	cmp	r5, #0
 8004a48:	4606      	mov	r6, r0
 8004a4a:	db01      	blt.n	8004a50 <_malloc_r+0x1c>
 8004a4c:	42a9      	cmp	r1, r5
 8004a4e:	d904      	bls.n	8004a5a <_malloc_r+0x26>
 8004a50:	230c      	movs	r3, #12
 8004a52:	6033      	str	r3, [r6, #0]
 8004a54:	2000      	movs	r0, #0
 8004a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b30 <_malloc_r+0xfc>
 8004a5e:	f000 f869 	bl	8004b34 <__malloc_lock>
 8004a62:	f8d8 3000 	ldr.w	r3, [r8]
 8004a66:	461c      	mov	r4, r3
 8004a68:	bb44      	cbnz	r4, 8004abc <_malloc_r+0x88>
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff ffbf 	bl	80049f0 <sbrk_aligned>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	4604      	mov	r4, r0
 8004a76:	d158      	bne.n	8004b2a <_malloc_r+0xf6>
 8004a78:	f8d8 4000 	ldr.w	r4, [r8]
 8004a7c:	4627      	mov	r7, r4
 8004a7e:	2f00      	cmp	r7, #0
 8004a80:	d143      	bne.n	8004b0a <_malloc_r+0xd6>
 8004a82:	2c00      	cmp	r4, #0
 8004a84:	d04b      	beq.n	8004b1e <_malloc_r+0xea>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	4639      	mov	r1, r7
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	eb04 0903 	add.w	r9, r4, r3
 8004a90:	f000 fb5a 	bl	8005148 <_sbrk_r>
 8004a94:	4581      	cmp	r9, r0
 8004a96:	d142      	bne.n	8004b1e <_malloc_r+0xea>
 8004a98:	6821      	ldr	r1, [r4, #0]
 8004a9a:	1a6d      	subs	r5, r5, r1
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff ffa6 	bl	80049f0 <sbrk_aligned>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d03a      	beq.n	8004b1e <_malloc_r+0xea>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	442b      	add	r3, r5
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	bb62      	cbnz	r2, 8004b10 <_malloc_r+0xdc>
 8004ab6:	f8c8 7000 	str.w	r7, [r8]
 8004aba:	e00f      	b.n	8004adc <_malloc_r+0xa8>
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	1b52      	subs	r2, r2, r5
 8004ac0:	d420      	bmi.n	8004b04 <_malloc_r+0xd0>
 8004ac2:	2a0b      	cmp	r2, #11
 8004ac4:	d917      	bls.n	8004af6 <_malloc_r+0xc2>
 8004ac6:	1961      	adds	r1, r4, r5
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	6025      	str	r5, [r4, #0]
 8004acc:	bf18      	it	ne
 8004ace:	6059      	strne	r1, [r3, #4]
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	bf08      	it	eq
 8004ad4:	f8c8 1000 	streq.w	r1, [r8]
 8004ad8:	5162      	str	r2, [r4, r5]
 8004ada:	604b      	str	r3, [r1, #4]
 8004adc:	4630      	mov	r0, r6
 8004ade:	f000 f82f 	bl	8004b40 <__malloc_unlock>
 8004ae2:	f104 000b 	add.w	r0, r4, #11
 8004ae6:	1d23      	adds	r3, r4, #4
 8004ae8:	f020 0007 	bic.w	r0, r0, #7
 8004aec:	1ac2      	subs	r2, r0, r3
 8004aee:	bf1c      	itt	ne
 8004af0:	1a1b      	subne	r3, r3, r0
 8004af2:	50a3      	strne	r3, [r4, r2]
 8004af4:	e7af      	b.n	8004a56 <_malloc_r+0x22>
 8004af6:	6862      	ldr	r2, [r4, #4]
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	bf0c      	ite	eq
 8004afc:	f8c8 2000 	streq.w	r2, [r8]
 8004b00:	605a      	strne	r2, [r3, #4]
 8004b02:	e7eb      	b.n	8004adc <_malloc_r+0xa8>
 8004b04:	4623      	mov	r3, r4
 8004b06:	6864      	ldr	r4, [r4, #4]
 8004b08:	e7ae      	b.n	8004a68 <_malloc_r+0x34>
 8004b0a:	463c      	mov	r4, r7
 8004b0c:	687f      	ldr	r7, [r7, #4]
 8004b0e:	e7b6      	b.n	8004a7e <_malloc_r+0x4a>
 8004b10:	461a      	mov	r2, r3
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	d1fb      	bne.n	8004b10 <_malloc_r+0xdc>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	6053      	str	r3, [r2, #4]
 8004b1c:	e7de      	b.n	8004adc <_malloc_r+0xa8>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	4630      	mov	r0, r6
 8004b24:	f000 f80c 	bl	8004b40 <__malloc_unlock>
 8004b28:	e794      	b.n	8004a54 <_malloc_r+0x20>
 8004b2a:	6005      	str	r5, [r0, #0]
 8004b2c:	e7d6      	b.n	8004adc <_malloc_r+0xa8>
 8004b2e:	bf00      	nop
 8004b30:	200011bc 	.word	0x200011bc

08004b34 <__malloc_lock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	@ (8004b3c <__malloc_lock+0x8>)
 8004b36:	f7ff bf01 	b.w	800493c <__retarget_lock_acquire_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	200011b4 	.word	0x200011b4

08004b40 <__malloc_unlock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	@ (8004b48 <__malloc_unlock+0x8>)
 8004b42:	f7ff befc 	b.w	800493e <__retarget_lock_release_recursive>
 8004b46:	bf00      	nop
 8004b48:	200011b4 	.word	0x200011b4

08004b4c <__ssputs_r>:
 8004b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b50:	688e      	ldr	r6, [r1, #8]
 8004b52:	461f      	mov	r7, r3
 8004b54:	42be      	cmp	r6, r7
 8004b56:	680b      	ldr	r3, [r1, #0]
 8004b58:	4682      	mov	sl, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	4690      	mov	r8, r2
 8004b5e:	d82d      	bhi.n	8004bbc <__ssputs_r+0x70>
 8004b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b68:	d026      	beq.n	8004bb8 <__ssputs_r+0x6c>
 8004b6a:	6965      	ldr	r5, [r4, #20]
 8004b6c:	6909      	ldr	r1, [r1, #16]
 8004b6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b72:	eba3 0901 	sub.w	r9, r3, r1
 8004b76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b7a:	1c7b      	adds	r3, r7, #1
 8004b7c:	444b      	add	r3, r9
 8004b7e:	106d      	asrs	r5, r5, #1
 8004b80:	429d      	cmp	r5, r3
 8004b82:	bf38      	it	cc
 8004b84:	461d      	movcc	r5, r3
 8004b86:	0553      	lsls	r3, r2, #21
 8004b88:	d527      	bpl.n	8004bda <__ssputs_r+0x8e>
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7ff ff52 	bl	8004a34 <_malloc_r>
 8004b90:	4606      	mov	r6, r0
 8004b92:	b360      	cbz	r0, 8004bee <__ssputs_r+0xa2>
 8004b94:	6921      	ldr	r1, [r4, #16]
 8004b96:	464a      	mov	r2, r9
 8004b98:	f7ff fed2 	bl	8004940 <memcpy>
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	6126      	str	r6, [r4, #16]
 8004baa:	6165      	str	r5, [r4, #20]
 8004bac:	444e      	add	r6, r9
 8004bae:	eba5 0509 	sub.w	r5, r5, r9
 8004bb2:	6026      	str	r6, [r4, #0]
 8004bb4:	60a5      	str	r5, [r4, #8]
 8004bb6:	463e      	mov	r6, r7
 8004bb8:	42be      	cmp	r6, r7
 8004bba:	d900      	bls.n	8004bbe <__ssputs_r+0x72>
 8004bbc:	463e      	mov	r6, r7
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	f000 faa6 	bl	8005114 <memmove>
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	1b9b      	subs	r3, r3, r6
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	4433      	add	r3, r6
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bda:	462a      	mov	r2, r5
 8004bdc:	f000 fac4 	bl	8005168 <_realloc_r>
 8004be0:	4606      	mov	r6, r0
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d1e0      	bne.n	8004ba8 <__ssputs_r+0x5c>
 8004be6:	6921      	ldr	r1, [r4, #16]
 8004be8:	4650      	mov	r0, sl
 8004bea:	f7ff feb7 	bl	800495c <_free_r>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	f8ca 3000 	str.w	r3, [sl]
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e7e9      	b.n	8004bd6 <__ssputs_r+0x8a>
	...

08004c04 <_svfiprintf_r>:
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	4698      	mov	r8, r3
 8004c0a:	898b      	ldrh	r3, [r1, #12]
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	b09d      	sub	sp, #116	@ 0x74
 8004c10:	4607      	mov	r7, r0
 8004c12:	460d      	mov	r5, r1
 8004c14:	4614      	mov	r4, r2
 8004c16:	d510      	bpl.n	8004c3a <_svfiprintf_r+0x36>
 8004c18:	690b      	ldr	r3, [r1, #16]
 8004c1a:	b973      	cbnz	r3, 8004c3a <_svfiprintf_r+0x36>
 8004c1c:	2140      	movs	r1, #64	@ 0x40
 8004c1e:	f7ff ff09 	bl	8004a34 <_malloc_r>
 8004c22:	6028      	str	r0, [r5, #0]
 8004c24:	6128      	str	r0, [r5, #16]
 8004c26:	b930      	cbnz	r0, 8004c36 <_svfiprintf_r+0x32>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c30:	b01d      	add	sp, #116	@ 0x74
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	2340      	movs	r3, #64	@ 0x40
 8004c38:	616b      	str	r3, [r5, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c3e:	2320      	movs	r3, #32
 8004c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c48:	2330      	movs	r3, #48	@ 0x30
 8004c4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004de8 <_svfiprintf_r+0x1e4>
 8004c4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c52:	f04f 0901 	mov.w	r9, #1
 8004c56:	4623      	mov	r3, r4
 8004c58:	469a      	mov	sl, r3
 8004c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c5e:	b10a      	cbz	r2, 8004c64 <_svfiprintf_r+0x60>
 8004c60:	2a25      	cmp	r2, #37	@ 0x25
 8004c62:	d1f9      	bne.n	8004c58 <_svfiprintf_r+0x54>
 8004c64:	ebba 0b04 	subs.w	fp, sl, r4
 8004c68:	d00b      	beq.n	8004c82 <_svfiprintf_r+0x7e>
 8004c6a:	465b      	mov	r3, fp
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	4638      	mov	r0, r7
 8004c72:	f7ff ff6b 	bl	8004b4c <__ssputs_r>
 8004c76:	3001      	adds	r0, #1
 8004c78:	f000 80a7 	beq.w	8004dca <_svfiprintf_r+0x1c6>
 8004c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c7e:	445a      	add	r2, fp
 8004c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c82:	f89a 3000 	ldrb.w	r3, [sl]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 809f 	beq.w	8004dca <_svfiprintf_r+0x1c6>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c96:	f10a 0a01 	add.w	sl, sl, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	9307      	str	r3, [sp, #28]
 8004c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ca4:	4654      	mov	r4, sl
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cac:	484e      	ldr	r0, [pc, #312]	@ (8004de8 <_svfiprintf_r+0x1e4>)
 8004cae:	f7fb fa97 	bl	80001e0 <memchr>
 8004cb2:	9a04      	ldr	r2, [sp, #16]
 8004cb4:	b9d8      	cbnz	r0, 8004cee <_svfiprintf_r+0xea>
 8004cb6:	06d0      	lsls	r0, r2, #27
 8004cb8:	bf44      	itt	mi
 8004cba:	2320      	movmi	r3, #32
 8004cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cc0:	0711      	lsls	r1, r2, #28
 8004cc2:	bf44      	itt	mi
 8004cc4:	232b      	movmi	r3, #43	@ 0x2b
 8004cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cca:	f89a 3000 	ldrb.w	r3, [sl]
 8004cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cd0:	d015      	beq.n	8004cfe <_svfiprintf_r+0xfa>
 8004cd2:	9a07      	ldr	r2, [sp, #28]
 8004cd4:	4654      	mov	r4, sl
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f04f 0c0a 	mov.w	ip, #10
 8004cdc:	4621      	mov	r1, r4
 8004cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ce2:	3b30      	subs	r3, #48	@ 0x30
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	d94b      	bls.n	8004d80 <_svfiprintf_r+0x17c>
 8004ce8:	b1b0      	cbz	r0, 8004d18 <_svfiprintf_r+0x114>
 8004cea:	9207      	str	r2, [sp, #28]
 8004cec:	e014      	b.n	8004d18 <_svfiprintf_r+0x114>
 8004cee:	eba0 0308 	sub.w	r3, r0, r8
 8004cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	9304      	str	r3, [sp, #16]
 8004cfa:	46a2      	mov	sl, r4
 8004cfc:	e7d2      	b.n	8004ca4 <_svfiprintf_r+0xa0>
 8004cfe:	9b03      	ldr	r3, [sp, #12]
 8004d00:	1d19      	adds	r1, r3, #4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	9103      	str	r1, [sp, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bfbb      	ittet	lt
 8004d0a:	425b      	neglt	r3, r3
 8004d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d10:	9307      	strge	r3, [sp, #28]
 8004d12:	9307      	strlt	r3, [sp, #28]
 8004d14:	bfb8      	it	lt
 8004d16:	9204      	strlt	r2, [sp, #16]
 8004d18:	7823      	ldrb	r3, [r4, #0]
 8004d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d1c:	d10a      	bne.n	8004d34 <_svfiprintf_r+0x130>
 8004d1e:	7863      	ldrb	r3, [r4, #1]
 8004d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d22:	d132      	bne.n	8004d8a <_svfiprintf_r+0x186>
 8004d24:	9b03      	ldr	r3, [sp, #12]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	9203      	str	r2, [sp, #12]
 8004d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d30:	3402      	adds	r4, #2
 8004d32:	9305      	str	r3, [sp, #20]
 8004d34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004df8 <_svfiprintf_r+0x1f4>
 8004d38:	7821      	ldrb	r1, [r4, #0]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	f7fb fa4f 	bl	80001e0 <memchr>
 8004d42:	b138      	cbz	r0, 8004d54 <_svfiprintf_r+0x150>
 8004d44:	9b04      	ldr	r3, [sp, #16]
 8004d46:	eba0 000a 	sub.w	r0, r0, sl
 8004d4a:	2240      	movs	r2, #64	@ 0x40
 8004d4c:	4082      	lsls	r2, r0
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	3401      	adds	r4, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d58:	4824      	ldr	r0, [pc, #144]	@ (8004dec <_svfiprintf_r+0x1e8>)
 8004d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d5e:	2206      	movs	r2, #6
 8004d60:	f7fb fa3e 	bl	80001e0 <memchr>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d036      	beq.n	8004dd6 <_svfiprintf_r+0x1d2>
 8004d68:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <_svfiprintf_r+0x1ec>)
 8004d6a:	bb1b      	cbnz	r3, 8004db4 <_svfiprintf_r+0x1b0>
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	3307      	adds	r3, #7
 8004d70:	f023 0307 	bic.w	r3, r3, #7
 8004d74:	3308      	adds	r3, #8
 8004d76:	9303      	str	r3, [sp, #12]
 8004d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7a:	4433      	add	r3, r6
 8004d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d7e:	e76a      	b.n	8004c56 <_svfiprintf_r+0x52>
 8004d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d84:	460c      	mov	r4, r1
 8004d86:	2001      	movs	r0, #1
 8004d88:	e7a8      	b.n	8004cdc <_svfiprintf_r+0xd8>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	3401      	adds	r4, #1
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	4619      	mov	r1, r3
 8004d92:	f04f 0c0a 	mov.w	ip, #10
 8004d96:	4620      	mov	r0, r4
 8004d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d9c:	3a30      	subs	r2, #48	@ 0x30
 8004d9e:	2a09      	cmp	r2, #9
 8004da0:	d903      	bls.n	8004daa <_svfiprintf_r+0x1a6>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0c6      	beq.n	8004d34 <_svfiprintf_r+0x130>
 8004da6:	9105      	str	r1, [sp, #20]
 8004da8:	e7c4      	b.n	8004d34 <_svfiprintf_r+0x130>
 8004daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dae:	4604      	mov	r4, r0
 8004db0:	2301      	movs	r3, #1
 8004db2:	e7f0      	b.n	8004d96 <_svfiprintf_r+0x192>
 8004db4:	ab03      	add	r3, sp, #12
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	462a      	mov	r2, r5
 8004dba:	4b0e      	ldr	r3, [pc, #56]	@ (8004df4 <_svfiprintf_r+0x1f0>)
 8004dbc:	a904      	add	r1, sp, #16
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	f3af 8000 	nop.w
 8004dc4:	1c42      	adds	r2, r0, #1
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	d1d6      	bne.n	8004d78 <_svfiprintf_r+0x174>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	065b      	lsls	r3, r3, #25
 8004dce:	f53f af2d 	bmi.w	8004c2c <_svfiprintf_r+0x28>
 8004dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dd4:	e72c      	b.n	8004c30 <_svfiprintf_r+0x2c>
 8004dd6:	ab03      	add	r3, sp, #12
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	462a      	mov	r2, r5
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <_svfiprintf_r+0x1f0>)
 8004dde:	a904      	add	r1, sp, #16
 8004de0:	4638      	mov	r0, r7
 8004de2:	f000 f879 	bl	8004ed8 <_printf_i>
 8004de6:	e7ed      	b.n	8004dc4 <_svfiprintf_r+0x1c0>
 8004de8:	080052a0 	.word	0x080052a0
 8004dec:	080052aa 	.word	0x080052aa
 8004df0:	00000000 	.word	0x00000000
 8004df4:	08004b4d 	.word	0x08004b4d
 8004df8:	080052a6 	.word	0x080052a6

08004dfc <_printf_common>:
 8004dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	4616      	mov	r6, r2
 8004e02:	4698      	mov	r8, r3
 8004e04:	688a      	ldr	r2, [r1, #8]
 8004e06:	690b      	ldr	r3, [r1, #16]
 8004e08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bfb8      	it	lt
 8004e10:	4613      	movlt	r3, r2
 8004e12:	6033      	str	r3, [r6, #0]
 8004e14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e18:	4607      	mov	r7, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	b10a      	cbz	r2, 8004e22 <_printf_common+0x26>
 8004e1e:	3301      	adds	r3, #1
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	0699      	lsls	r1, r3, #26
 8004e26:	bf42      	ittt	mi
 8004e28:	6833      	ldrmi	r3, [r6, #0]
 8004e2a:	3302      	addmi	r3, #2
 8004e2c:	6033      	strmi	r3, [r6, #0]
 8004e2e:	6825      	ldr	r5, [r4, #0]
 8004e30:	f015 0506 	ands.w	r5, r5, #6
 8004e34:	d106      	bne.n	8004e44 <_printf_common+0x48>
 8004e36:	f104 0a19 	add.w	sl, r4, #25
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	6832      	ldr	r2, [r6, #0]
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	dc26      	bgt.n	8004e92 <_printf_common+0x96>
 8004e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	3b00      	subs	r3, #0
 8004e4c:	bf18      	it	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	0692      	lsls	r2, r2, #26
 8004e52:	d42b      	bmi.n	8004eac <_printf_common+0xb0>
 8004e54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e58:	4641      	mov	r1, r8
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	47c8      	blx	r9
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d01e      	beq.n	8004ea0 <_printf_common+0xa4>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	bf02      	ittt	eq
 8004e6e:	68e5      	ldreq	r5, [r4, #12]
 8004e70:	6833      	ldreq	r3, [r6, #0]
 8004e72:	1aed      	subeq	r5, r5, r3
 8004e74:	68a3      	ldr	r3, [r4, #8]
 8004e76:	bf0c      	ite	eq
 8004e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e7c:	2500      	movne	r5, #0
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	bfc4      	itt	gt
 8004e82:	1a9b      	subgt	r3, r3, r2
 8004e84:	18ed      	addgt	r5, r5, r3
 8004e86:	2600      	movs	r6, #0
 8004e88:	341a      	adds	r4, #26
 8004e8a:	42b5      	cmp	r5, r6
 8004e8c:	d11a      	bne.n	8004ec4 <_printf_common+0xc8>
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e008      	b.n	8004ea4 <_printf_common+0xa8>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4652      	mov	r2, sl
 8004e96:	4641      	mov	r1, r8
 8004e98:	4638      	mov	r0, r7
 8004e9a:	47c8      	blx	r9
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d103      	bne.n	8004ea8 <_printf_common+0xac>
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	3501      	adds	r5, #1
 8004eaa:	e7c6      	b.n	8004e3a <_printf_common+0x3e>
 8004eac:	18e1      	adds	r1, r4, r3
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	2030      	movs	r0, #48	@ 0x30
 8004eb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eb6:	4422      	add	r2, r4
 8004eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ec0:	3302      	adds	r3, #2
 8004ec2:	e7c7      	b.n	8004e54 <_printf_common+0x58>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4641      	mov	r1, r8
 8004eca:	4638      	mov	r0, r7
 8004ecc:	47c8      	blx	r9
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d0e6      	beq.n	8004ea0 <_printf_common+0xa4>
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7d9      	b.n	8004e8a <_printf_common+0x8e>
	...

08004ed8 <_printf_i>:
 8004ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004edc:	7e0f      	ldrb	r7, [r1, #24]
 8004ede:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ee0:	2f78      	cmp	r7, #120	@ 0x78
 8004ee2:	4691      	mov	r9, r2
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	469a      	mov	sl, r3
 8004eea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eee:	d807      	bhi.n	8004f00 <_printf_i+0x28>
 8004ef0:	2f62      	cmp	r7, #98	@ 0x62
 8004ef2:	d80a      	bhi.n	8004f0a <_printf_i+0x32>
 8004ef4:	2f00      	cmp	r7, #0
 8004ef6:	f000 80d1 	beq.w	800509c <_printf_i+0x1c4>
 8004efa:	2f58      	cmp	r7, #88	@ 0x58
 8004efc:	f000 80b8 	beq.w	8005070 <_printf_i+0x198>
 8004f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f08:	e03a      	b.n	8004f80 <_printf_i+0xa8>
 8004f0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f0e:	2b15      	cmp	r3, #21
 8004f10:	d8f6      	bhi.n	8004f00 <_printf_i+0x28>
 8004f12:	a101      	add	r1, pc, #4	@ (adr r1, 8004f18 <_printf_i+0x40>)
 8004f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004f85 	.word	0x08004f85
 8004f20:	08004f01 	.word	0x08004f01
 8004f24:	08004f01 	.word	0x08004f01
 8004f28:	08004f01 	.word	0x08004f01
 8004f2c:	08004f01 	.word	0x08004f01
 8004f30:	08004f85 	.word	0x08004f85
 8004f34:	08004f01 	.word	0x08004f01
 8004f38:	08004f01 	.word	0x08004f01
 8004f3c:	08004f01 	.word	0x08004f01
 8004f40:	08004f01 	.word	0x08004f01
 8004f44:	08005083 	.word	0x08005083
 8004f48:	08004faf 	.word	0x08004faf
 8004f4c:	0800503d 	.word	0x0800503d
 8004f50:	08004f01 	.word	0x08004f01
 8004f54:	08004f01 	.word	0x08004f01
 8004f58:	080050a5 	.word	0x080050a5
 8004f5c:	08004f01 	.word	0x08004f01
 8004f60:	08004faf 	.word	0x08004faf
 8004f64:	08004f01 	.word	0x08004f01
 8004f68:	08004f01 	.word	0x08004f01
 8004f6c:	08005045 	.word	0x08005045
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	1d1a      	adds	r2, r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6032      	str	r2, [r6, #0]
 8004f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f80:	2301      	movs	r3, #1
 8004f82:	e09c      	b.n	80050be <_printf_i+0x1e6>
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	6820      	ldr	r0, [r4, #0]
 8004f88:	1d19      	adds	r1, r3, #4
 8004f8a:	6031      	str	r1, [r6, #0]
 8004f8c:	0606      	lsls	r6, r0, #24
 8004f8e:	d501      	bpl.n	8004f94 <_printf_i+0xbc>
 8004f90:	681d      	ldr	r5, [r3, #0]
 8004f92:	e003      	b.n	8004f9c <_printf_i+0xc4>
 8004f94:	0645      	lsls	r5, r0, #25
 8004f96:	d5fb      	bpl.n	8004f90 <_printf_i+0xb8>
 8004f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	da03      	bge.n	8004fa8 <_printf_i+0xd0>
 8004fa0:	232d      	movs	r3, #45	@ 0x2d
 8004fa2:	426d      	negs	r5, r5
 8004fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fa8:	4858      	ldr	r0, [pc, #352]	@ (800510c <_printf_i+0x234>)
 8004faa:	230a      	movs	r3, #10
 8004fac:	e011      	b.n	8004fd2 <_printf_i+0xfa>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	0608      	lsls	r0, r1, #24
 8004fb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fb8:	d402      	bmi.n	8004fc0 <_printf_i+0xe8>
 8004fba:	0649      	lsls	r1, r1, #25
 8004fbc:	bf48      	it	mi
 8004fbe:	b2ad      	uxthmi	r5, r5
 8004fc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fc2:	4852      	ldr	r0, [pc, #328]	@ (800510c <_printf_i+0x234>)
 8004fc4:	6033      	str	r3, [r6, #0]
 8004fc6:	bf14      	ite	ne
 8004fc8:	230a      	movne	r3, #10
 8004fca:	2308      	moveq	r3, #8
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fd2:	6866      	ldr	r6, [r4, #4]
 8004fd4:	60a6      	str	r6, [r4, #8]
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	db05      	blt.n	8004fe6 <_printf_i+0x10e>
 8004fda:	6821      	ldr	r1, [r4, #0]
 8004fdc:	432e      	orrs	r6, r5
 8004fde:	f021 0104 	bic.w	r1, r1, #4
 8004fe2:	6021      	str	r1, [r4, #0]
 8004fe4:	d04b      	beq.n	800507e <_printf_i+0x1a6>
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fec:	fb03 5711 	mls	r7, r3, r1, r5
 8004ff0:	5dc7      	ldrb	r7, [r0, r7]
 8004ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ff6:	462f      	mov	r7, r5
 8004ff8:	42bb      	cmp	r3, r7
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	d9f4      	bls.n	8004fe8 <_printf_i+0x110>
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d10b      	bne.n	800501a <_printf_i+0x142>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	07df      	lsls	r7, r3, #31
 8005006:	d508      	bpl.n	800501a <_printf_i+0x142>
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	6861      	ldr	r1, [r4, #4]
 800500c:	4299      	cmp	r1, r3
 800500e:	bfde      	ittt	le
 8005010:	2330      	movle	r3, #48	@ 0x30
 8005012:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800501a:	1b92      	subs	r2, r2, r6
 800501c:	6122      	str	r2, [r4, #16]
 800501e:	f8cd a000 	str.w	sl, [sp]
 8005022:	464b      	mov	r3, r9
 8005024:	aa03      	add	r2, sp, #12
 8005026:	4621      	mov	r1, r4
 8005028:	4640      	mov	r0, r8
 800502a:	f7ff fee7 	bl	8004dfc <_printf_common>
 800502e:	3001      	adds	r0, #1
 8005030:	d14a      	bne.n	80050c8 <_printf_i+0x1f0>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	b004      	add	sp, #16
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	f043 0320 	orr.w	r3, r3, #32
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	4832      	ldr	r0, [pc, #200]	@ (8005110 <_printf_i+0x238>)
 8005046:	2778      	movs	r7, #120	@ 0x78
 8005048:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	6831      	ldr	r1, [r6, #0]
 8005050:	061f      	lsls	r7, r3, #24
 8005052:	f851 5b04 	ldr.w	r5, [r1], #4
 8005056:	d402      	bmi.n	800505e <_printf_i+0x186>
 8005058:	065f      	lsls	r7, r3, #25
 800505a:	bf48      	it	mi
 800505c:	b2ad      	uxthmi	r5, r5
 800505e:	6031      	str	r1, [r6, #0]
 8005060:	07d9      	lsls	r1, r3, #31
 8005062:	bf44      	itt	mi
 8005064:	f043 0320 	orrmi.w	r3, r3, #32
 8005068:	6023      	strmi	r3, [r4, #0]
 800506a:	b11d      	cbz	r5, 8005074 <_printf_i+0x19c>
 800506c:	2310      	movs	r3, #16
 800506e:	e7ad      	b.n	8004fcc <_printf_i+0xf4>
 8005070:	4826      	ldr	r0, [pc, #152]	@ (800510c <_printf_i+0x234>)
 8005072:	e7e9      	b.n	8005048 <_printf_i+0x170>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	f023 0320 	bic.w	r3, r3, #32
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	e7f6      	b.n	800506c <_printf_i+0x194>
 800507e:	4616      	mov	r6, r2
 8005080:	e7bd      	b.n	8004ffe <_printf_i+0x126>
 8005082:	6833      	ldr	r3, [r6, #0]
 8005084:	6825      	ldr	r5, [r4, #0]
 8005086:	6961      	ldr	r1, [r4, #20]
 8005088:	1d18      	adds	r0, r3, #4
 800508a:	6030      	str	r0, [r6, #0]
 800508c:	062e      	lsls	r6, r5, #24
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	d501      	bpl.n	8005096 <_printf_i+0x1be>
 8005092:	6019      	str	r1, [r3, #0]
 8005094:	e002      	b.n	800509c <_printf_i+0x1c4>
 8005096:	0668      	lsls	r0, r5, #25
 8005098:	d5fb      	bpl.n	8005092 <_printf_i+0x1ba>
 800509a:	8019      	strh	r1, [r3, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	4616      	mov	r6, r2
 80050a2:	e7bc      	b.n	800501e <_printf_i+0x146>
 80050a4:	6833      	ldr	r3, [r6, #0]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	6032      	str	r2, [r6, #0]
 80050aa:	681e      	ldr	r6, [r3, #0]
 80050ac:	6862      	ldr	r2, [r4, #4]
 80050ae:	2100      	movs	r1, #0
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7fb f895 	bl	80001e0 <memchr>
 80050b6:	b108      	cbz	r0, 80050bc <_printf_i+0x1e4>
 80050b8:	1b80      	subs	r0, r0, r6
 80050ba:	6060      	str	r0, [r4, #4]
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	6123      	str	r3, [r4, #16]
 80050c0:	2300      	movs	r3, #0
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c6:	e7aa      	b.n	800501e <_printf_i+0x146>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	4632      	mov	r2, r6
 80050cc:	4649      	mov	r1, r9
 80050ce:	4640      	mov	r0, r8
 80050d0:	47d0      	blx	sl
 80050d2:	3001      	adds	r0, #1
 80050d4:	d0ad      	beq.n	8005032 <_printf_i+0x15a>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	079b      	lsls	r3, r3, #30
 80050da:	d413      	bmi.n	8005104 <_printf_i+0x22c>
 80050dc:	68e0      	ldr	r0, [r4, #12]
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	4298      	cmp	r0, r3
 80050e2:	bfb8      	it	lt
 80050e4:	4618      	movlt	r0, r3
 80050e6:	e7a6      	b.n	8005036 <_printf_i+0x15e>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4632      	mov	r2, r6
 80050ec:	4649      	mov	r1, r9
 80050ee:	4640      	mov	r0, r8
 80050f0:	47d0      	blx	sl
 80050f2:	3001      	adds	r0, #1
 80050f4:	d09d      	beq.n	8005032 <_printf_i+0x15a>
 80050f6:	3501      	adds	r5, #1
 80050f8:	68e3      	ldr	r3, [r4, #12]
 80050fa:	9903      	ldr	r1, [sp, #12]
 80050fc:	1a5b      	subs	r3, r3, r1
 80050fe:	42ab      	cmp	r3, r5
 8005100:	dcf2      	bgt.n	80050e8 <_printf_i+0x210>
 8005102:	e7eb      	b.n	80050dc <_printf_i+0x204>
 8005104:	2500      	movs	r5, #0
 8005106:	f104 0619 	add.w	r6, r4, #25
 800510a:	e7f5      	b.n	80050f8 <_printf_i+0x220>
 800510c:	080052b1 	.word	0x080052b1
 8005110:	080052c2 	.word	0x080052c2

08005114 <memmove>:
 8005114:	4288      	cmp	r0, r1
 8005116:	b510      	push	{r4, lr}
 8005118:	eb01 0402 	add.w	r4, r1, r2
 800511c:	d902      	bls.n	8005124 <memmove+0x10>
 800511e:	4284      	cmp	r4, r0
 8005120:	4623      	mov	r3, r4
 8005122:	d807      	bhi.n	8005134 <memmove+0x20>
 8005124:	1e43      	subs	r3, r0, #1
 8005126:	42a1      	cmp	r1, r4
 8005128:	d008      	beq.n	800513c <memmove+0x28>
 800512a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800512e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005132:	e7f8      	b.n	8005126 <memmove+0x12>
 8005134:	4402      	add	r2, r0
 8005136:	4601      	mov	r1, r0
 8005138:	428a      	cmp	r2, r1
 800513a:	d100      	bne.n	800513e <memmove+0x2a>
 800513c:	bd10      	pop	{r4, pc}
 800513e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005146:	e7f7      	b.n	8005138 <memmove+0x24>

08005148 <_sbrk_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	@ (8005164 <_sbrk_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb fc8e 	bl	8000a74 <_sbrk>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_sbrk_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_sbrk_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	200011b0 	.word	0x200011b0

08005168 <_realloc_r>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4607      	mov	r7, r0
 800516e:	4614      	mov	r4, r2
 8005170:	460d      	mov	r5, r1
 8005172:	b921      	cbnz	r1, 800517e <_realloc_r+0x16>
 8005174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005178:	4611      	mov	r1, r2
 800517a:	f7ff bc5b 	b.w	8004a34 <_malloc_r>
 800517e:	b92a      	cbnz	r2, 800518c <_realloc_r+0x24>
 8005180:	f7ff fbec 	bl	800495c <_free_r>
 8005184:	4625      	mov	r5, r4
 8005186:	4628      	mov	r0, r5
 8005188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518c:	f000 f81a 	bl	80051c4 <_malloc_usable_size_r>
 8005190:	4284      	cmp	r4, r0
 8005192:	4606      	mov	r6, r0
 8005194:	d802      	bhi.n	800519c <_realloc_r+0x34>
 8005196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800519a:	d8f4      	bhi.n	8005186 <_realloc_r+0x1e>
 800519c:	4621      	mov	r1, r4
 800519e:	4638      	mov	r0, r7
 80051a0:	f7ff fc48 	bl	8004a34 <_malloc_r>
 80051a4:	4680      	mov	r8, r0
 80051a6:	b908      	cbnz	r0, 80051ac <_realloc_r+0x44>
 80051a8:	4645      	mov	r5, r8
 80051aa:	e7ec      	b.n	8005186 <_realloc_r+0x1e>
 80051ac:	42b4      	cmp	r4, r6
 80051ae:	4622      	mov	r2, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	bf28      	it	cs
 80051b4:	4632      	movcs	r2, r6
 80051b6:	f7ff fbc3 	bl	8004940 <memcpy>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4638      	mov	r0, r7
 80051be:	f7ff fbcd 	bl	800495c <_free_r>
 80051c2:	e7f1      	b.n	80051a8 <_realloc_r+0x40>

080051c4 <_malloc_usable_size_r>:
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f18      	subs	r0, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfbc      	itt	lt
 80051ce:	580b      	ldrlt	r3, [r1, r0]
 80051d0:	18c0      	addlt	r0, r0, r3
 80051d2:	4770      	bx	lr

080051d4 <_init>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	bf00      	nop
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr

080051e0 <_fini>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	bf00      	nop
 80051e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e6:	bc08      	pop	{r3}
 80051e8:	469e      	mov	lr, r3
 80051ea:	4770      	bx	lr
